{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"java\" category",
    "description": "欢迎来到大冰的笔记空间~这里主要会记录编程学习笔记🌸",
    "home_page_url": "https://blog.dabing.cool",
    "items": [
        {
            "id": "https://blog.dabing.cool/java/git/",
            "url": "https://blog.dabing.cool/java/git/",
            "title": "git",
            "date_published": "2022-04-10T02:00:00.000Z",
            "content_html": "<p>🍈作者：王甜甜（dabing）</p>\n<h1 id=\"怎么将本地项目上传到github上\"><a class=\"markdownIt-Anchor\" href=\"#怎么将本地项目上传到github上\">#</a> 怎么将本地项目上传到 github 上？</h1>\n<p><strong>一、首先你先有个本地项目</strong></p>\n<p><strong>二、到 GitHub 上注册个账户，下载 git。该做的都做了（不会就百度）</strong></p>\n<p><strong>三、设置 ssh 密钥</strong></p>\n<p><strong>1 - 生成 ssh key</strong></p>\n<p>在电脑开始处找到的 git 文件下的 git Bash</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653320827784-ca8321c0-4ad3-4899-b388-5af3845e941b.png\" alt=\"img\"></p>\n<p>切换到～/.ssh 目录下，查看有没有密钥的文件。就是这几个文件，或者在电脑文件里找也行</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653321716749-a9efeef6-08a1-419c-aca8-1f0455b46021.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653321844403-ea98dbe3-f84d-4706-88cf-e29ab554341f.png\" alt=\"img\"></p>\n<p>如果没有就生成密钥，具体命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> ~/.ssh  <span class=\"token comment\"># 切换到～/.ssh 目录下</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~/.ssh</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ <span class=\"token function\">ls</span>\t <span class=\"token comment\"># 列出该目录的文件，看看有没有 ssh 的 key 文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>known_hosts</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~/.ssh</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>$ ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"2261617090@qq.com\"</span>   <span class=\"token comment\"># 如果没有用这个命令生成，下面是打印信息不用管</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Generating public/private rsa key pair.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Enter <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token function\">which</span> to save the key <span class=\"token punctuation\">(</span>/c/Users/22616/.ssh/id_rsa<span class=\"token punctuation\">)</span>: <span class=\"token comment\">#这里让你确认密钥的生成位置，回车即可</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Enter passphrase <span class=\"token punctuation\">(</span>empty <span class=\"token keyword\">for</span> no passphrase<span class=\"token punctuation\">)</span>: <span class=\"token comment\"># 这里让你输入密码，我这里不填密码，不用密码太麻烦，回车即可</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Enter same passphrase again: <span class=\"token comment\"># 回车即可</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Your identification has been saved <span class=\"token keyword\">in</span> /c/Users/22616/.ssh/id_rsa</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Your public key has been saved <span class=\"token keyword\">in</span> /c/Users/22616/.ssh/id_rsa.pub</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>The key fingerprint is:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>SHA256:QZhUaReYx2/x1Bu14GwFOB9HaTKlAJ56sLydHJhKqfE <span class=\"token number\">2261617090</span>@qq.com</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>The key's randomart image is:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>+---<span class=\"token punctuation\">[</span>RSA <span class=\"token number\">3072</span><span class=\"token punctuation\">]</span>----+</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">|</span>     <span class=\"token punctuation\">..</span>+o*oo.o<span class=\"token operator\">+=</span>+<span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">|</span>      o.* <span class=\"token operator\">=</span>o<span class=\"token operator\">=</span><span class=\"token operator\">+=</span><span class=\"token operator\">=</span>o<span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">|</span>       o.<span class=\"token operator\">=</span> .oO*.o<span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">|</span>      o *.  +<span class=\"token punctuation\">..</span>. <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token builtin class-name\">.</span> o *So <span class=\"token builtin class-name\">.</span>     <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">|</span>    <span class=\"token operator\">=</span> <span class=\"token builtin class-name\">.</span> <span class=\"token operator\">=</span> o      <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token builtin class-name\">.</span> E <span class=\"token builtin class-name\">.</span> +       <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">|</span>                 <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">|</span>                 <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>+----<span class=\"token punctuation\">[</span>SHA256<span class=\"token punctuation\">]</span>-----+</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> ~/.ssh   <span class=\"token comment\"># 再切换过来看看</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~/.ssh</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>$ <span class=\"token function\">ls</span>\t<span class=\"token comment\"># 这下有了</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>id_rsa  id_rsa.pub  known_hosts  known_hosts.old</pre></td></tr></table></figure><p>这下已经生成密钥了，在 <code>C:\\Users\\22616\\.ssh</code>  路径下：打开 <code>id_rsa.pub</code>  这个是公钥，复制内容。</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653354976106-387e0032-f1ab-4083-8256-9cabb1f2f7b9.png\" alt=\"img\"></p>\n<p><strong>2 - 在 github 上设置 ssh key</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653322307223-9bdbca7a-6f5d-4f0d-896b-f6da2d35d9bf.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653322465457-a5d22820-a5a0-40e6-b18f-a582673b6675.png\" alt=\"img\"></p>\n<p>ok~~</p>\n<p><strong>四、GitHub 上建个仓库</strong></p>\n<p>new—&gt; 起个名 ----&gt; 创建</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653355092749-ffe2be8e-064c-434a-82e5-7689a5cdae69.png\" alt=\"img\"></p>\n<p>起个名～然后创建就行</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653355179304-fa420499-c23f-4175-b9e8-d8783173d0e1.png\" alt=\"img\"></p>\n<p><strong>五、将本地的项目提交到 GitHub 上</strong></p>\n<p><strong>1- 建立 git 仓库，Git Bash 切换到本地项目的根目录下，或者直接到项目目录里，右键 Git Bash 打开</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653322685848-52768f7f-44ad-4205-a0f8-c82e7f78043c.png\" alt=\"img\"><strong> 执行</strong> <code>git init</code> <strong> 命令，将这个项目变成 git 可以管理的仓库</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> init</pre></td></tr></table></figure><p><strong>2 - 将项目的所有文件添加到仓库，add 不仅可以添加单个文件，也可以跟通配符 ，可以跟目录。一个</strong> <code>.</code> <strong> 表示当前目录下的所有文件都 add</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p><strong>3 - 将 add 的文件 commit 到本地仓库</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"注释信息\"</span></pre></td></tr></table></figure><p><strong>4 - 关联 GitHub 仓库，把你刚刚创建的 GitHub 上的仓库路径复制一下，使用 ssh</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653323144193-1a0ec826-038c-4af1-8aeb-f4aa18d34213.png\" alt=\"img\"></p>\n<p>执行命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@github.com:dabing85/OA---SSM.git</pre></td></tr></table></figure><p><strong>5 - 在上传代码之前，最好先 pull 一下</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> pull origin master</pre></td></tr></table></figure><p><strong>6 - 上传代码到 github 远程仓库上</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master</pre></td></tr></table></figure><p>好了，到这就完成了</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653355902995-b4ba474e-63cc-42e5-8a98-2cc70e8efd01.png\" alt=\"img\"></p>\n<h1 id=\"一个很适合练习git的地方\"><a class=\"markdownIt-Anchor\" href=\"#一个很适合练习git的地方\">#</a> 一个很适合练习 git 的地方</h1>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vc2NoaW5hLmdpdGVlLmlvL2xlYXJuLWdpdC1icmFuY2hpbmcv\">https://oschina.gitee.io/learn-git-branching/</span></p>\n<p>我是从 gitee 底下点的，找 git 的学习资料也可以在 gitee 底下找。</p>\n<p>记一下我做了啥题，做着做着就忘了～～～（分主要、远程两部分）</p>\n<p><strong>一、主要题</strong></p>\n<ol>\n<li><code>git commit</code>   提交代码</li>\n<li><code>git branch newBranch</code>   创建一个名为 newBranch 的新分支</li>\n<li><code>git checkout newBranch</code>  切换到 newBranch 分支</li>\n<li><code>git merge newBranch</code>   将 newBranch 的代码合并到当前分支</li>\n<li>举个例子：将 <code>newBranch</code>  新写的代码提交，然后将它跟主分支 <code>master</code>  合并</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout newBranch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> checkout master</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> commit</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> merge newBranch</pre></td></tr></table></figure><ol>\n<li><code>git rebase master</code>  也是合并分支，但是这个合并分支可以看到提交的记录</li>\n<li>相对引用 <code>^</code>  可以找到它的父节点，即上次提交的记录。</li>\n</ol>\n<p>例如切换到 bugFix 分支的父节点：</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653367143898-9ff5e0db-ddd5-42d3-ae36-56d972a6f5ad.png\" alt=\"img\"></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout bugFix^</pre></td></tr></table></figure><ol>\n<li>相对引用 2 <code>~</code>  也是用来移动的，让 head 指向它的父节点。因为 <code>^</code>  是一次只往回移动一步， <code>~</code> + <code>数字</code> 可以移动多步，使用命令 <code>git checkout head~4</code></li>\n</ol>\n<p>head 本来是指向 c4 节点的，往以前提交的记录移动 4 个位置，到 c0</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653367488026-5a693369-0ab2-4fc1-bc8e-e4b05e186c89.png\" alt=\"img\"></p>\n<ol>\n<li>使用 <code>~</code>  配合 <code>-f</code>  可以强制修改分支的位置</li>\n</ol>\n<p>例如 <code>git branch -f master head~3</code>  这个命令的意思是将 master 分支的指向强制移动到 head 节点的第 3 级父级节点处。</p>\n<p>原本 master 分支是跟 bugFix 分支一样指向 c4 的，执行命令后，将 master 分支强制移动到了 c1 的提交记录位置去了。</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653368510537-fcd56a3a-8c96-4fa5-87be-08c128d913db.png\" alt=\"img\"></p>\n<p>二、远程题（实线是本地仓库，虚线是远程仓库）</p>\n<ol>\n<li><code>git clone</code>   -  在本地创建一个远程仓库的拷贝（比如从 <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20=\">github.com</span>）</li>\n<li><code>/</code> - 这是远程分支的命令规则，即远程仓库名 / 分支名，   如一般会取名为： <code>origin/master</code></li>\n<li><code>git fetch</code> - 从远程获取数据，并且本地的远程分支也会更新到最新的位置。</li>\n</ol>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653626701083-63d353e0-2ff0-4d8f-b96f-f1dc838c85b4.png\" alt=\"img\"></p>\n<p>git fetch 完成了两件事：</p>\n<ul>\n<li>从远程仓库下载本地</li>\n<li>更新远程分支（o/master）</li>\n</ul>\n<p><code>git fetch</code>  通常通过互联网（使用  <code>http:// </code> 或  <code>git:// </code> 协议) 与远程仓库通信</p>\n<p>注意 git fetch 只是把远程仓库的数据 <code>下载</code> 下来而已，并没有更新本地仓库的内容</p>\n<ol>\n<li><code>git pull</code> - 相当于 git fetch 和 git merge  o/master 两步操作，即先抓取更新，再合并到本地分支。</li>\n<li><code>git push</code> - 正好跟 pull 是相反的，将你的变更上传到指定的远程仓库，并在远程仓库上合并你的新提交记录。一旦 git push 成功，你的小伙伴就能在远程仓库下载你的分享成果了。</li>\n</ol>\n<p>如果你的 git push 没有带任何参数，那么它会是上传到你配置里默认的仓库里去，在 push.default 中有配置。但是我在我的项目里咋没找到这个配置</p>\n<ol>\n<li>对于有偏差的提交历史，咋办？就是在你 push 之前，你的同事已经在远程仓库上有提交了，如果他修改的 api 你使用到了，那就会发生冲突，你直接 push 是会失败的。</li>\n</ol>\n<p>这时，你需要先把远程仓库的数据更新到本地，再把你的本地提交 push 到远程仓库，你的修改就是基于新的远程分支的。具体操作：先 git pull ；再 git push</p>\n<p>也可以用 rebase 的方式合并，即先 git pull --rebase；再 git push</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653629059279-6dce82f7-1d33-4951-ae5d-219db6132668.png\" alt=\"img\"></p>\n<ol>\n<li>待做题 。。。。。。</li>\n</ol>\n<h1 id=\"在idea中使用git\"><a class=\"markdownIt-Anchor\" href=\"#在idea中使用git\">#</a> 在 idea 中使用 git？</h1>\n<h2 id=\"1-将你的项目初始化成一个git项目\"><a class=\"markdownIt-Anchor\" href=\"#1-将你的项目初始化成一个git项目\">#</a> 1 - 将你的项目初始化成一个 git 项目：</h2>\n<p>配置 Git  : VCS----&gt;Enable Version ----&gt; 选择 Git</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653663946711-f1ed609e-920a-42ad-acf1-b0a9bf76e857.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653664001651-e0c039b8-bed1-41e4-9a00-2a2dffcf0060.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653664096827-8c7f9bdf-1eee-496c-8280-b2849bf9e770.png\" alt=\"img\"></p>\n<p>看控制台的命令， <code>git init</code> , 这个操作会在本地创建一个本地仓库。</p>\n<h2 id=\"2-文件颜色说明\"><a class=\"markdownIt-Anchor\" href=\"#2-文件颜色说明\">#</a> 2- 文件颜色说明：</h2>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653664194120-0b8015de-feaa-406c-a09e-91e81c0cf95c.png\" alt=\"img\"><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653666563905-5cbad4f7-b538-4a20-9483-eee8c85b5a8b.png\" alt=\"img\"></p>\n<p><code>红色</code> 证明这个文件只是在<strong>工作区</strong>，git 是不管理红色文件的， <code>add</code>  之后变成 <code>绿色</code> 表示添加到了<strong>暂存区</strong>，再 <code>commit</code>  之后会变成普通的 <code>黑色</code> 保存到<strong>本地仓库</strong>，再 <code>push</code>  之后，会把本地仓库的文件上传到<strong>远程仓库</strong>并合并。而当你对文件进行过修改后，文件颜色会变成 <code>蓝色</code></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653664544471-10cdb690-687f-46f8-898f-f33d7fea64c8.png\" alt=\"img\"></p>\n<ul>\n<li>Workspace：工作区 (当前用户操作修改的区域)</li>\n<li>Index / Stage：暂存区 (add 后的区域)</li>\n<li>Repository：仓库区或本地仓库 (commit 后的区域)</li>\n<li>Remote：远程仓库 (push 后的区域)</li>\n</ul>\n<p>写多了，回来～～～</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653665079816-05a82e00-9349-46a0-ae6d-cc42c7e5de92.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653665404091-711c9498-e9f2-465d-9a29-36ec10b4892f.png\" alt=\"img\"></p>\n<p>可以再这看看人家 git 命令怎么用的</p>\n<h2 id=\"3-将文件commit-提交到本地仓库\"><a class=\"markdownIt-Anchor\" href=\"#3-将文件commit-提交到本地仓库\">#</a> 3 - 将文件 commit 提交到本地仓库:</h2>\n<p>sorry，我这里图标错啦，✔那个是 commit，↗是 push</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653665755831-df58f364-de57-4ab2-a222-0de9f68760c9.png\" alt=\"img\"></p>\n<h2 id=\"4-将本地仓库的文件-push-上传到远程分支上\"><a class=\"markdownIt-Anchor\" href=\"#4-将本地仓库的文件-push-上传到远程分支上\">#</a> 4 - 将本地仓库的文件 push 上传到远程分支上</h2>\n<p>要上传到远程上，你首先得先关联你的远程 git。比如 gitee。</p>\n<p><strong>在远程仓库上创建一个新项目</strong></p>\n<p><strong>将本地项目关联到远程仓库</strong></p>\n<p>我在 gitee 上创建，先设置 ssh 公钥，上次已经说过怎么生产公钥，怎么设置了</p>\n<p><strong>4.1 设置 ssh 公钥</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653667689764-a3570d4f-4ef2-4a30-8a10-a14dd2bd8840.png\" alt=\"img\"></p>\n<p><strong>4.2 创建仓库，并复制仓库 ssh 地址</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653668188943-de8e5820-74da-4d83-91d8-9b0009ac7812.png\" alt=\"img\"></p>\n<p><strong>4.3 在 idea 上执行下列命令，gitee 上也有教的</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@gitee.com:hedabing/wiki.git  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># origin 是远程仓库的名字，这样就不用每次都写很长的地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin <span class=\"token string\">\"master\"</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653669018375-61cb5792-27fe-483d-9484-ce03c2e2f254.png\" alt=\"img\"></p>\n<p>就 OK 了。</p>\n<p>下次再有新代码，就一样，用 idea 自带的图标，✔commit，↗push 即可。</p>\n<h2 id=\"4-分支说明\"><a class=\"markdownIt-Anchor\" href=\"#4-分支说明\">#</a> 4 - 分支说明</h2>\n<p>另外，一般工作中不会直接把你写的代码合并到 master 远程主分支上的，</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653787669095-ec8ec08f-06e5-46ef-bbfa-4ccd847c2711.png\" alt=\"img\"></p>\n<p>右下角这个树杈，就是指明了你 push 之后会把你的代码上传合并到哪个分支去，也就是 Local Branch 本地分支：hub/master 这里 hub 是远程仓库名字，master 是远程仓库的远程分支。</p>\n<p>在工作中呢，需要创建属于你自己的分支，你再本地环境下写好代码之后，push 到你自己的分支下。最后要做合并到 master 主分支下的请求才可以.</p>\n<p>例如下面是我的分支，我再这上面上传代码，并不会把代码直接上传到 master 主分支上。</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653788262004-8506ecdd-4db4-48ed-884c-fb52e026d2e0.png\" alt=\"img\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://blog.dabing.cool/java/Java8%E6%96%B0%E7%89%B9%E6%80%A7/",
            "url": "https://blog.dabing.cool/java/Java8%E6%96%B0%E7%89%B9%E6%80%A7/",
            "title": "Java8新特性",
            "date_published": "2022-04-10T02:00:00.000Z",
            "content_html": "<p>作者：王甜甜（dabing）</p>\n<p>视频：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtiNDExVzc1Tg==\"> 宋红康 - 全网最全 Java 零基础入门教程</span></p>\n<h1 id=\"java8-新特性\"><a class=\"markdownIt-Anchor\" href=\"#java8-新特性\">#</a> Java8 新特性</h1>\n<p>简介：</p>\n<ul>\n<li>速度更快</li>\n<li>代码更少（增加了新的语法：Lambda 表达式）</li>\n<li>强大的 Stream API</li>\n<li>便于并行</li>\n<li>最大化减少空指针异常：Optional</li>\n<li>Nashorn 引擎，允许在 JVM 上运行 js 应用</li>\n</ul>\n<h2 id=\"1-lambda表达式\"><a class=\"markdownIt-Anchor\" href=\"#1-lambda表达式\">#</a> 1 - Lambda 表达式</h2>\n<p>Lambda 表达式是一个匿名函数，Java8 允许把函数作为参数传递进方法中。</p>\n<p>一个新的语；法要求。说白了就看到别人的这样用很好，也抄一抄借鉴借鉴</p>\n<p><strong>语法格式</strong>：📒</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>experssion 或</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>statements<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>Lambda 实战：✍</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Lambda 表达式的使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 1. 举例：(o1,o2)-> Integer.compare (o1,o2)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 2. 格式：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *      -> :Lambda 操作符 或 箭头操作符</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *      左边：Lambda 形参列表 （其实就是接口种的抽象方法的形参列表）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *      右边：Lambda 体 （其实就是重写的抽象方法的方法体）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 3.Lambda 表达式的使用  ：分 6 种情况</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *   总结：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *   -> 左边：Lambda 形参列表的参数类型可以省略（类型推断）；如果 Lambda 形参列表只有一个参数，其 () 也可以省略</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *   -> 右边：Lambda 体应该使用一对 &#123;&#125; 包裹；如果 Lambda 体只有一条执行语句（可能时 return 语句），可以省略这一对 &#123;&#125; 和 return 关键字</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * 4.Lambda 表达式的本质：作为函数式接口的实例对象</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">Runnable</span> r2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我爱java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 无参，无返回</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 有参，无返回</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 类型推断，可省略数据类型</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con1<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一个参数，省略 ()</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span>com1 <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span>o2<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 多条执行语句，用 &#123;&#125; 包裹</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> com <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一条语句，&#123;&#125; 和 return 均可省略</span></pre></td></tr></table></figure><h2 id=\"2-interface\"><a class=\"markdownIt-Anchor\" href=\"#2-interface\">#</a> 2 - Interface</h2>\n<p>新的 interface 接口方法可以用  <code>default</code>  或   <code>static</code>   修饰，默认是 public abstract 修饰的，抽象方法（顺便提一嘴，变量是默认 public static final 修饰的）。</p>\n<p>被上面的两个修饰符修饰的方法分别是普通方法和静态方法，他们可以拥有<strong>方法体</strong>，实现类不必重写此方法。</p>\n<ol>\n<li><code>default</code>  修饰的方法，是普通实例方法，可以用 this 调用，可以被子类继承、重写。</li>\n<li><code>static</code>  修饰的方法，使用上和一般类静态方法一样。但它不能被子类继承，只能用 Interface 调用</li>\n</ol>\n<p>如果有一个类实现了两个接口，而两个接口有相同的一个方法，则实现类必须重写该方法。不然的话，编译的时候就会报错。</p>\n<p>另外，如果一个接口只有一个抽象方法，那这个接口被叫做<strong>函数式接口</strong>，函数式接口一般可以用<strong> Lambda</strong> 表达式进行书写。✍</p>\n<h2 id=\"3-functional-interface-函数式接口\"><a class=\"markdownIt-Anchor\" href=\"#3-functional-interface-函数式接口\">#</a> 3 - functional interface 函数式接口</h2>\n<p><strong>定义</strong>：也称为 SAM 接口，即 Single Abstract Method interfaces，有且只有一个抽象方法，但可以有多个非抽象方法的接口。</p>\n<p>在 java 8 中专门有一个包放函数式接口 <code>java.util.function</code> ，该包下的所有接口都有    <code>@FunctionalInterface</code>   注解，提供函数式编程。</p>\n<p>在其他包中也有函数式接口，其中一些没有 <code>@FunctionalInterface</code>  注解，但是只要符合函数式接口的定义就是函数式接口，与是否有该注解无关，注解只是在编译时起到强制规范定义的作用。其在 Lambda 表达式中有广泛的应用。</p>\n<h2 id=\"4-方法引用\"><a class=\"markdownIt-Anchor\" href=\"#4-方法引用\">#</a> 4 - 方法引用</h2>\n<p><strong>使用情景</strong>：当要传递给 Lambda 体的操作，已经有实现的方法了，可以使用方法引用！</p>\n<p>方法应用可以看作是 Lambda 表达式深层次的表达，换句话说，方法引用就是 Lambda 表达式，也就是函数式接口的一个 <code>实例</code> 。通过方法的名字来指向一个方法，可以认为是 Lambda 表达式的一个语法糖。</p>\n<p><strong>要求</strong>：实现接口的抽象方法的 <code>参数列表</code> 和 <code>返回值类型</code> ，必须与方法引用的方法的参数列表和返回值类型保持一致！（针对情况 1 和情况 2）</p>\n<p><strong>格式</strong>：使用操作符 <code>::</code>  将类（或对象）与方法名分割开来。</p>\n<p><strong>如下三种主要使用情况：</strong></p>\n<p>1. 对象：：实例方法名</p>\n<p>2. 类：：静态方法名</p>\n<p>3. 类：：实例方法名</p>\n<p>如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> comparator2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">compare</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Comparator 的 int compare (Integer o1,Integer o2)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//Integer 的 int compare (Integer o1,Integer o2)</span></pre></td></tr></table></figure><p>代码说明：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 情况一：对象：：实例方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Consumer 中的 void accept (T t);</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//PrintStream 中的 void println (T t)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 原 Lambda 写法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con1<span class=\"token operator\">=</span>str<span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 用方法引用 对象：：实例方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">PrintStream</span> ps<span class=\"token operator\">=</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con2<span class=\"token operator\">=</span>ps<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 情况二：类：：静态方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 原 Lambda 写法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> comparator1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 用方法引用 类：：静态方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> comparator2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">compare</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 传统写法</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> func1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span> aDouble<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>aDouble<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//Lambda 原写法</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> func2<span class=\"token operator\">=</span>d<span class=\"token operator\">-></span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 方法引用写法</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> func3<span class=\"token operator\">=</span><span class=\"token class-name\">Math</span><span class=\"token operator\">::</span><span class=\"token function\">round</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 情况二：类：：实例方法</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//Comparator 中的 int compare (T t1,T t2);</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//String 中的 int t1.compareTo (t2)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 原 Lambda 写法</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> com1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 用方法引用 类：：实例方法</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> com2 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"5-构造器引用\"><a class=\"markdownIt-Anchor\" href=\"#5-构造器引用\">#</a> 5 - 构造器引用</h2>\n<p>和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。</p>\n<p>抽象方法的返回值里类型即为构造器所属的类的类型</p>\n<p>代码说明：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造器引用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 传统写法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> fun1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> integer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 原 Lambda 写法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> fun2<span class=\"token operator\">=</span>i<span class=\"token operator\">-></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 用方法引用 类：：实例方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> fun3<span class=\"token operator\">=</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"6-stream\"><a class=\"markdownIt-Anchor\" href=\"#6-stream\">#</a> 6 - Stream</h2>\n<p>java 新增了 <code>java.util.stream</code>  包，它和之前的流大同小异。之前接触最多的是资源流，比如 <code>java.io.FileInputStream</code> ，通过流把文件从一个地方输入到另一个地方，它只是内容搬运工，对文件内容不做任何<em> CRUD</em>。</p>\n<p><code>Stream</code>  依然不存储数据，不同的是它可以检索 (Retrieve) 和逻辑处理 <code>集合</code> 数据、包括筛选、排序、统计、计数等。可以想象成是 Sql 语句。</p>\n<p>它的源数据可以是 <code>Collection</code> 、 <code>Array</code>  等。由于它的方法参数都是函数式接口类型，所以一般和 Lambda 配合使用</p>\n<p><strong>为什么要使用 Stream API？</strong></p>\n<p>实际开发中，项目中多数数据源都来自于 mysql、oracle 等，但现在数据源可以更多了，有 mongDB、redis 等，而这些 NoSql 的数据就需要 Java 层面去处理。这是就使用到了我们的 Stream 在 Java 层进行数据的处理。</p>\n<p>Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。</p>\n<p><strong>“集合讲的是数据，Stream 讲的是计算”</strong></p>\n<p><strong>注意：</strong></p>\n<p>1.Stream 自己不会存储元素</p>\n<p>2.Stream 不会改变源对象，相反，他们会返回一个持有结果的新的 Stream</p>\n<p>3.Stream 操作时延迟执行的，这意味着他们会等到需要结果的时候才执行</p>\n<p>体系图：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1650248693626-3fc79cda-6ee6-4f9d-b827-cd8391562194.png\" alt=\"img\"></p>\n<h3 id=\"流类型\"><a class=\"markdownIt-Anchor\" href=\"#流类型\">#</a> 流类型</h3>\n<p>1.stream 串行流</p>\n<p>2.parallelStream 并行流，可多线程执行</p>\n<p><strong>Stream 的操作三个步骤：</strong></p>\n<p><strong>1. 创建 Stream</strong></p>\n<p>一个数据源（如：集合、数组），获取一个流</p>\n<p><strong>2. 中间操作</strong></p>\n<p>一个中间操作，对数据源的数据进行处理</p>\n<p><strong>3. 终止操作（终端操作</strong></p>\n<p>一旦执行终止操作， <code>就执行中间操作</code>  (延迟执行)，并产生结果。之后，不会再被使用。</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221020234129381.png\" alt=\"image-20221020234129381\"></p>\n<h3 id=\"步骤一-创建stream\"><a class=\"markdownIt-Anchor\" href=\"#步骤一-创建stream\">#</a> 步骤一  创建 Stream</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 Stream 方式一：通过集合</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//default Stream&lt;E> stream (): 返回一个顺序流</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//default Stream&lt;E> parallelStream (): 返回一个并行流</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userStream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">parallelStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 创建 Stream 方式二：通过数组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 调用 Arrays 类的 static&lt;T> Stream&lt;T> stream (T [] array): 返回一个流</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">IntStream</span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 创建 Stream 方式三：通过 Stream 的 of ()</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 方式四：创建无限流，了解即可</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 迭代</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">//public static&lt;T> Stream&lt;T> iterate(final T seed,final UnaryOperator&lt;T>f)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 遍历前 10 个偶数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>t <span class=\"token operator\">-></span>t<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 生成</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">//public static&lt;T> Stream&lt;T> generate(Supplier&lt;T> s)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token operator\">::</span><span class=\"token function\">random</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"步骤二-中间操作\"><a class=\"markdownIt-Anchor\" href=\"#步骤二-中间操作\">#</a> 步骤二 中间操作</h3>\n<p>筛选与切片、映射、排序</p>\n<ol>\n<li><strong>中间操作：筛选与切片</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>filter(Predicate p)</strong></td>\n<td>用于通过设置的条件过滤出元素</td>\n</tr>\n<tr>\n<td><strong>distinct()</strong></td>\n<td>筛选，通过流所生成元系的 hashCode () 和 equals () 去除重复元素</td>\n</tr>\n<tr>\n<td><strong>limit(long maxSize)</strong></td>\n<td>截断流，使其元素不超过给定的数量</td>\n</tr>\n<tr>\n<td><strong>skip(long n)</strong></td>\n<td>跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回空流</td>\n</tr>\n</tbody>\n</table>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span>list <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span>ist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp1oyee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"马化騰\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">6000.38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1002</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"马云\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">9876.12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1003</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"刘强东\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">388.82</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1004</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"雷军\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">7657.37</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1005</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李彦宏\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">5555.32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1006</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"比尔盖茨\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span><span class=\"token number\">956.43</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1007</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"任正非\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">4333.32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1008</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"扎克伯格\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">35</span><span class=\"token punctuation\">,</span><span class=\"token number\">2508.32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//1. 筛选与切片</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 创建流</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span>stream <span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//filter--- 过滤数据，中间操作：查询员工表中薪资大于 7000 的员工信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>stream<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getsalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">7000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环输出为最终操作</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//limit (n)---- 截断流，使其元素不超过给定的数量</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 这里注意要重新获取一次流，Stream 流只用一次就关闭了</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前 3 条记录    </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//skip (n)---- 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回空流</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从第四条数据开始输出</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//distinct ()--- 筛选，通过流所生成元系的 hashCode () 和 equals () 去除重复元素</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token number\">1</span>ist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1009</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"刘强东\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token number\">1</span>ist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1009</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"刘强东\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 会去掉重复数据</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>中间操作：映射</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>map(Function f)</strong></td>\n<td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素（以前学函数的时候就先学的映射嘛）</td>\n</tr>\n<tr>\n<td><strong>mapToDouble(ToDoubleFunction f)</strong></td>\n<td>接受一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream</td>\n</tr>\n<tr>\n<td><strong>mapToInt(ToIntFunction f)</strong></td>\n<td>接受一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream</td>\n</tr>\n<tr>\n<td><strong>mapToIong(ToLongFunction f)</strong></td>\n<td>接受一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream</td>\n</tr>\n<tr>\n<td><strong>flatMap(Function f)</strong></td>\n<td>接受一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td>\n</tr>\n</tbody>\n</table>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//2 - 映射</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//map (Function f)—— 接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">-></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 练习 1：获取员工姓名长度大于 3 的员工的姓名。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeData</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> nameStream <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    nameStream<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">-></span> name<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 练习 2：使用 map () 中间操作实现 flatMap () 中间操作方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Stream</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> streamStream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StreamAPITest2</span><span class=\"token operator\">::</span><span class=\"token function\">fromStringToStream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    streamStream<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//flatMap (Function f)—— 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> characterStream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StreamAPITest2</span><span class=\"token operator\">::</span><span class=\"token function\">fromStringToStream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    characterStream<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 将字符串中的多个字符构成的集合转换为对应的 Stream 的实例</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span><span class=\"token function\">fromStringToStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span> c <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         str<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//map () 和 flatMap () 方法类似于 List 中的 add () 和 addAll () 方法</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1, 2, 3, 4, [5, 6, 7, 8]]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    list1<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1, 2, 3, 4, [5, 6, 7, 8], 5, 6, 7, 8]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>中间操作：排序</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>sorted()</strong></td>\n<td>产生一个新流，其中按自然顺序排序</td>\n</tr>\n<tr>\n<td><strong>sorted(Comparator com)</strong></td>\n<td>产生一个新流，其中按比较器顺序排序</td>\n</tr>\n</tbody>\n</table>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//3 - 排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//sorted ()—— 自然排序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 抛异常，原因：Employee 没有实现 Comparable 接口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeData</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//sorted (Comparator com)—— 定制排序</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees1 <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeData</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    employees1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">,</span>e2<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> ageValue <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ageValue <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> ageValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e2<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"步骤三-终止操作\"><a class=\"markdownIt-Anchor\" href=\"#步骤三-终止操作\">#</a> 步骤三 终止操作</h3>\n<p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如： <code>List</code> 、 <code>Integer</code> ，甚至是 <code>void</code></p>\n<p>流进行了终止操作之后，不能再次使用</p>\n<p>匹配与查找、归约、收集</p>\n<ol>\n<li><strong>终止操作：匹配与查找</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>allMatch(Predicate p)</strong></td>\n<td>检查是否匹配所有元素</td>\n</tr>\n<tr>\n<td><strong>anyMatch(Predicate p)</strong></td>\n<td>检查是否至少匹配一个元素</td>\n</tr>\n<tr>\n<td><strong>noneMatch(Predicate p)</strong></td>\n<td>检查是否没有匹配所有元素</td>\n</tr>\n<tr>\n<td><strong>findFirst()</strong></td>\n<td>返回第一个元素</td>\n</tr>\n<tr>\n<td><strong>findAny()</strong></td>\n<td>返回当前流中的任意元素</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><strong>方法</strong></td>\n<td><strong>描述</strong></td>\n</tr>\n<tr>\n<td>-----------------------</td>\n<td>------------------------------------------------------------</td>\n</tr>\n<tr>\n<td><strong>count()</strong></td>\n<td>返回流中元素总数</td>\n</tr>\n<tr>\n<td><strong>max(Comparator c)</strong></td>\n<td>返回流中最大值</td>\n</tr>\n<tr>\n<td><strong>min(Comparator c)</strong></td>\n<td>返回流中最小值</td>\n</tr>\n<tr>\n<td><strong>forEach(Consumer c)</strong></td>\n<td>内部迭代（使用 Collection 接口需要用户去做迭代，称为外部迭代。相反，Stream API 使用内部迭代 —— 它帮你把迭代做了)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1 - 匹配与查找</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeData</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//allMatch (Predicate p)—— 检查是否匹配所有元素。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 练习：是否所有的员工的年龄都大于 18</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">boolean</span> allMatch <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">allMatch</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>allMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//anyMatch (Predicate p)—— 检查是否至少匹配一个元素。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 练习：是否存在员工的工资大于 5000</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">boolean</span> anyMatch <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyMatch</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>anyMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//noneMatch (Predicate p)—— 检查是否没有匹配的元素。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 练习：是否存在员工姓 “雷”</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">boolean</span> noneMatch <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">noneMatch</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"雷\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>noneMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//findFirst—— 返回第一个元素</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> first <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//findAny—— 返回当前流中的任意元素</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employee <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">parallelStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeData</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//count—— 返回流中元素的总个数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//max (Comparator c)—— 返回流中最大值</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 练习：返回最高的工资</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> salaryStream <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> maxSalary <span class=\"token operator\">=</span> salaryStream<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token operator\">::</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>maxSalary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">//min (Comparator c)—— 返回流中最小值</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 练习：返回最低工资的员工</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> minSalary <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token operator\">::</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minSalary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">//forEach (Consumer c)—— 内部迭代</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 使用集合的遍历操作</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    employees<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>终止操作：归约</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>reduce(T iden,BinaryOperator b)</strong></td>\n<td>可以将流中元素反复结合起来，得到一个值。返回 T</td>\n</tr>\n<tr>\n<td><strong>reduce(BinaryOperator b)</strong></td>\n<td>可以将流中元素反复结合起来，得到一个值。返回 Optional<T></td>\n</tr>\n</tbody>\n</table>\n<p><code>map</code>  和 <code>reduce</code>  的连接通常称为 <code>map-reduce</code>  模式，因 Google 用它来进行网络搜索而出名</p>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//2 - 归约</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//reduce (T identity, BinaryOperator)—— 可以将流中元素反复结合起来，得到一个值。返回 T</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 练习 1：计算 1-10 的自然数的和</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Integer</span> sum <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//reduce (BinaryOperator) —— 可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 练习 2：计算公司所有员工工资的总和</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeData</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> sumSalary <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sumSalary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>终止操作：收集</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>collect(Collector c)</strong></td>\n<td>将流转换为其他形式。接收一个 Collector 接口的实现，用于给 Stream 中元素做汇总的方法</td>\n</tr>\n</tbody>\n</table>\n<p><code>Collector</code>  接口中方法的实现决定了如何对流执行收集的操作（如收集到  <code>List</code> 、 <code>Set</code> 、 <code>Map</code> ）</p>\n<p><code>Collectors</code>  实用类提供了很多静态方法，可以方便地创建常见收集器实例具体方法与实例如下表：</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221020234242661.png\" alt=\"image-20221020234242661\"></p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221020234301928.png\" alt=\"image-20221020234301928\"></p>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//3 - 收集</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//collect (Collector c)—— 将流转换为其他形式。接收一个 Collector 接口的实现，用于给 Stream 中元素做汇总的方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 练习 1：查找工资大于 6000 的员工，结果返回为一个 List 或 Set</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeData</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employeeList <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">6000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    employeeList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employeeSet <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">6000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    employeeSet<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"常用方法\"><a class=\"markdownIt-Anchor\" href=\"#常用方法\">#</a> 常用方法</h3>\n<p>接下来我们看 <code>java.util.stream.Stream</code>   常用方法 🤌</p>\n<p>上面的例子基本都有展示的啦～～～</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221020233658581.png\" alt=\"image-20221020233658581\"></p>\n<h3 id=\"小结\"><a class=\"markdownIt-Anchor\" href=\"#小结\">#</a> 小结</h3>\n<p>从源码和实例中我们可以总结出一些 stream 的特点</p>\n<ol>\n<li>通过简单的链式编程，使得它可以方便地对遍历处理后的数据进行再处理。</li>\n<li>方法参数都是函数式接口类型</li>\n<li>一个 Stream 只能操作一次，操作完就关闭了，继续使用这个 stream 会报错。</li>\n<li>Stream 不保存数据，不改变数据源</li>\n</ol>\n<h2 id=\"7-optional\"><a class=\"markdownIt-Anchor\" href=\"#7-optional\">#</a> 7 - Optional</h2>\n<p>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGFyZS53ZWl5dW4uY29tL1RodXFFYkQ1\">阿里巴巴开发手册</span>关于 Optional 的介绍中这样写到</p>\n<p>防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：</p>\n<p>1）返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE</p>\n<p>反例：public int f (){return Integer 对象}，如果为 null，自动拆箱会抛 NPE</p>\n<p>2）数据库的查询结果可能为 null</p>\n<p>3）集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null</p>\n<p>4）远程调用返回对象时，一律要求进行空指针判断，防止 NPE</p>\n<p>5）对于 Session 中获取的数据，建议进行 NPE 检查，避免空指针</p>\n<p>6）级联调用 obj.getA ().getB ().getC ()；一连串调用，易产生 NPE</p>\n<p>正例：使用 JDK8 的 Optional 类来防止 NPE 问题</p>\n<p><code>Optional</code>  在包 <code>java.util.Optional</code>  内，就是为防止 NPE 而生，其中可以包含空值或非空值。</p>\n<p>补充一下：</p>\n<p><strong>什么是 NPE？</strong></p>\n<p><code>NPE(java.lang.NullPointerException)</code> : 空指针异常。</p>\n<p><strong>怎么减少 NPE 的发生？</strong></p>\n<p>1. 遵守代码规范</p>\n<p>2. 使用 Optional 类 😃</p>\n<p>3. 空值检测</p>\n<h3 id=\"一个例子\"><a class=\"markdownIt-Anchor\" href=\"#一个例子\">#</a> 一个例子</h3>\n<p>假设有一个 Zoo 类，里面有个属性 Dog，需求要获取 Dog 的 age。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Zoo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>传统防止 NPE 的方式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Zoo</span> zoo <span class=\"token operator\">=</span> <span class=\"token function\">getZoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>zoo <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">Dog</span> dog <span class=\"token operator\">=</span> zoo<span class=\"token punctuation\">.</span><span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dog <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> dog<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其实传统方式虽然一层一层的判空，代码多，但是挺直观的。</p>\n<p>Optional  是这样的实现的：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>zoo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>o<span class=\"token punctuation\">.</span><span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>age<span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>                                                                      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对应着下面的方法说明很容易看懂的啦～～</span></pre></td></tr></table></figure><h3 id=\"optional类的方法\"><a class=\"markdownIt-Anchor\" href=\"#optional类的方法\">#</a> Optional 类的方法</h3>\n<p>上例的 Optional.ofNullable 只是其中的一种创建 Optional 的方法。</p>\n<p>它的结构图如下：</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221020233544717.png\" alt=\"image-20221020233544717\"></p>\n<ol>\n<li><strong>创建 Optional 类对象</strong></li>\n</ol>\n<p><strong>Optional.of(T t)</strong> : \t创建一个 Optional 实例，t 必须非空；</p>\n<p><strong>Optional.empty() :</strong>    创建一个空的 Optional 实例</p>\n<p><strong>Optional.ofNullable(T t)：</strong>\tt 可以为 null</p>\n<ol start=\"2\">\n<li><strong>判断 Optional 容器是否包含对象</strong></li>\n</ol>\n<p><strong>boolean isPresent()：</strong>  判断是否包含对象</p>\n<p><strong>void ifPresent(Consumer&lt;? super T&gt; consumer)：</strong>  如果有值，就执行 Consumer 接口的实现代码，并且该值会作为参数传给它。</p>\n<ol start=\"3\">\n<li><strong>获取 Optional 容器里装的对象</strong></li>\n</ol>\n<p><strong>T get()</strong>：如果调用对象包含值，返回该值，否则抛异常</p>\n<p><strong>T orElse(T other)</strong>：如果有值则将其返回，否则返回指定的 other 对象</p>\n<p><strong>T orElseGet(Supplier&lt;? extends t&gt; other)</strong>：如果有值则将其返回，否则返回由 Supplier 接口实现提供的对象。</p>\n<p><strong>T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</strong>：如果有值则将其返回，否则抛出由 Supplier 接口实现提供的异常。</p>\n<ol start=\"4\">\n<li><strong>搭配使用</strong></li>\n</ol>\n<p><strong>of()</strong> 和 <strong>get()</strong> 方法搭配使用，明确对象非空</p>\n<p><strong>ofNullable()</strong> 和 <strong>orElse()</strong> 搭配使用，不确定对象非空</p>\n<h3 id=\"代码示例\"><a class=\"markdownIt-Anchor\" href=\"#代码示例\">#</a> 代码示例：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OptionalTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//empty (): 创建的 Optional 对象内部的 value = null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> op1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>op1<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//Optional 封装的数据是否包含数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 如果 Optional 封装的数据 value 为空，则 get () 报错。否则，value 不为空时，返回 value.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//        str = null;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//of (T t): 封装数据 t 生成 Optional 对象。要求 t 非空，否则报错。</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> op1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//get () 通常与 of () 方法搭配使用。用于获取内部的封装的数据 value</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> op1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span><span class=\"token string\">\"Beijing\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        str <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">//ofNullable (T t) ：封装数据 t 赋给 Optional 内部的 value。不要求 t 非空</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> op1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">//orElse (T t1): 如果 Optional 内部的 value 非空，则返回此 value 值。如果</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">//value 为空，则返回 t1.</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> op1<span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shanghai\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用  <code>Optional</code>  类避免产生空指针异常</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GirlBoyOptionalTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 使用原始方法进行非空检验</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getGrilName1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boy</span> boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>boy <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">Girl</span> girl <span class=\"token operator\">=</span> boy<span class=\"token punctuation\">.</span><span class=\"token function\">getGirl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>girl <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">return</span> girl<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 使用 Optional 类的 getGirlName () 进行非空检验</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getGirlName2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boy</span> boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boy</span><span class=\"token punctuation\">></span></span> boyOptional <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 此时的 boy1 一定非空，boy 为空是返回 “迪丽热巴”</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Boy</span> boy1 <span class=\"token operator\">=</span> boyOptional<span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Boy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Girl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"迪丽热巴\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Girl</span> girl <span class=\"token operator\">=</span> boy1<span class=\"token punctuation\">.</span><span class=\"token function\">getGirl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//girl1 一定非空，girl 为空时返回 “古力娜扎”</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Girl</span><span class=\"token punctuation\">></span></span> girlOptional <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>girl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Girl</span> girl1 <span class=\"token operator\">=</span> girlOptional<span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Girl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古力娜扎\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> girl1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 测试手动写的控制检测</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Boy</span> boy <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getGrilName1</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        boy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getGrilName1</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        boy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Girl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"杨幂\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getGrilName1</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 测试用 Optional 类写的控制检测</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">Boy</span> boy <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getGirlName2</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        boy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getGirlName2</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        boy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Girl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"杨幂\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getGirlName2</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"8-date-time-api\"><a class=\"markdownIt-Anchor\" href=\"#8-date-time-api\">#</a> 8 - Date-Time API</h2>\n<p>Java8 在 <code>java.time</code>  包下包含一个全新的日期和时间 API，这是对   <code>java.util.Date</code>  的强有力补充，解决了 Date 类的大部分痛点：</p>\n<p>1. 非线程安全</p>\n<p>2. 时区处理麻烦</p>\n<p>3. 各种格式化、时间计算繁琐</p>\n<p>4. 设计有缺陷，Date 类同时包括日期和时间；还有一个 java.sql.Date，容易混淆</p>\n<p>Clock、ZoneId、LocalTime、LocalDate、</p>\n<p><code>java.time</code>  常用的类：而在旧版本中是 <code>java.util.Date</code>  既包含日期又包含时间</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ocalDateTime<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token comment\">// 日期 + 时间 format: yyyy-MM-ddTHH:mm:ss.SSS</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token comment\">// 日期 format: yyyy-MM-dd</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token comment\">// 时间 format: HH:mm:ss</span></pre></td></tr></table></figure><h3 id=\"localtime本地时间\"><a class=\"markdownIt-Anchor\" href=\"#localtime本地时间\">#</a> LocalTime (本地时间)</h3>\n<p>LocalTime 定义了一个没有时区信息的时间，例如 晚上 10 点或者 17:30:15</p>\n<p><strong>结构图</strong>：</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221020233419554.png\" alt=\"image-20221020233419554\"></p>\n<h3 id=\"localdate本地日期\"><a class=\"markdownIt-Anchor\" href=\"#localdate本地日期\">#</a> LocalDate (本地日期)</h3>\n<p>LocalDate 表示了一个确切的日期，比如 2022-04-18。该对象值是不可变的，用起来和 LocalTime 基本一致。</p>\n<p><strong>结构图</strong>：没有显示继承依赖等信息</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221020233438253.png\" alt=\"image-20221020233438253\"></p>\n<p><strong>例子展示</strong>：如何给 Date 对象加减天 / 月 / 年。另外注意这些对象是不可变得，操作返回的总是给一个新实例。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDate</span> today<span class=\"token operator\">=</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取现在的日期</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"今天的日期：\"</span><span class=\"token operator\">+</span>today<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2022-04-18</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">LocalDate</span> tomorrow <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ChronoUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DAYS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 明天的日期</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"明天的日期：\"</span><span class=\"token operator\">+</span>tomorrow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2022-04-19</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">LocalDate</span> yersterday1 <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">minusDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">LocalDate</span> yersterday2 <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">ChronoUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DAYS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"昨天的日期1：\"</span><span class=\"token operator\">+</span>yersterday1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"昨天的日期2：\"</span><span class=\"token operator\">+</span>yersterday2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 有很多种实现方式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">LocalDate</span> oneDay <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Month</span><span class=\"token punctuation\">.</span><span class=\"token constant\">JANUARY</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2022-01-01</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">DayOfWeek</span> dayOfWeek<span class=\"token operator\">=</span>oneDay<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfWeek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取那天是周几，有很多方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2022-01-01是周几：\"</span><span class=\"token operator\">+</span>dayOfWeek<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"localdatetime本地日期时间\"><a class=\"markdownIt-Anchor\" href=\"#localdatetime本地日期时间\">#</a> LocalDateTime (本地日期时间)</h3>\n<p>LocalDateTime 同时表示了时间和日期，相当于前两节内容合并到一个对象上了。LocalDateTime 和 LocalTime 还有 LocalDate 一样，都是不可变的。LocalDateTime 提供了一些能访问具体字段的方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> sylvester <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2014</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Month</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DECEMBER</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">DayOfWeek</span> dayOfWeek1 <span class=\"token operator\">=</span> sylvester<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfWeek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dayOfWeek1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// WEDNESDAY</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Month</span> month <span class=\"token operator\">=</span> sylvester<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// DECEMBER</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">long</span> minuteOfDay <span class=\"token operator\">=</span> sylvester<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChronoField</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTE_OF_DAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minuteOfDay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 1439  59h*60+59=1439min</span></pre></td></tr></table></figure><h3 id=\"格式化\"><a class=\"markdownIt-Anchor\" href=\"#格式化\">#</a> 格式化</h3>\n<p>格式化 LocalDateTime 和格式化时间和日期一样的，除了使用预定义好的格式外，我们也可以自己定义格式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">DateTimeFormatter</span> formatter <span class=\"token operator\">=</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MM dd, yyyy - HH:mm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> parsed <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"09 03, 2014 - 07:13\"</span><span class=\"token punctuation\">,</span> formatter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> string <span class=\"token operator\">=</span> formatter<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 09 03, 2014 - 07:13</span></pre></td></tr></table></figure><h3 id=\"解析字符串\"><a class=\"markdownIt-Anchor\" href=\"#解析字符串\">#</a> 解析字符串</h3>\n<p>1. 字符串 —&gt; 时间日期  parse</p>\n<p>2. 时间日期 —&gt; 字符串  format</p>\n<p>如果是默认格式，不需要用到 <code>DateTimeFormatter</code>  直接 parse 即可，</p>\n<p>非默认格式，使用 <code>DateTimeFormatter</code>  解析字符串：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str1<span class=\"token operator\">=</span><span class=\"token string\">\"2022==04==18 01时06分09秒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">DateTimeFormatter</span> formatter1<span class=\"token operator\">=</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy==MM==dd HH时mm分ss秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> dateTime1 <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> formatter1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dateTime1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出  2022-04-18T01:06:09</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"2014$$$四月$$$13 20小时\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">DateTimeFormatter</span> fomatter2 <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyy$$$MMM$$$dd HH小时\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这里还不太明白</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> dt2 <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> fomatter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dt2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 2014-04-13T20:00</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 默认的格式解析不用 famtter，直接 parse 即可</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-26\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-26T12:12:22\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12:12:22\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "Java新特性"
            ]
        },
        {
            "id": "https://blog.dabing.cool/java/JVM-%E5%88%9D%E7%BA%A7/",
            "url": "https://blog.dabing.cool/java/JVM-%E5%88%9D%E7%BA%A7/",
            "title": "JVM-初级",
            "date_published": "2022-01-01T02:00:00.000Z",
            "content_html": "<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llcmVueXVhbl9wa3UvYXJ0aWNsZS9kZXRhaWxzLzEwMzMyMDc1Nw==\">https://blog.csdn.net/yerenyuan_pku/article/details/103320757</span></p>\n<blockquote>\n<p>一些常见面试题（全是理论）</p>\n</blockquote>\n<ul>\n<li><strong>谈谈你对 JVM 的理解？Java8 虚拟机和之前的变化</strong></li>\n</ul>\n<p>​</p>\n<ul>\n<li><strong>什么是 OOM，什么是栈溢出 StackOverflowError？怎么分析？</strong></li>\n</ul>\n<p>​\t\tOOM，全称是 Out Of Memory，内存用完了。（JVM 没有足够的内存来为对象分配空间并且垃圾\t\t回收器也没有空间可以回收了，就会抛出这个 error）</p>\n<p>​\t\t <code>原因</code> ：1）分配的少了（启动时 VM 参数可以指定虚拟机本身可使用的内存大小）</p>\n<p>​\t\t\t\t  2）应用用的太多了（会造成内存泄露和内存溢出）</p>\n<p>​\t\t最常见的 OOM <code>情况</code> ：</p>\n<p>​\t\t\t\t1）堆内存溢出</p>\n<p>​\t\t\t\t2）方法区溢出</p>\n<p>​\t\t\t\t3）StackOverflowError 栈溢出</p>\n<p>​\t\t <code>分析</code>  —heapdump</p>\n<p>​\t\t\t\tdump 堆的内存镜像，可以采用两种方式：</p>\n<p>​\t\t\t\t\t1. 设置 JVM 参数   HeapDumpOnOutOfMemoryError</p>\n<p>​\t\t\t\t\t2. 使用 JDK 自带的 jamp 命令   &quot;jmap -dump:format=b,file=heap.bin <pid>&quot;  其中 pid 可\t\t\t\t\t以通过 jps 获取。</p>\n<p>​\t\t\t   dump 堆的内存镜像，使用工具分析：mat、jhat</p>\n<p>​\t\t详细解释：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vVGhpbmtWZW51cy9wLzY4MDU0OTUuaHRtbA==\">https://www.cnblogs.com/ThinkVenus/p/6805495.html</span></p>\n<ul>\n<li><strong>JVM 的常用调优参数有哪些？</strong></li>\n<li><strong>内存快照如何抓取，怎么分析 Dump 文件？</strong></li>\n<li><strong>谈谈 JVM 中类加载器你的认识？</strong></li>\n</ul>\n<blockquote>\n<p>一些概念理解</p>\n</blockquote>\n<h2 id=\"1jvm的位置\"><a class=\"markdownIt-Anchor\" href=\"#1jvm的位置\">#</a> 1.JVM 的位置</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220412105259491.png\" alt=\"image-20220412105259491\"></p>\n<h2 id=\"2jvm的体系结构\"><a class=\"markdownIt-Anchor\" href=\"#2jvm的体系结构\">#</a> 2.JVM 的体系结构</h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191130085643146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<h2 id=\"3类加载器\"><a class=\"markdownIt-Anchor\" href=\"#3类加载器\">#</a> 3. 类加载器</h2>\n<p>作用：加载 class 文件，</p>\n<p>类是模板，对象是具体的</p>\n<p>具体对象放在堆里，对象引用放在栈里，存在的是对象的地址</p>\n<p>getClass()</p>\n<p>getClassLoader()</p>\n<p>1. 类加载器收到类加载器的请求</p>\n<p>2. 将这个请求向上委托给父类加载器去完成，一直向上委托，直到启动类加载器</p>\n<p>3. 启动加载器检查是否能够加载当前类，能加载就结束，使用当前的加载器，否则，抛出异常，通知子加载器加载</p>\n<p>4. 重复步骤 3</p>\n<p>Class Not Found~</p>\n<p>null:Java 调用不到，</p>\n<p>Java：c+±- 去掉的繁琐部分，如指针、内存管理</p>\n<p>类装载器（ClassLoader）负责加载 class 文件，class 文件在文件开头有特定的文件标示，ClassLoader 只负责 class 文件的加载，至于它是否可以运行，则由 Execution Engine 决定。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220412105420360.png\" alt=\"image-20220412105420360\"></p>\n<p>jvm 虚拟机自带的类加载器有四种：</p>\n<p>1. 启动类加载器（Bootstrap）：c++ 编写</p>\n<p>2. 扩展类加载器（Extension）：Java 编写</p>\n<p>3. 应用程序类加载器（AppClassLoader）：或者叫系统类加载器，用于加载当前应用 classpath 下的所有类</p>\n<p>4. 用户自定义加载类：Java.lang.ClassLoader 的子类，用户可以定制类的加载方式</p>\n<p>双亲委派，向上委托 4321</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191130095429988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<h2 id=\"4双亲委派机制\"><a class=\"markdownIt-Anchor\" href=\"#4双亲委派机制\">#</a> 4. 双亲委派机制</h2>\n<p>类加载的时候的一个安全机制，为了保证安全</p>\n<p>app（当前应用程序）-&gt;exc (扩展)-&gt;boot</p>\n<p>如上图所示，自顶向下加载，保证代码安全，防止恶意代码对源代码的修改。</p>\n<h2 id=\"5沙箱安全机制\"><a class=\"markdownIt-Anchor\" href=\"#5沙箱安全机制\">#</a> 5. 沙箱安全机制</h2>\n<p>详细说明参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTXlTdHJpbmdJc05vdE51bGwvcC84MjY4MzUxLmh0bWw=\">https://www.cnblogs.com/MyStringIsNotNull/p/8268351.html</span></p>\n<p>就是说你写了一个 Java 程序，默认情况你是可以任务访问这台机器的任何资源的。但是你把程序部署到正式的服务器上的时候，要保证你的程序不会对这个服务器有伤害，访问一些不该访问的资源。</p>\n<p>消除安全隐患，有两种办法：</p>\n<p>1. 让你的程序在一个限定权限的账号下运行</p>\n<p>2. 利用 Java 的 <code>沙箱机制</code> 来限定程序不为非作歹。</p>\n<p>沙箱（sandbox）是一个限制程序运行的环境。沙箱机制就是将 Java 代码限定在虚拟机特性的运行范围，并且严格限制代码对本地系统资源访问，通过这样的措施来保证对代码的有效隔离。</p>\n<p>组成沙箱的基本 <code>组件</code> ：字节码校验器、类装载器、存取控制器、安全管理器、安全软件包</p>\n<p>沙箱包含的 <code>要素</code> ：权限、代码源、保护域、策略文件、密钥库</p>\n<h2 id=\"6native\"><a class=\"markdownIt-Anchor\" href=\"#6native\">#</a> 6.Native</h2>\n<p>加个 native 关键字，说明 Java 的作用范围达不到了，会去调用底层 C 语言的库</p>\n<p>会进入本地方法栈，调用本地方法接口，即 JNI</p>\n<p>JNI 的作用：扩展 Java 的使用，融合不同的编程语言为 Java 使用！最初：C、C++</p>\n<p>Java 诞生的时候：C、C<ins> 横行，想要立足，必须要调用 C、c</ins></p>\n<p>在 Execution 执行的时候，加载本地方法库</p>\n<p>它再内存区域中专门开辟了一块标记区域，Native Method Stack <code>本地方法栈</code> ，限定只标记了 <code>native</code>  的方法才能塞进去。塞进去的方法但凡想要被执行，只能求助于操作系统，然后调用 <code>本地方法接口</code> （操作系统的），调用本地方法接口时还需要 <code>本地方法库</code> （类似于 jar 包，即 dll 动态连接库）的支持，最后，本地方法想要运行，还得把这个方法先做一个 <code>入栈</code> 的操作。</p>\n<p>目前这个方法使用的越来越少了，除非是跟硬件相关的应用，比如通过 Java 程序驱动打印机或者 Java 系统管理生产设备，在企业级应用中少见。因为现在的异构领域间的通信很发达，比如可以 Socket 通信，也可以使用 WebService 等。</p>\n<h2 id=\"7pc寄存器\"><a class=\"markdownIt-Anchor\" href=\"#7pc寄存器\">#</a> 7.PC 寄存器</h2>\n<p>每个线程都有一个程序计数器，线程私有，它是一个指针，指向方法区中的方法字节码（用来存储指向下一条指令的地址，即即将要执行的指令）由执行引擎读取下一条指令。</p>\n<p>pc 寄存器（程序计数器）不是用来做存储的，是用来做计算的。</p>\n<h2 id=\"8方法区\"><a class=\"markdownIt-Anchor\" href=\"#8方法区\">#</a> 8. 方法区</h2>\n<p>方法区是被所有线程 <code>共享</code> 的，所有字段和方法字节码，以及一些特殊方法如构造函数、接口代码等也在此定义。简单说，所有<strong>定义的方法</strong>的信息都保存在该区域，此区属于共享区间。<br>\n类加载器把.class 文件读到内存里面变成 Class（元数据模板）之后，变成的 Class（元数据模板）就存放在方法区里面，相应地，所有的 Class（元数据模板）包含的信息都会放进去，包含的信息如下图所示。</p>\n<p><strong>静态变量、常量、类信息（构造函数、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，与方法区无关。</strong></p>\n<p>static、final、Class 模板、常量池</p>\n<h2 id=\"9栈\"><a class=\"markdownIt-Anchor\" href=\"#9栈\">#</a> 9. 栈</h2>\n<p>一种数据结构，先进后出、后进先出</p>\n<p>程序 = 数据结构 + 算法：持续学习</p>\n<p><strong>码农 = 框架 + 业务逻辑</strong>：吃饭</p>\n<p>为什么 main 方法先执行，最后结束？</p>\n<p>就是使用了栈</p>\n<p>栈内存，<strong>主管程序的运行</strong>，生命周期和线程同步</p>\n<p>线程结束，栈内存也就释放了，对于栈来说，不存在垃圾回收问题</p>\n<p>一旦线程结束，栈就 over 了</p>\n<p>其中，8 种基本类型的变量 + 对象的引用变量 + 实例方法都是在函数的栈内存中分配的。</p>\n<p>栈运行原理：栈中的数据都是以栈帧（Stack Frame）的格式存在，栈帧是一个<strong>内存块</strong>，是一个<strong>数据集</strong>，也是一个有关方法和运行期的数据集。当一个方法被调用时会产生一个栈帧。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191130120854385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>更加详细的栈内的内存结构如下：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191130135946805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>反正就是说，每执行一个方法都会产生一个栈帧，保存到栈的顶部，顶部栈就是当前的方法，该方法执行完毕后会自动将此栈帧出栈，这个栈帧被弹出栈的时候就证明这个方法执行完毕了。</p>\n<p>栈满了：StackOverError</p>\n<h2 id=\"10三种jvm\"><a class=\"markdownIt-Anchor\" href=\"#10三种jvm\">#</a> 10. 三种 JVM</h2>\n<ul>\n<li>\n<p>Sun 公司 HotSpot   命令行可以查</p>\n<p>C:\\Users\\Lenovo&gt;<strong>java -version</strong><br>\njava version “1.8.0_202”<br>\nJava™ SE Runtime Environment (build 1.8.0_202-b08)<br>\nJava HotSpot™ 64-Bit Server VM (build 25.202-b08, mixed mode)</p>\n</li>\n<li>\n<p>BEA 公司 JRockit  最快，适合财务那些业务，很少用</p>\n</li>\n<li>\n<p>IBM 平台   j9 VM</p>\n</li>\n</ul>\n<h2 id=\"11堆\"><a class=\"markdownIt-Anchor\" href=\"#11堆\">#</a> 11. 堆</h2>\n<p>heap，一个 jvm 只有一个堆内存，堆内存的大小是可以调节的</p>\n<p>类加载器读取了类文件后，一般会把什么东西放在堆中？类，方法，常变量～，保存我们所有引用类型的真实对象</p>\n<p>堆内存还要细分为三个区：</p>\n<ul>\n<li>\n<p>新生区（伊甸园、幸存区（过度到养老区））</p>\n</li>\n<li>\n<p>养老区：一般不会被干掉</p>\n</li>\n<li>\n<p>永久区</p>\n<p>1.8 之后永久区用元空间代替了</p>\n</li>\n</ul>\n<p>GC 垃圾回收，主要是在伊甸园区和养老区</p>\n<p>假设内存满，OOM，堆内存不够  OutOfMemoryError</p>\n<h2 id=\"12新生区-老年区\"><a class=\"markdownIt-Anchor\" href=\"#12新生区-老年区\">#</a> 12. 新生区、老年区</h2>\n<ul>\n<li>\n<p>新生区：</p>\n<p>类诞生和成长，甚至死亡的地方</p>\n<p>伊甸园区：所有的对象都是在伊甸园区 new 出来</p>\n<p>幸存区（0、1）：</p>\n</li>\n</ul>\n<p>真相：经过研究，99% 的对象都是临时对象！</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191130155437604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>这个图一目了然</p>\n<h2 id=\"13永久区\"><a class=\"markdownIt-Anchor\" href=\"#13永久区\">#</a> 13. 永久区</h2>\n<p>这个区域常驻内存的，用来存放 JDK 自身携带的 class 对象。Interface 元数据，存储的是 Java 运行时的一些环境或类信息，这个区域不存在垃圾回收，关闭虚拟就会释放这个区域的内存</p>\n<p>jdk1.6 之前：永久代，常量池是在方法区</p>\n<p>jdk1.7：永久代，但是慢慢退化了，去永久化，常量池在堆中</p>\n<p>jdk1.8：无永久代，常量池在元空间</p>\n<p>方法区在元空间里，即堆里，也叫非堆（方法区相当于一个接口，而元空间时它的一个实现）</p>\n<p>方法区里有一个小空间是常量池</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220412105527906.png\" alt=\"image-20220412105527906\"></p>\n<p>方法区的实现：永久区、元空间</p>\n<p><img data-src=\"https://pic4.zhimg.com/v2-44c0f4dd02b0bbdd1b5524671e419e2f_r.jpg\" alt=\"preview\"></p>\n<h2 id=\"14堆内存调优\"><a class=\"markdownIt-Anchor\" href=\"#14堆内存调优\">#</a> 14 堆内存调优</h2>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llcmVueXVhbl9wa3UvYXJ0aWNsZS9kZXRhaWxzLzEwMzMyNzQ2Mz9zcG09MTAwMS4yMDE0LjMwMDEuNTUwMg==\">https://blog.csdn.net/yerenyuan_pku/article/details/103327463?spm=1001.2014.3001.5502</span></p>\n<p>Java8 堆内存的分布情况：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204102404945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>要多堆内存进行调优，必然要接触到以下三个参数：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204102413924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>使用：在调节 VM 参数的窗口设置：-Xms1024m -Xmx1024m -XX:+PrintGCDetails</p>\n<p>在控制台打印相关信息</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204102500573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204102507962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>​\t所以这里设置的内存大小只包括新生区和养老区的总和大小，即调整的是物理上的堆内存大小。</p>\n<blockquote>\n<p>当出现 OOM 内存不足的时候如果查看信息和分析信息呢？</p>\n</blockquote>\n<p>前面面试题第二题其实也说过了，下面放一些示例的图片：</p>\n<p>设置把堆内存镜像 dump 出：使用 JVM 参数</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204133820938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>使用 mat 工具分析 dump 文件：（是 eclipse 的工具，可以在上面安装即可）</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204133900746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>上面生成的 dump 文件是默认存储在工程的根目录下，用 - <code>XX:HeapDumpPath=目录</code> 这个参数可以修改 dump 文件的位置</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204135217905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>这样就可以在 D 盘看到这个 dump 文件了</p>\n<p>如果使用的不用 eclipse 工具，也可以使用 jdk 自带的 <code>jvisualvm.exe</code>  工具来解析 dump 文件，在安装路径的 bin 目录下，直接双击这个程序，打开对应的 dump 文件就可以了。</p>\n<h2 id=\"15gc-常用方法\"><a class=\"markdownIt-Anchor\" href=\"#15gc-常用方法\">#</a> 15.GC  常用方法</h2>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llcmVueXVhbl9wa3UvYXJ0aWNsZS9kZXRhaWxzLzEwMzM4NzMxMj9zcG09MTAwMS4yMDE0LjMwMDEuNTUwMg==\">https://blog.csdn.net/yerenyuan_pku/article/details/103387312?spm=1001.2014.3001.5502</span></p>\n<ul>\n<li>\n<p>什么是 GC？就是分代收集算法。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204151857145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n</li>\n<li>\n<p>GC 的作用域？</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204151912657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>GC 按照回收的区域分为普通 GC 也叫 <code>轻量级GC</code>  (Minor GC)，一种是全局 GC 也叫 <code>重量级GC</code> (Major GC or Full GC)</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204161125942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n</li>\n<li>\n<p>GC 的四大算法</p>\n<p><code>引用计数法：</code> 在程序 new 一个对象出来的时候，我们给他一个计数器，有人引用这个对象的时候，这个计数器就自增 1，引用取消的时候减 1，当计数器为 0 的时候就 JVM 就可以把他回收掉了。</p>\n<p>已经淘汰了！</p>\n</li>\n</ul>\n<p>​\t\t <code>复制算法</code> （Copying）: 更详细的讲解可以看链接啦。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204172041291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>​\t\t\t就是说 new 对象放在伊甸园区，</p>\n<p>​\t\t\t然后再第一次进行垃圾回收的时候勒，就将存活下来的对象 copy 到幸存 0 区，</p>\n<p>​\t\t\t然后第二次将存活的对象（包括伊甸园和幸存 0 区）copy 到幸存 1 区，清空幸存 0 区了；</p>\n<p>​\t\t\t然后继续第三次的时候将伊甸园和 1 区的对象 copy 到 0 区，这样反复。</p>\n<p>​\t\t\t到 15 次（默认，可以通过  <code>-XX:MaxTenuringThreshold</code>  设置）还活下来的话就复制到老年区</p>\n<p>​\t\t <code>标记清除算法</code> 在内存用满的时候，GC 线程触发把程序暂停，然后堆内存遍历两次，第一次<strong>标记</strong>\t\t被引用的对象，要存活下来，第二次<strong>清除</strong>没被标记的对象。</p>\n<p>​\t\t但是这时候内存的碎片的。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204185818964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>​\t\t <code>标记压缩算法</code> 老年代一般是由标记清除或者是标记清除与标记整理的混合实现。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204185833455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>​\t <code>\t标记清除压缩算法</code> 就是上面两种算法的结合，先用多次的标记清除，然后这时候内存空间已经千疮百孔了，到处都是内存碎片，然后这时候统一用一次标记压缩就好了。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204185839681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<ul>\n<li>三种算法总结：</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204200152400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204200203963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>基于上面的考虑，老年代一般是由标记清除或者是标记清除与标记压缩的混合实现。以 HotSpot 中的 CMS 回收器为例（只限于 Java8），CMS 是基于 Mark-Sweep 实现的，对于对象的回收效率很高，而对于碎片问题，CMS 采用基于 Mark-Compact 算法的 Serial Old 回收器做为补偿措施：当内存回收不佳（碎片导致的 Concurrent Mode Failure 时），将采用 Serial Old 执行 Full GC 以达到对老年代内存的整理。</p>\n<h2 id=\"16jmm\"><a class=\"markdownIt-Anchor\" href=\"#16jmm\">#</a> 16.JMM</h2>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNTgzOTMxMzk=\">https://zhuanlan.zhihu.com/p/258393139</span></p>\n<p>温馨提醒一下，这里有些人会把 Java 内存模型误解为 Java 内存结构，然后答到堆，栈，GC 垃圾回收，最后和面试官想问的问题相差甚远。<strong>实际上一般问到 Java 内存模型都是想问多线程，Java 并发相关的问题</strong>。</p>\n<p>如果面试的话，重点是 Java 内存模型 (JMM) 的 <code>工作方式</code> ， <code>三大特征</code> ，还有 <code>volatile</code>  关键字。为什么喜欢问 volatile 关键字呢，因为 volatile 关键字可以扯出很多东西，比如可见性，有序性，还有内存屏障等等。</p>\n<p>全称 Java Memory Model，JMM，Java 内存模型，它不仅仅是 JVM 内存分区。</p>\n<p>那这个 JMM 到底是什么东东啊？</p>\n<p>用来干嘛的？</p>\n<p>因为硬件生产商和操作系统的不同，内存的访问就有一定的差异，为了避免相同的代码在不同的系统下运行出现各种问题，Java 内存模型（JMM）就屏蔽掉各种硬件和操作系统的内存访问差异，实现让 Java 在不同的平台下都有相同的并发效果。</p>\n<p><code>工作方式</code> ：</p>\n<p>Java 内存模型规定<strong>所有的变量都存储在主内存</strong>中，包括实例变量，静态变量，但是不包括局部变量和方法参数。每个线程都有自己的工作内存，<strong>线程的工作内存保存了该线程用到的变量和主内存的副本拷贝，线程对变量的操作都在工作内存中进行</strong>。<strong>线程不能直接读写主内存中的变量</strong>。</p>\n<p>不同的线程之间也无法访问对方工作内存中的变量。线程之间变量值的传递均需要通过主内存来完成。</p>\n<p>每个线程的工作内存都是独立的，线程操作数据只能在工作内存中进行，然后刷回到主存。这是 Java 内存模型定义的线程基本工作方式。</p>\n<p><img data-src=\"https://pic3.zhimg.com/v2-f36f366c07a6188ea3fdefc794ba021a_r.jpg\" alt=\"preview\"></p>\n<p><code>三个特征</code> ：原子性、可见性、有序性</p>\n<p>​\t原子性（synchronized）</p>\n<p>​\t可见性（volatile、synchronized、final）</p>\n<p>​\t有序性（volatile、synchronized）</p>\n<p><code>八大内存交互操作</code> ：</p>\n<p><img data-src=\"https://pic4.zhimg.com/v2-42d8f894f17ccf13252d8d8d6285f86b_r.jpg\" alt=\"preview\"></p>\n<p><code>volatile</code> :</p>\n<p>​\t1. 保证线程间变量的可见性</p>\n<p>​\t2. 禁止 CPU 进行指令重排序</p>\n<h2 id=\"17总结\"><a class=\"markdownIt-Anchor\" href=\"#17总结\">#</a> 17 总结</h2>\n<p>1. 百度</p>\n<p>2. 思维导图</p>\n<p>单点登录 | SSO</p>\n",
            "tags": [
                "JVM"
            ]
        }
    ]
}