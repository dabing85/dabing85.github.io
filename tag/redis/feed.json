{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"redis\" tag",
    "description": "欢迎来到大冰的笔记空间~这里主要会记录编程学习笔记🌸",
    "home_page_url": "https://blog.dabing.cool",
    "items": [
        {
            "id": "https://blog.dabing.cool/javamore/cache/redis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81%E6%A0%A1%E9%AA%8C/",
            "url": "https://blog.dabing.cool/javamore/cache/redis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81%E6%A0%A1%E9%AA%8C/",
            "title": "Redis实现手机验证码校验",
            "date_published": "2022-08-20T02:10:10.000Z",
            "content_html": "<h2 id=\"目标-完成一个手机验证码功能\"><a class=\"markdownIt-Anchor\" href=\"#目标-完成一个手机验证码功能\">#</a> 目标 - 完成一个手机验证码功能</h2>\n<p><strong>要求：</strong><br>\n1、输入手机号，点击发送后随机生成 6 位数字码，2 分钟有效<br>\n 2、输入验证码，点击验证，返回成功或失败<br>\n 3、每个手机号每天只能输入 3 次</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731164343801.png\" alt=\"image-20220731164343801\"></p>\n<p><strong>实现：</strong></p>\n<h3 id=\"前端代码\"><a class=\"markdownIt-Anchor\" href=\"#前端代码\">#</a> 前端代码：</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page language<span class=\"token operator\">=</span><span class=\"token string\">\"java\"</span> contentType<span class=\"token operator\">=</span><span class=\"token string\">\"text/html; charset=UTF-8\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    pageEncoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">%</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Insert title here<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span>script  src<span class=\"token operator\">=</span><span class=\"token string\">\"static/jquery/jquery-3.1.0.js\"</span> <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span>link href<span class=\"token operator\">=</span><span class=\"token string\">\"static/bs/css/bootstrap.min.css\"</span> rel<span class=\"token operator\">=</span><span class=\"token string\">\"stylesheet\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span>script  src<span class=\"token operator\">=</span><span class=\"token string\">\"static/bs/js/bootstrap.min.js\"</span>   <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"row\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"alertdiv\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"col-md-12\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t          <span class=\"token operator\">&lt;</span>form <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"navbar-form navbar-left\"</span> role<span class=\"token operator\">=</span><span class=\"token string\">\"search\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"codeform\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"form-group\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"form-control\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"填写手机号\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"phone_no\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"btn btn-default\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"sendCode\"</span><span class=\"token operator\">></span>发送验证码<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span>font id<span class=\"token operator\">=</span><span class=\"token string\">\"countdown\"</span> color<span class=\"token operator\">=</span><span class=\"token string\">\"red\"</span> <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>font<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"form-control\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"填写验证码\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"verify_code\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"btn btn-default\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"verifyCode\"</span><span class=\"token operator\">></span>确定<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span>font id<span class=\"token operator\">=</span><span class=\"token string\">\"result\"</span> color<span class=\"token operator\">=</span><span class=\"token string\">\"green\"</span> <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>font<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>font id<span class=\"token operator\">=</span><span class=\"token string\">\"error\"</span> color<span class=\"token operator\">=</span><span class=\"token string\">\"red\"</span> <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>font<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">var</span> t<span class=\"token operator\">=</span><span class=\"token number\">120</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设定倒计时的时间 </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">var</span> interval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">refer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#countdown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请于\"</span><span class=\"token operator\">+</span>t<span class=\"token operator\">+</span><span class=\"token string\">\"秒内填写验证码 \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显示倒计时 </span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    t<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计数器递减 </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    \t<span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    \t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#countdown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证码已失效，请重新发送！ \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#sendCode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t       </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t   $<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SendCodeServlet\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#codeform\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t    \t <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">==</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t    \t\t t<span class=\"token operator\">=</span><span class=\"token number\">120</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t    \t\t <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t    \t\t interval<span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"refer()\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 启动 1 秒定时  </span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t   \t\t <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">==</span><span class=\"token string\">\"limit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t   \t\t\t<span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t   \t\t\t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#countdown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单日发送超过次数！ \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t   \t\t <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#verifyCode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t    </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t   $<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CheckCodeServlet\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#codeform\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t    \t <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">==</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t    \t\t <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"green\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t    \t\t <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t    \t\t <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t    \t\t <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#countdown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t   \t\t <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t    \t\t <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t    \t\t <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t   \t\t <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"后端代码\"><a class=\"markdownIt-Anchor\" href=\"#后端代码\">#</a> 后端代码：</h3>\n<ol>\n<li>点击发送验证码时：</li>\n</ol>\n<p>将数据存入 redis 中</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>dabing<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>servlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Jedis</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Duration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocalTime</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 处理发送验证码的 Servlet</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/SendCodeServlet\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SendCodeServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">String</span> phoneNo <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phone_no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>phoneNo<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>phoneNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx.xxx.xx.xx\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">String</span> countKey<span class=\"token operator\">=</span>phoneNo<span class=\"token operator\">+</span><span class=\"token string\">\":count\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 生成验证码的次数 key</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> codeKey<span class=\"token operator\">=</span>phoneNo<span class=\"token operator\">+</span><span class=\"token string\">\":code\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 手机验证码 key</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">String</span> count <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>countKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">String</span> code<span class=\"token operator\">=</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code=\"</span><span class=\"token operator\">+</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 证明没有发送过验证码</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 保存验证码到 redis，过期时间 120 秒</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">setex</span><span class=\"token punctuation\">(</span>codeKey<span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 设置过期时间为今天的剩余时间</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">setex</span><span class=\"token punctuation\">(</span>countKey<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">getTheLeftSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 证明已经发送过 3 次了</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"limit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回不让发了</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 证明已经发过，但是次数没达到 3 次</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">setex</span><span class=\"token punctuation\">(</span>codeKey<span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">incr</span><span class=\"token punctuation\">(</span>countKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 次数加 1</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 随机生成验证码的方法</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">String</span> code <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            code <span class=\"token operator\">+=</span> rand<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">return</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 获取当天剩余秒数的方法</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getTheLeftSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 获取现在的时间</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">LocalTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// 获取当日 23 点 59 分 59 秒的时间</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">LocalTime</span> end <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">// 获取 end 与 now 相差的秒数</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">long</span> millis <span class=\"token operator\">=</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">return</span> millis<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>输入验证码校验时</li>\n</ol>\n<p>从 redis 中取出对比</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>dabing<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>servlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Jedis</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 处理验证验证码请求的 Servlet</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/CheckCodeServlet\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CheckCodeServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> code<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"verify_code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span> phoneNo<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phone_no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>code<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token operator\">||</span>phoneNo<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token operator\">||</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>phoneNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx.xx.xxx.xx\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> codeKey<span class=\"token operator\">=</span>phoneNo <span class=\"token operator\">+</span> <span class=\"token string\">\":code\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">String</span> codeRedis <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>codeKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>codeRedis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span>codeKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://blog.dabing.cool/javamore/cache/%E4%BD%BF%E7%94%A8Jedis%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8Redis/",
            "url": "https://blog.dabing.cool/javamore/cache/%E4%BD%BF%E7%94%A8Jedis%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8Redis/",
            "title": "用Jedis连接Redis",
            "date_published": "2022-08-20T02:10:10.000Z",
            "content_html": "<p>🚨🚨先说明，做下面操作，如果是服务器的话，修改端口 6379 为公开、不设置 redis 密码这些操作都是很危险的！！！一定要设置密码，可以改端口号，只要不是 6379 都行，然后也不要公开，就设置自己本机的 ip 即可，我下面没有做更改。</p>\n<p>血的教训，我就被攻击了，可参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NpbmRlcmVsbGFfX18vYXJ0aWNsZS9kZXRhaWxzLzgwMzkxNTYz\"> 挖矿？入侵？木马？都是 redis 没设密码搞的鬼</span></p>\n<h2 id=\"1-jedis所需要的jar包\"><a class=\"markdownIt-Anchor\" href=\"#1-jedis所需要的jar包\">#</a> 1 - Jedis 所需要的 jar 包</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>redis.clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jedis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"2-连接redis注意事项\"><a class=\"markdownIt-Anchor\" href=\"#2-连接redis注意事项\">#</a> 2 - 连接 Redis 注意事项</h2>\n<p>禁用 Linux 的防火墙：Linux (CentOS7) 里执行命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>查看状态： systemctl status firewalld</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>关闭： systemctl stop firewalld</pre></td></tr></table></figure><p>redis.conf 中注释掉 bind 127.0.0.1 , 然后 protected-mode no</p>\n<h2 id=\"3-jedis连接测试\"><a class=\"markdownIt-Anchor\" href=\"#3-jedis连接测试\">#</a> 3 - Jedis 连接测试</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>dabing<span class=\"token punctuation\">.</span>jedis</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Jedis</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 测试连接 Redis 服务</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 能连接上的前提：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 1. 关闭 linux 的防火墙</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 2. 修改 Redis 的配置文件</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     *      2.1 将 bind 127.0.0.1 注释掉</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     *      2.2 将保护模式关闭，即 protected-mode 的值设置为 no</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connectionTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.22.3\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这个主机我瞎写的，写自己的</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">String</span> pong <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功：\"</span><span class=\"token operator\">+</span>pong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"4-测试相关数据类型\"><a class=\"markdownIt-Anchor\" href=\"#4-测试相关数据类型\">#</a> 4 - 测试相关数据类型</h2>\n<h3 id=\"741jedis-api-key\"><a class=\"markdownIt-Anchor\" href=\"#741jedis-api-key\">#</a> 7.4.1.\tJedis-API:    Key</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">ttl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"742jedis-api-string\"><a class=\"markdownIt-Anchor\" href=\"#742jedis-api-string\">#</a> 7.4.2.\tJedis-API:    String</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">mset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"v2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"v3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">mget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"743jedis-api-list\"><a class=\"markdownIt-Anchor\" href=\"#743jedis-api-list\">#</a> 7.4.3.\tJedis-API:    List</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">lrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> element <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"744jedis-api-set\"><a class=\"markdownIt-Anchor\" href=\"#744jedis-api-set\">#</a> 7.4.4.\tJedis-API:    set</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order02\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order03\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order04\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> smembers <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">smembers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> order <span class=\"token operator\">:</span> smembers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">srem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order02\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"745jedis-api-hash\"><a class=\"markdownIt-Anchor\" href=\"#745jedis-api-hash\">#</a> 7.4.5.\tJedis-API:    hash</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"userName\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"userName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"telphone\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"13810169999\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc@163.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hmset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash2\"</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hmget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"telphone\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> element <span class=\"token operator\">:</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>7.4.6.\tJedis-API:    zset</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"l4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> zrange <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> e <span class=\"token operator\">:</span> zrange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"5-我滴实操\"><a class=\"markdownIt-Anchor\" href=\"#5-我滴实操\">#</a> 5- 我滴实操</h2>\n<ol>\n<li>写 test 跟上边的一样，呐，连接超时</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220821201445710.png\" alt=\"image-20220821201445710\"></p>\n<ol start=\"2\">\n<li>关防火墙、改保护模式为 no、注释掉 bind 127.0.0.1</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>、firewalld的基本使用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>启动： systemctl start firewalld</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>关闭： systemctl stop firewalld</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>查看状态： systemctl status firewalld</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>开机禁用 ： systemctl disable firewalld</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>开机启用 ： systemctl <span class=\"token builtin class-name\">enable</span> firewalld</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2</span>. <span class=\"token function\">vi</span> redis.conf </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">3</span>. 启动redis-server</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220821191948636.png\" alt=\"image-20220821191948636\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220821192558716.png\" alt=\"image-20220821192558716\"></p>\n<p>注：我这里完成了以上两步之后，还是没有连接成功，百度之后发现原来是由于我连接的是服务器，没有添加 6379 端口的安全组。</p>\n<p>可参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3ODMzMi9hcnRpY2xlL2RldGFpbHMvMTA4NzQxMzY3\">Java 使用 Jedis 在本地远程连接腾讯云服务器（CentOS 7）</span></p>\n<p>但是我的是轻量级服务器，看意思就是防火墙设置了：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220821195819961.png\" alt=\"image-20220821195819961\"></p>\n<p>再来测试一次：成功！</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220821202013924.png\" alt=\"image-20220821202013924\"></p>\n<p>接下来就是测试那些数据了。跟上边的来就行。</p>\n",
            "tags": [
                "Redis",
                "Jedis"
            ]
        },
        {
            "id": "https://blog.dabing.cool/javamore/cache/Redis/",
            "url": "https://blog.dabing.cool/javamore/cache/Redis/",
            "title": "Redis",
            "date_published": "2022-07-01T02:00:00.000Z",
            "content_html": "<p>官网链接：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5yZWRpcy5pbw==\">http://www.redis.io</span></p>\n<p>视频：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVJ2NDExNzdBZj9zcG1faWRfZnJvbT0zMzMuOTk5LjAuMCZhbXA7dmRfc291cmNlPTEzOWU4MTY4ZDFhZWJiYTg3NGI4MDQ4OTEwMDY2ZDMx\">Redis 6 尚硅谷</span></p>\n<h1 id=\"一-nosql数据库简介\"><a class=\"markdownIt-Anchor\" href=\"#一-nosql数据库简介\">#</a> 一、NoSQL 数据库简介</h1>\n<h2 id=\"1-技术发展\"><a class=\"markdownIt-Anchor\" href=\"#1-技术发展\">#</a> 1- 技术发展</h2>\n<p>技术的分类</p>\n<blockquote>\n<p>1、解决功能性的问题：Java、Jsp、RDBMS、Tomcat、HTML、Linux、JDBC、SVN<br>\n2、解决扩展性的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis<br>\n3、解决性能的问题：NoSQL、Java 线程、Hadoop、Nginx、MQ、ElasticSearch</p>\n</blockquote>\n<h3 id=\"111web10时代\"><a class=\"markdownIt-Anchor\" href=\"#111web10时代\">#</a> 1.1.1.\tWeb1.0 时代</h3>\n<p>Web1.0 的时代，数据访问量很有限，用一夫当关的高性能的单点服务器可以解决大部分问题。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726231113112.png\" alt=\"image-20220726231113112\"></p>\n<h3 id=\"112web20时代\"><a class=\"markdownIt-Anchor\" href=\"#112web20时代\">#</a> 1.1.2.\tWeb2.0 时代</h3>\n<p>随着 Web2.0 的时代的到来，用户访问量大幅度提升，同时产生了大量的用户数据。加上后来的智能移动设备的普及，所有的互联网平台都面临了巨大的性能挑战。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726231129462.png\" alt=\"image-20220726231129462\"></p>\n<h3 id=\"113解决cpu及内存压力\"><a class=\"markdownIt-Anchor\" href=\"#113解决cpu及内存压力\">#</a> 1.1.3.\t解决 CPU 及内存压力</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726231204844.png\" alt=\"image-20220726231204844\"></p>\n<h3 id=\"114解决io压力\"><a class=\"markdownIt-Anchor\" href=\"#114解决io压力\">#</a> 1.1.4.\t解决 IO 压力</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726231220567.png\" alt=\"image-20220726231220567\"></p>\n<h2 id=\"2-nosql数据库\"><a class=\"markdownIt-Anchor\" href=\"#2-nosql数据库\">#</a> 2 - NoSQL 数据库</h2>\n<h3 id=\"121nosql数据库概述\"><a class=\"markdownIt-Anchor\" href=\"#121nosql数据库概述\">#</a> 1.2.1.\tNoSQL 数据库概述</h3>\n<p><strong>NoSQL(NoSQL = Not Only SQL )</strong>，意即 “不仅仅是 SQL”，泛指 <code>非关系型</code> 的数据库。<br>\nNoSQL 不依赖业务逻辑方式存储，而以简单的 <code>key-value</code>  模式存储。因此大大的增加了数据库的扩展能力。</p>\n<ul>\n<li>不遵循 SQL 标准。</li>\n<li>不支持 ACID。</li>\n<li>远超于 SQL 的性能。</li>\n</ul>\n<h3 id=\"122nosql适用场景\"><a class=\"markdownIt-Anchor\" href=\"#122nosql适用场景\">#</a> 1.2.2.\tNoSQL 适用场景</h3>\n<ul>\n<li>对数据高并发的读写</li>\n<li>海量数据的读写</li>\n<li>对数据高可扩展性的</li>\n</ul>\n<h3 id=\"123nosql不适用场景\"><a class=\"markdownIt-Anchor\" href=\"#123nosql不适用场景\">#</a> 1.2.3.\tNoSQL 不适用场景</h3>\n<ul>\n<li>\n<p>需要事务支持</p>\n</li>\n<li>\n<p>基于 sql 的结构化查询存储，处理复杂的关系，需要 <code>即席</code>  查询。</p>\n</li>\n<li>\n<p><strong>（用不着 sql 的和用了 sql 也不行的情况，请考虑用 NoSql）</strong></p>\n</li>\n</ul>\n<h3 id=\"124memcache\"><a class=\"markdownIt-Anchor\" href=\"#124memcache\">#</a> 1.2.4.\tMemcache</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726231803375.png\" alt=\"image-20220726231803375\"></p>\n<h3 id=\"125redis\"><a class=\"markdownIt-Anchor\" href=\"#125redis\">#</a> 1.2.5.\tRedis</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726231821129.png\" alt=\"image-20220726231821129\"></p>\n<h3 id=\"126mongodb\"><a class=\"markdownIt-Anchor\" href=\"#126mongodb\">#</a> 1.2.6.\tMongoDB</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726231850038.png\" alt=\"image-20220726231850038\"></p>\n<h2 id=\"3-行式存储数据库大数据时代\"><a class=\"markdownIt-Anchor\" href=\"#3-行式存储数据库大数据时代\">#</a> 3 - 行式存储数据库（大数据时代）</h2>\n<h3 id=\"131行式数据库\"><a class=\"markdownIt-Anchor\" href=\"#131行式数据库\">#</a> 1.3.1.\t行式数据库</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726232027994.png\" alt=\"image-20220726232027994\"></p>\n<h3 id=\"132列式数据库\"><a class=\"markdownIt-Anchor\" href=\"#132列式数据库\">#</a> 1.3.2.\t列式数据库</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726232035860.png\" alt=\"image-20220726232035860\"></p>\n<p><strong>1.3.2.1.\tHbase</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726232045024.png\" alt=\"image-20220726232045024\"></p>\n<p>HBase 是<strong> Hadoop</strong> 项目中的数据库。它用于需要对大量的数据进行随机、实时的读写操作的场景中。<br>\nHBase 的目标就是处理数据量<strong>非常庞大</strong>的表，可以用<strong>普通的计算机</strong>处理超过<strong> 10 亿行数据</strong>，还可处理有数百万<strong>列</strong>元素的数据表。</p>\n<p><strong>1.3.2.2.\tCassandra[kəˈsændrə]</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727003413693.png\" alt=\"image-20220727003413693\"></p>\n<p>Apache Cassandra 是一款免费的开源 NoSQL 数据库，其设计目的在于管理由大量商用服务器构建起来的庞大集群上的<strong>海量数据集 (数据量通常达到 PB 级别)</strong>。在众多显著特性当中，Cassandra 最为卓越的长处是对写入及读取操作进行规模调整，而且其不强调主集群的设计思路能够以相对直观的方式简化各集群的创建与扩展流程。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>计算机存储单位 计算机存储单位一般用<span class=\"token class-name\">B</span>，<span class=\"token constant\">KB</span>，<span class=\"token constant\">MB</span>，<span class=\"token constant\">GB</span>，<span class=\"token constant\">TB</span>，<span class=\"token constant\">EB</span>，<span class=\"token constant\">ZB</span>，<span class=\"token constant\">YB</span>，<span class=\"token constant\">BB</span>来表示，它们之间的关系是：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>位 bit <span class=\"token punctuation\">(</span>比特<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Binary</span> <span class=\"token class-name\">Digits</span><span class=\"token punctuation\">)</span>：存放一位二进制数，即 <span class=\"token number\">0</span> 或 <span class=\"token number\">1</span>，最小的存储单位。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>字节 <span class=\"token keyword\">byte</span>：<span class=\"token number\">8</span>个二进制位为一个字节<span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span>，最常用的单位。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">KB</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Kilobyte</span> 千字节<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">1024</span>B，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">MB</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Megabyte</span> 兆字节 简称“兆”<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token constant\">KB</span>，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">GB</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Gigabyte</span> 吉字节 又称“千兆”<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token constant\">MB</span>，</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">TB</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Trillionbyte</span> 万亿字节 太字节<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token constant\">GB</span>，其中<span class=\"token number\">1024</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">^</span><span class=\"token number\">10</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> 的<span class=\"token number\">10</span>次方<span class=\"token punctuation\">)</span>，</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">PB</span>（<span class=\"token class-name\">Petabyte</span> 千万亿字节 拍字节）<span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token constant\">TB</span>，</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">EB</span>（<span class=\"token class-name\">Exabyte</span> 百亿亿字节 艾字节）<span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token constant\">PB</span>，</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">ZB</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Zettabyte</span> 十万亿亿字节 泽字节<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token number\">1024</span> <span class=\"token constant\">EB</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">YB</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Jottabyte</span> 一亿亿亿字节 尧字节<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token number\">1024</span> <span class=\"token constant\">ZB</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">BB</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Brontobyte</span> 一千亿亿亿字节<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token number\">1024</span> <span class=\"token constant\">YB</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>注：“兆”为百万级数量单位。</pre></td></tr></table></figure><h2 id=\"4-图关系型数据库\"><a class=\"markdownIt-Anchor\" href=\"#4-图关系型数据库\">#</a> 4- 图关系型数据库</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727003806092.png\" alt=\"image-20220727003806092\"></p>\n<p>主要应用：社会关系，公共交通网络，地图及网络拓谱 (n*(n-1)/2)</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727003831658.png\" alt=\"image-20220727003831658\"></p>\n<h2 id=\"5-db-engines-数据库排名\"><a class=\"markdownIt-Anchor\" href=\"#5-db-engines-数据库排名\">#</a> 5 - DB-Engines 数据库排名</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2RiLWVuZ2luZXMuY29tL2VuL3Jhbmtpbmc=\">http://db-engines.com/en/ranking</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727003904477.png\" alt=\"image-20220727003904477\"></p>\n<h1 id=\"二-redis概述安装\"><a class=\"markdownIt-Anchor\" href=\"#二-redis概述安装\">#</a> 二、Redis 概述安装</h1>\n<ul>\n<li>Redis 是一个 <code>开源</code> 的 <code>key-value</code>  存储系统。</li>\n<li>和 Memcached 类似，它支持存储的 value 类型相对更多，包括 <code>string</code>  (字符串)、 <code>list</code>  (链表)、 <code>set</code>  (集合)、 <code>zset</code>  (sorted set -- 有序集合) 和 <code>hash</code> （哈希类型）</li>\n<li>这些数据类型都支持 push/pop、add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是 <code>原子性</code> 的</li>\n<li>在此基础上，Redis 支持各种不同方式的 <code>排序</code> 。</li>\n<li>与 memcached 一样，为了保证效率，数据都是 <code>缓存在内存</code> 中。</li>\n<li>区别的是 Redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件。</li>\n<li>并且在此基础上实现了 <code>master-slave(主从)</code>  同步。</li>\n</ul>\n<h2 id=\"1-应用场景\"><a class=\"markdownIt-Anchor\" href=\"#1-应用场景\">#</a> 1 - 应用场景</h2>\n<h3 id=\"211配合关系型数据库做高速缓存\"><a class=\"markdownIt-Anchor\" href=\"#211配合关系型数据库做高速缓存\">#</a> 2.1.1.\t配合关系型数据库做高速缓存</h3>\n<ul>\n<li>高频次，热门访问的数据，降低数据库 IO</li>\n<li>分布式架构，做 session 共享</li>\n<li><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727004314790.png\" alt=\"image-20220727004314790\"></li>\n</ul>\n<h3 id=\"212多样的数据结构存储持久化数据\"><a class=\"markdownIt-Anchor\" href=\"#212多样的数据结构存储持久化数据\">#</a> 2.1.2.\t多样的数据结构存储持久化数据</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727004344728.png\" alt=\"image-20220727004344728\"></p>\n<h2 id=\"2-redis安装\"><a class=\"markdownIt-Anchor\" href=\"#2-redis安装\">#</a> 2 - Redis 安装</h2>\n<p>Redis 官方网站:  <span class=\"exturl\" data-url=\"aHR0cDovL3JlZGlzLmlv\">http://redis.io</span></p>\n<p>Redis 中文官方网站:  <span class=\"exturl\" data-url=\"aHR0cDovL3JlZGlzLmNuLw==\">http://redis.cn/</span></p>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81Mjc4Mjg2Mjc=\">linux 系统安装和使用 Redis - 知乎 (zhihu.com)</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727004514512.png\" alt=\"image-20220727004514512\"></p>\n<h3 id=\"221安装版本\"><a class=\"markdownIt-Anchor\" href=\"#221安装版本\">#</a> 2.2.1.\t安装版本</h3>\n<ul>\n<li>6.2.1 for Linux（redis-6.2.1.tar.gz）</li>\n<li>不用考虑在 windows 环境下对 Redis 的支持 (如果真的需要可以去 github 上找找)</li>\n</ul>\n<h3 id=\"222安装步骤\"><a class=\"markdownIt-Anchor\" href=\"#222安装步骤\">#</a> 2.2.2.\t安装步骤</h3>\n<p><strong>2.2.2.1.\t准备工作：下载安装最新版的 gcc 编译器</strong><br>\n安装 C 语言的编译环境</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> centos-release-scl scl-utils-build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> devtoolset-8-toolchain</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>scl <span class=\"token builtin class-name\">enable</span> devtoolset-8 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 测试 gcc 版本 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>gcc <span class=\"token parameter variable\">--version</span></pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727104704322.png\" alt=\"image-20220727104704322\"></p>\n<p><strong>2.2.2.2.\t下载 redis-6.2.1.tar.gz 放 /opt 目录</strong></p>\n<p><strong>2.2.2.3.\t解压命令：tar -zxvf redis-6.2.1.tar.gz</strong></p>\n<p><strong>2.2.2.4.\t解压完成后进入目录：cd redis-6.2.1</strong></p>\n<p><strong>2.2.2.5.\t在 redis-6.2.1 目录下再次执行 make 命令（只是编译好）</strong></p>\n<p><strong>2.2.2.6.\t如果没有准备好 C 语言编译环境，make 会报错 —Jemalloc/jemalloc.h：没有那个文件</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727104834499.png\" alt=\"image-20220727104834499\"></p>\n<p><strong>2.2.2.7.\t解决方案：运行 make distclean</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727104852287.png\" alt=\"image-20220727104852287\"></p>\n<p><strong>2.2.2.8.\t在 redis-6.2.1 目录下再次执行 make 命令（只是编译好）</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727104906795.png\" alt=\"image-20220727104906795\"></p>\n<p><strong>2.2.2.9.\t跳过 make test 继续执行: make install</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727104934592.png\" alt=\"image-20220727104934592\"></p>\n<h3 id=\"实操\"><a class=\"markdownIt-Anchor\" href=\"#实操\">#</a> 实操</h3>\n<ol>\n<li>安装依赖，因为 Redis 是基于 C 语言编写的，因此首先需要安装 Redis 所需要的 gcc 依赖</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> gcc tcl</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727155634575.png\" alt=\"image-20220727155634575\"></p>\n<ol start=\"2\">\n<li>\n<p>上传文件：我上传到了 /opt 目录下</p>\n</li>\n<li>\n<p>解压： <code>tar -zxvf redis-6.2.7.tar.gz</code></p>\n</li>\n<li>\n<p>cd 到该目录：cd  redis-6.2.7</p>\n</li>\n<li>\n<p>make: 编译   <code>make</code>  这个完成之后 <code>make install</code></p>\n</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727161333762.png\" alt=\"image-20220727161333762\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727161816964.png\" alt=\"image-20220727161816964\"></p>\n<p>默认安装路径：usr/local/bin/</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727161855947.png\" alt=\"image-20220727161855947\"></p>\n<p>使用推荐的后台启动方式，需要对 redis.conf 备份一份</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> redis.conf redis.conf.copy</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727162452302.png\" alt=\"image-20220727162452302\"></p>\n<h3 id=\"223安装目录usrlocalbin\"><a class=\"markdownIt-Anchor\" href=\"#223安装目录usrlocalbin\">#</a> 2.2.3.\t安装目录：/usr/local/bin</h3>\n<p><strong>查看默认安装目录：</strong><br>\nredis-benchmark :   性能测试工具，可以在自己本子运行，看看自己本子性能如何<br>\n redis-check-aof： 修复有问题的 AOF 文件，rdb 和 aof 后面讲<br>\n redis-check-dump：修复有问题的 dump.rdb 文件<br>\n redis-sentinel：Redis 集群使用<br>\n <code>redis-server</code> ：Redis 服务器启动命令<br>\n <code>redis-cli</code> ：客户端，操作入口</p>\n<h3 id=\"224前台启动不推荐\"><a class=\"markdownIt-Anchor\" href=\"#224前台启动不推荐\">#</a> 2.2.4.\t前台启动（不推荐）</h3>\n<p>前台启动，命令行窗口不能关闭，否则服务器停止</p>\n<p>redis-server</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105158482.png\" alt=\"image-20220727105158482\"></p>\n<h3 id=\"225后台启动推荐\"><a class=\"markdownIt-Anchor\" href=\"#225后台启动推荐\">#</a> 2.2.5.\t后台启动（推荐）</h3>\n<p><strong>2.2.5.1.\t备份 redis.conf</strong></p>\n<p>拷贝一份 <code>redis.conf</code>  到其他目录<br>\n <code>cp  /opt/redis-3.2.5/redis.conf  /myredis</code></p>\n<p><strong>2.2.5.2.\t后台启动设置 <code>daemonize no</code>  改成 <code>yes</code> </strong></p>\n<p>修改 redis.conf (128 行) 文件将里面的 daemonize no 改成 yes，让服务在后台启动</p>\n<p><strong>2.2.5.3.\tRedis 启动</strong></p>\n<p><code>redis-server/myredis/redis.conf</code>   你的这个配置文件在那个文件夹下就执行哪个文件夹的配置配置文件</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105349213.png\" alt=\"image-20220727105349213\"></p>\n<p><strong>2.2.5.4.\t用客户端访问：</strong> <code>redis-cli</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105413882.png\" alt=\"image-20220727105413882\"></p>\n<p><strong>2.2.5.5.\t多个端口可以：</strong> <code>redis-cli -p6379</code> <br>\n<strong>2.2.5.6.\t测试验证：</strong>  <code>ping</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105506029.png\" alt=\"image-20220727105506029\"></p>\n<p><strong>2.2.5.7.\tRedis 关闭</strong></p>\n<p>单实例关闭： <code>redis-cli shutdown</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105606303.png\" alt=\"image-20220727105606303\"></p>\n<p>也可以进入终端后再关闭</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105620164.png\" alt=\"image-20220727105620164\"></p>\n<p>多实例关闭，指定端口关闭： <code>redis-cli -p 6379 shutdown</code></p>\n<h3 id=\"226redis介绍相关知识\"><a class=\"markdownIt-Anchor\" href=\"#226redis介绍相关知识\">#</a> 2.2.6.\tRedis 介绍相关知识</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105742074.png\" alt=\"image-20220727105742074\"></p>\n<p><strong>Redis 是单线程 + 多路 IO 复用技术</strong></p>\n<p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用 select 和 poll 函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）</p>\n<p><code>串行   vs   多线程+锁（memcached） vs   单线程+多路IO复用(Redis)</code></p>\n<p>（与 Memcache 三点不同：支持多数据类型，支持持久化，单线程 + 多路 IO 复用）</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105854506.png\" alt=\"image-20220727105854506\"></p>\n<h1 id=\"三-常用五大数据类型\"><a class=\"markdownIt-Anchor\" href=\"#三-常用五大数据类型\">#</a> 三、常用五大数据类型</h1>\n<p>哪里去获得 redis 常见数据类型操作命令 http://www.redis.cn/commands.html</p>\n<h2 id=\"1-redis键key\"><a class=\"markdownIt-Anchor\" href=\"#1-redis键key\">#</a> 1 - Redis 键 (key)</h2>\n<p><code>key:</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  （1）keys * <span class=\"token builtin class-name\">:</span> 查看当前库所有key    <span class=\"token punctuation\">(</span>匹配：keys *1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  （2）exists key: 判断某个key是否存在</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  （3）type key <span class=\"token builtin class-name\">:</span> 查看你的key是什么类型</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  （4）del key  <span class=\"token builtin class-name\">:</span> 删除指定的key数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  （5）unlink key <span class=\"token builtin class-name\">:</span> 根据value选择非阻塞删除<span class=\"token punctuation\">(</span>仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  （6）expire key <span class=\"token number\">10</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10</span>秒钟,为给定的key设置过期时间</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  （7）ttl key <span class=\"token builtin class-name\">:</span> 查看还有多少秒过期，-1表示永不过期，-2表示已过期</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  （8）select  <span class=\"token builtin class-name\">:</span> 命令切换数据库</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  （9）dbsize  <span class=\"token builtin class-name\">:</span> 查看当前数据库的key的数量</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  （10）flushdb <span class=\"token builtin class-name\">:</span> 清空当前库</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  （11）flushall: 通杀全部库</pre></td></tr></table></figure><h2 id=\"2-redis字符串string\"><a class=\"markdownIt-Anchor\" href=\"#2-redis字符串string\">#</a> 2 - Redis 字符串 (String)</h2>\n<h3 id=\"321简介\"><a class=\"markdownIt-Anchor\" href=\"#321简介\">#</a> 3.2.1.\t简介</h3>\n<p>String 是 Redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。<br>\nString 类型是 <code>二进制安全的</code> 。意味着 Redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象。<br>\nString 类型是 Redis 最基本的数据类型，一个 Redis 中字符串 value 最多可以是 <code>512M</code></p>\n<h3 id=\"322常用命令\"><a class=\"markdownIt-Anchor\" href=\"#322常用命令\">#</a> 3.2.2.\t常用命令</h3>\n<p><code>String:</code>  k- key (键)  v-value (值)</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  （1）存：set k <span class=\"token function\">v</span>  <span class=\"token punctuation\">[</span>另说明见下！<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  （2）取：get k         </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  （3）追加字符：append k <span class=\"token string\">\"追加字段\"</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  （4）长度：strlen k</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  （5）无该key时存：setnx k v:（只有在 key 不存在时设置 key 的值）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  （6）增指定值：incrby k <span class=\"token punctuation\">[</span>integer<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  （7）减指定值：decrby k <span class=\"token punctuation\">[</span>integer<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  （8）递增：incr k （一定是整数；如无值则赋0后加1）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  （9）递键：decr k （一定是整数；如无值则赋0后减1）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>其他命令：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  （1）批量存：mset k1 v1 k2 v2<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  （2）批量取：mget k1 k2 k3 <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>         </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  （3）批量存：msetnx k1 v1 k2 v2<span class=\"token punctuation\">..</span>.（当且仅当所有给定 key 都不存在，原子性，有一个失败则都失败）</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  （4）范围取：getrange k 起始位置 结束位置（类似java中的substring，前包，后包）</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  （5）取全部数据：getrange k <span class=\"token number\">0</span> <span class=\"token parameter variable\">-1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  （6）覆盖值：setrange k 起始位置 <span class=\"token function\">v</span> <span class=\"token punctuation\">(</span>用<span class=\"token operator\">&lt;</span>value<span class=\"token operator\">></span>覆写<span class=\"token operator\">&lt;</span>key<span class=\"token operator\">></span>所储存的字符串值，从<span class=\"token operator\">&lt;</span>起始位置<span class=\"token operator\">></span>开始<span class=\"token punctuation\">(</span>索引从0开始<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  （7）过期时间：setex k 过期时间 value <span class=\"token punctuation\">(</span>设置键值的同时，设置过期时间，单位秒<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  （8）以新换旧：getset k <span class=\"token function\">v</span> <span class=\"token punctuation\">(</span>设置了新值同时获得旧值<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>存 set 的说明：</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727111440940.png\" alt=\"image-20220727111440940\"></p>\n<ul>\n<li>NX：当数据库中 key 不存在时，可以将 key-value 添加数据库</li>\n<li>XX：当数据库中 key 存在时，可以将 key-value 添加数据库，与 NX 参数互斥</li>\n<li>EX：key 的超时秒数</li>\n<li>PX：key 的超时毫秒数，与 EX 互斥</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727113031192.png\" alt=\"image-20220727113031192\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727113111389.png\" alt=\"image-20220727113111389\"></p>\n<p>上面的值可能是 2~200，因为 i++ 不是原子操作，它分三步完成：获取 i 的值，进行 + 操作，赋值</p>\n<h3 id=\"323数据结构\"><a class=\"markdownIt-Anchor\" href=\"#323数据结构\">#</a> 3.2.3.\t数据结构</h3>\n<p>String 的数据结构为 <code>简单动态字符串</code>  (Simple Dynamic String, 缩写 SDS)。是可以修改的字符串，内部结构实现上类似于 Java 的 <code>ArrayList</code> ，采用预分配冗余空间的方式来减少内存的频繁分配</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727123548075.png\" alt=\"image-20220727123548075\"></p>\n<p>如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是 <code>加倍</code> 现有的空间，如果超过 1M，扩容时一次只会 <code>多扩1M</code>  的空间。需要注意的是字符串最大长度为 512M。</p>\n<h2 id=\"3-redis列表list\"><a class=\"markdownIt-Anchor\" href=\"#3-redis列表list\">#</a> 3 - Redis 列表 (List)</h2>\n<h3 id=\"331简介\"><a class=\"markdownIt-Anchor\" href=\"#331简介\">#</a> 3.3.1.\t简介</h3>\n<p><strong>单键多值</strong><br>\n Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<p>它的底层实际是个 <code>双向链表</code> ，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727123852045.png\" alt=\"image-20220727123852045\"></p>\n<h3 id=\"332常用命令\"><a class=\"markdownIt-Anchor\" href=\"#332常用命令\">#</a> 3.3.2.\t常用命令</h3>\n<p><code>list:</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>概述：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>元素插入</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>链表表头或结尾插入：高效，中间：低</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>存储list：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1</span>.ArrayList使用数组方式：使用索引查询-块，新增删除时涉及位移操作-慢</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2</span>.LinkedList使用双向链接方式：每个元素记录前后元素指针</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">3</span>.双向链表增加数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">4</span>.双向链表删除数据</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>存储list常用命令：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token number\">1</span>.两端添加：lpush、rpush<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>lpush list <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token comment\">#从左侧往 list 表中插入 1 2 3</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>rpush list a b c <span class=\"token comment\">#从右侧往 list 表中插入 a b c </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token number\">2</span>.查看列表：lrange<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>lrange list <span class=\"token number\">0</span> <span class=\"token parameter variable\">-1</span> <span class=\"token comment\">#从头到尾查看</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>lrange list <span class=\"token number\">0</span> <span class=\"token number\">5</span>  <span class=\"token comment\">#从开始到第 5 个查看</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token number\">3</span>.两端弹出：lpop、rpop <span class=\"token punctuation\">(</span>值在键在，值光键亡<span class=\"token punctuation\">)</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>lpop list <span class=\"token comment\">#从左边弹出第一个数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>rpop list <span class=\"token comment\">#从尾部弹出第一个数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token number\">4</span>.获取列表元素个数：llen<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>llen list <span class=\"token comment\">#查看元素个数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token number\">5</span>.扩展命令：lpushx、rpushx、lrem、lset、rpoplppush<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>lpushx list x <span class=\"token comment\">#插入 x 到 list 表的开头（左边）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>rpushx list y <span class=\"token comment\">#插入 y 到 list 表的尾部（右边）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>lrem list n value <span class=\"token comment\">#从头到尾删除 n 个 value</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>lrem list <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token comment\">#从头到尾删除 2 个 3 (从左到右)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>lrem list <span class=\"token parameter variable\">-2</span> <span class=\"token number\">1</span>  <span class=\"token comment\">#从尾到头删除 2 个 1（从右到左）</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>lrem list <span class=\"token number\">0</span> <span class=\"token number\">2</span>\t<span class=\"token comment\">#删除所有 2</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>lset key n value \t<span class=\"token comment\">#在 key 表第 n 个角标设置为 value</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>lset list <span class=\"token number\">3</span> mmm \t<span class=\"token comment\">#在 list 表第 3 个角标设置 mmm</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>linset list before a yy\t <span class=\"token comment\">#在 list 表中 a 之前插入 yy</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>linset list after b xx \t<span class=\"token comment\">#在 list 表中 b 之后插入 xx</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>rpoplpush list1 list2 \t<span class=\"token comment\">#从 list1 表的右边吐出压入到 list2 表的左边</span></pre></td></tr></table></figure><h3 id=\"333数据结构\"><a class=\"markdownIt-Anchor\" href=\"#333数据结构\">#</a> 3.3.3.\t数据结构</h3>\n<p>List 的数据结构为 <code>快速链表quickList</code> 。</p>\n<p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是 <code>ziplist</code> ，也即是 <code>压缩列表</code> 。</p>\n<p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p>\n<p>当数据量比较多的时候才会改成 <code>quicklist</code> 。</p>\n<p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是 int 类型的数据，结构上还需要两个额外的指针 prev 和 next。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727135259344.png\" alt=\"image-20220727135259344\"></p>\n<p>Redis 将链表和 ziplist 结合起来组成了 quicklist。也就是将多个 ziplist 使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p>\n<h2 id=\"4-redis集合set\"><a class=\"markdownIt-Anchor\" href=\"#4-redis集合set\">#</a> 4 - Redis 集合 (Set)</h2>\n<h3 id=\"341简介\"><a class=\"markdownIt-Anchor\" href=\"#341简介\">#</a> 3.4.1.\t简介</h3>\n<p>Redis set 对外提供的功能与 list 类似是一个列表的功能，特殊之处在于 set 是可以 <code>自动排重</code> 的，当你需要存储一个列表数据，又不希望出现重复数据时，set 是一个很好的选择，并且 set 提供了判断某个成员是否在一个 set 集合内的重要接口，这个也是 list 所不能提供的。</p>\n<p>Redis 的 Set 是 string 类型的<strong>无序集合</strong>。<strong>它底层其实是一个 value 为 null 的 hash 表，所以添加，删除，查找的复杂度都是 O (1)</strong>。</p>\n<p>一个算法，随着数据的增加，执行时间的长短，如果是 O (1)，数据增加，查找数据的时间不变</p>\n<h3 id=\"342常用命令\"><a class=\"markdownIt-Anchor\" href=\"#342常用命令\">#</a> 3.4.2.\t常用命令</h3>\n<p><code>Set:</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Redis数据结构（Set）: List允许出现重复数据，Set不允许出现重复数据；Set最大元素数量是4294967295</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>命令：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  （1）存：sadd 列名 <span class=\"token punctuation\">[</span>值<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  （2）删：srem 列名 <span class=\"token punctuation\">[</span>值<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  （3）查全：smembers 列名</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  （4）查是否存在：sismember 列名 值，1表示存在，0表示不存在</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  （5）差集：sdiff 列名1 列名2 （<span class=\"token punctuation\">(</span>列1中的，不包含在列2中的<span class=\"token punctuation\">)</span>）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  （6）交集：sinter 列名1 列名2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  （7）并集：sunion 列名1 列名2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  （8）查数量：scard 列名</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  （9）随机查<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">></span>个值：srandmember 列名 <span class=\"token operator\">&lt;</span>n<span class=\"token operator\">></span>（不会从集合中删除）</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  （10）随机吐出一个值：spop 列名</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  （11）从集合A的值移动到集合B：smove 列名1 列名2 值 </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  （12）将差集存到新集合中：sdiffstore 新列名 列名1 列名2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  （13）将交集存到新集合中：sinterstore 新列名 列名1 列名2</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  （14）将并集存到新集合中：sunionstore 新列名 列名1 列名2</pre></td></tr></table></figure><h3 id=\"343数据结构\"><a class=\"markdownIt-Anchor\" href=\"#343数据结构\">#</a> 3.4.3.\t数据结构</h3>\n<p>Set 数据结构是 dict 字典，字典是用 <code>哈希表</code> 实现的。</p>\n<p>Java 中 HashSet 的内部实现使用的是 HashMap，只不过所有的 value 都指向同一个对象。Redis 的 set 结构也是一样，它的内部也使用 hash 结构，所有的 value 都指向同一个内部值。</p>\n<h2 id=\"5-redis哈希hash\"><a class=\"markdownIt-Anchor\" href=\"#5-redis哈希hash\">#</a> 5 - Redis 哈希 (Hash)</h2>\n<h3 id=\"351简介\"><a class=\"markdownIt-Anchor\" href=\"#351简介\">#</a> 3.5.1.\t简介</h3>\n<p>Redis hash 是一个键值对集合。</p>\n<p>Redis hash 是一个 string 类型的 <code>field</code>  和 <code>value</code>  的映射表，hash 特别适合用于 <code>存储对象</code> 。<br>\n类似 Java 里面的 Map&lt;String,Object&gt;</p>\n<p>用户 ID 为查找的 key，存储的 value 用户对象包含姓名，年龄，生日等信息，如果用普通的 key/value 结构来存储</p>\n<p>主要有以下 2 种存储方式：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727140611227.png\" alt=\"image-20220727140611227\"></p>\n<h3 id=\"352常用命令\"><a class=\"markdownIt-Anchor\" href=\"#352常用命令\">#</a> 3.5.2.\t常用命令</h3>\n<p><code>Hash:</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>常用存储类型（Hash）：每个可存4294967295个键值对</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>命令: 表名<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> 域<span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span> 值<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  （1）存：hset 表名 域 值 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  （2）批量存：hmset 表名 域 值 域 值<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  （2）取：hget 表名 域</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  （4）批量取：hmget 表名 域 域 <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  （5）取全：hgetall 表名</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  （6）删除：hdel 表名 域<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  （7）全删：del 表名</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  （8）增指定值：hincrby 表名 域 <span class=\"token punctuation\">[</span>integer<span class=\"token punctuation\">]</span>（一定是整数）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  （9）判断存在：hexists 表名 域 <span class=\"token punctuation\">(</span>查看哈希表 key 中，给定域 field 是否存在<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  （10）设置域值：hsetnx 表名 f <span class=\"token function\">v</span> （将hash表中域f的值设置为v，当且仅当field不存在时）</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  （11）键值对数量：hlen 表名</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  （12）取所有域<span class=\"token punctuation\">(</span>键<span class=\"token punctuation\">)</span>：hkeys 表名（列出所有的field）</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  （13）取所有值：hvals 表名（列出所有的value）</pre></td></tr></table></figure><h3 id=\"353数据结构\"><a class=\"markdownIt-Anchor\" href=\"#353数据结构\">#</a> 3.5.3.\t数据结构</h3>\n<p>Hash 类型对应的数据结构是两种： <code>ziplist</code> （压缩列表）， <code>hashtable</code> （哈希表）。当 field-value 长度较短且个数较少时，使用 ziplist，否则使用 hashtable。</p>\n<h2 id=\"6-redis有序集合zsetsorted-set\"><a class=\"markdownIt-Anchor\" href=\"#6-redis有序集合zsetsorted-set\">#</a> 6 - Redis 有序集合 Zset (sorted set)</h2>\n<h3 id=\"361简介\"><a class=\"markdownIt-Anchor\" href=\"#361简介\">#</a> 3.6.1.\t简介</h3>\n<p>Redis 有序集合 zset 与普通集合 set 非常相似，是一个 <code>没有重复元素</code> 的字符串集合。</p>\n<p>不同之处是有序集合的每个成员都关联了一个 <code>评分（score）</code> , 这个评分（score）被用来按照从最低分到最高分的方式 <code>排序</code> 集合中的成员。<strong>集合的成员是唯一的，但是评分可以是重复了 。</strong></p>\n<p>因为元素是有序的，所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p>\n<p>访问有序集合的中间元素也是非常快的，因此你能够<strong>使用有序集合作为一个没有重复成员</strong>的智能列表。</p>\n<h3 id=\"362常用命令\"><a class=\"markdownIt-Anchor\" href=\"#362常用命令\">#</a> 3.6.2.\t常用命令</h3>\n<p><code>Zset:</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令: 集合名<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> 评分<span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> 值<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  （1）<span class=\"token variable\"><span class=\"token variable\">`</span>存<span class=\"token variable\">`</span></span>：zadd 集合名 评分1 值1 评分2 值2<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  （2）<span class=\"token variable\"><span class=\"token variable\">`</span>按下标取<span class=\"token variable\">`</span></span>：zrange 集合名 下标1 下标2 <span class=\"token punctuation\">[</span>WITHSCORES<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  （返回有序集 key 中，下标在<span class=\"token operator\">&lt;</span>下标<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span> <span class=\"token operator\">&lt;</span>下标<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>之间的元素,带WITHSCORES，可以让分数一起和值返回到结果集）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  （3）<span class=\"token variable\"><span class=\"token variable\">`</span>按评分取<span class=\"token variable\">`</span></span>：zrangebyscore 集合名 min max <span class=\"token punctuation\">[</span>withscores<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>limit offset count<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  （返回有序集 key 中，所有 score 值介于 min 和 max 之间<span class=\"token punctuation\">(</span>包括等于 min 或 max <span class=\"token punctuation\">)</span>的成员。有序集成员按 score 值递增<span class=\"token punctuation\">(</span>从小到大<span class=\"token punctuation\">)</span>次序排列）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  （4）<span class=\"token variable\"><span class=\"token variable\">`</span>从大到小取<span class=\"token variable\">`</span></span>：zrevrangebyscore 集合名 max min <span class=\"token punctuation\">[</span>withscores<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>limit offset count<span class=\"token punctuation\">]</span>   （同上，改为从大到小排列。）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  （5）<span class=\"token variable\"><span class=\"token variable\">`</span>增指定值<span class=\"token variable\">`</span></span>：zincrby 集合名 增量 值（给值加上增量）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  （6）<span class=\"token variable\"><span class=\"token variable\">`</span>删除<span class=\"token variable\">`</span></span>：zrem 集合名 值 </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  （7）<span class=\"token variable\"><span class=\"token variable\">`</span>统计<span class=\"token variable\">`</span></span>：zcount 集合名 min max （统计该集合，分数区间内的元素个数）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  （8）<span class=\"token variable\"><span class=\"token variable\">`</span>排名<span class=\"token variable\">`</span></span>：zrank 集合名 值 （返回该值在集合中的排名，从0开始）</pre></td></tr></table></figure><p>案例：如何利用 zset 实现一个文章访问量的排行榜？</p>\n<h3 id=\"363数据结构\"><a class=\"markdownIt-Anchor\" href=\"#363数据结构\">#</a> 3.6.3.\t数据结构</h3>\n<p>SortedSet (zset) 是 Redis 提供的一个非常特别的数据结构，一方面它等价于 Java 的数据结构 Map&lt;String, Double&gt;，可以给每一个元素 value 赋予一个权重 score，另一方面它又类似于 TreeSet，内部的元素会按照权重 score 进行排序，可以得到每个元素的名次，还可以通过 score 的范围来获取元素的列表。</p>\n<p>zset 底层使用了两个数据结构<br>\n（1）<strong>hash</strong>，hash 的作用就是关联元素 value 和权重 score，保障元素 value 的唯一性，可以通过元素 value 找到相应的 score 值。<br>\n（2）<strong>跳跃表</strong>，跳跃表的目的在于给元素 value 排序，根据 score 的范围获取元素列表。</p>\n<h3 id=\"364跳跃表跳表\"><a class=\"markdownIt-Anchor\" href=\"#364跳跃表跳表\">#</a> 3.6.4.\t跳跃表（跳表）</h3>\n<p><strong>1、简介</strong></p>\n<p>​\t    有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis 采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p>\n<p><strong>2、实例</strong></p>\n<p>​\t对比有序链表和跳跃表，从链表中查询出 51</p>\n<p>（1）<strong>有序链表</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727150205067.png\" alt=\"image-20220727150205067\"></p>\n<p>要查找值为 51 的元素，需要从第一个元素开始依次查找、比较才能找到。共需要 6 次比较。<br>\n（2）<strong>跳跃表</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727150256931.png\" alt=\"image-20220727150256931\"></p>\n<p>从第 2 层开始，1 节点比 51 节点小，向后比较。</p>\n<p>21 节点比 51 节点小，继续向后比较，后面就是 NULL 了，所以从 21 节点向下到第 1 层</p>\n<p>在第 1 层，41 节点比 51 节点小，继续向后，61 节点比 51 节点大，所以从 41 向下</p>\n<p>在第 0 层，51 节点为要查找的节点，节点被找到，共查找 4 次。</p>\n<p>从此可以看出跳跃表比有序链表效率要高</p>\n<h1 id=\"四-redis配置文件介绍\"><a class=\"markdownIt-Anchor\" href=\"#四-redis配置文件介绍\">#</a> 四、Redis 配置文件介绍</h1>\n<p>我的目录：/opt/redis-6.2.7/redis.conf</p>\n<h2 id=\"1-units单位\"><a class=\"markdownIt-Anchor\" href=\"#1-units单位\">#</a> 1- Units 单位</h2>\n<p>配置大小单位，开头定义了一些基本的度量单位，只支持 bytes，不支持 bit 大小写不敏感</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730115141232.png\" alt=\"image-20220730115141232\"></p>\n<h2 id=\"2-includes包含\"><a class=\"markdownIt-Anchor\" href=\"#2-includes包含\">#</a> 2- INCLUDES 包含</h2>\n<p>类似 jsp 中的 include，多实例的情况可以把公用的配置文件提取出来</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730115303933.png\" alt=\"image-20220730115303933\"></p>\n<h2 id=\"3-网络相关配置\"><a class=\"markdownIt-Anchor\" href=\"#3-网络相关配置\">#</a> 3 - 网络相关配置</h2>\n<h3 id=\"431-bind\"><a class=\"markdownIt-Anchor\" href=\"#431-bind\">#</a> 4.3.1  bind</h3>\n<p>默认情况 bind=127.0.0.1 只能接受本机的访问请求</p>\n<p>不写的情况下，无限制接受任何 ip 地址的访问</p>\n<p>生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要将其注释掉</p>\n<p><strong>如果开启了 protected-mode，那么在没有设定 bind ip 且没有设密码的情况下，Redis 只允许接受本机的响应</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730141422593.png\" alt=\"image-20220730141422593\"></p>\n<p>保存配置，停止服务，重启启动查看进程，不再是本机访问了。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730114744786.png\" alt=\"image-20220730114744786\"></p>\n<h3 id=\"432-protected-mode\"><a class=\"markdownIt-Anchor\" href=\"#432-protected-mode\">#</a> 4.3.2.  protected-mode</h3>\n<p>将本机访问保护模式设置 no</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730141730607.png\" alt=\"image-20220730141730607\"></p>\n<h3 id=\"433-port\"><a class=\"markdownIt-Anchor\" href=\"#433-port\">#</a> 4.3.3 Port</h3>\n<p>端口号，默认 6379</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730141828893.png\" alt=\"image-20220730141828893\"></p>\n<h3 id=\"434-tcp-backlog\"><a class=\"markdownIt-Anchor\" href=\"#434-tcp-backlog\">#</a> 4.3.4.  tcp-backlog</h3>\n<p>设置 tcp 的 backlog，backlog 其实是一个连接队列，backlog 队列总和 = 未完成三次握手队列 + 已经完成三次握手队列。</p>\n<p>在高并发环境下你需要一个高 backlog 值来避免慢客户端连接问题。</p>\n<p>注意 Linux 内核会将这个值减小到 /proc/sys/net/core/somaxconn 的值（128），所以需要确认增大 /proc/sys/net/core/somaxconn 和 /proc/sys/net/ipv4/tcp_max_syn_backlog（128）两个值来达到想要的效果</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730142147649.png\" alt=\"image-20220730142147649\"></p>\n<h3 id=\"435-timeout\"><a class=\"markdownIt-Anchor\" href=\"#435-timeout\">#</a> 4.3.5.  timeout</h3>\n<p>一个空闲的客户端维持多少秒会关闭，0 表示关闭该功能。即<strong>永不关闭</strong>。</p>\n<p><img data-src=\"C:%5CUsers%5C22616%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220730142318928.png\" alt=\"image-20220730142318928\"></p>\n<h3 id=\"436-tcp-keepalive\"><a class=\"markdownIt-Anchor\" href=\"#436-tcp-keepalive\">#</a> 4.3.6.  tcp-keepalive</h3>\n<p>对访问客户端的一种<strong>心跳检测</strong>，每个 n 秒检测一次。</p>\n<p>单位为秒，如果设置为 0，则不会进行 Keepalive 检测，建议设置成 60</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730143102388.png\" alt=\"image-20220730143102388\"></p>\n<h2 id=\"4-general通用\"><a class=\"markdownIt-Anchor\" href=\"#4-general通用\">#</a> 4 - GENERAL 通用</h2>\n<h3 id=\"441-daemonize\"><a class=\"markdownIt-Anchor\" href=\"#441-daemonize\">#</a> 4.4.1.  daemonize</h3>\n<p>是否为后台进程，设置为 yes</p>\n<p>守护进程，后台启动</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730143234823.png\" alt=\"image-20220730143234823\"></p>\n<h3 id=\"442-pidfile\"><a class=\"markdownIt-Anchor\" href=\"#442-pidfile\">#</a> 4.4.2.  pidfile</h3>\n<p>存放 pid 文件的位置，每个实例会产生一个不同的 pid 文件</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730143450301.png\" alt=\"image-20220730143450301\"></p>\n<h3 id=\"443-loglevel\"><a class=\"markdownIt-Anchor\" href=\"#443-loglevel\">#</a> 4.4.3.  loglevel</h3>\n<p>指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为<strong> notice</strong></p>\n<p><strong>四个级别根据使用阶段来选择，生产环境选择 notice 或者 warning</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730143541853.png\" alt=\"image-20220730143541853\"></p>\n<h3 id=\"444-logfile\"><a class=\"markdownIt-Anchor\" href=\"#444-logfile\">#</a> 4.4.4.  logfile</h3>\n<p>日志文件名称</p>\n<p><img data-src=\"C:%5CUsers%5C22616%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220730143639134.png\" alt=\"image-20220730143639134\"></p>\n<h3 id=\"445-databases-16\"><a class=\"markdownIt-Anchor\" href=\"#445-databases-16\">#</a> 4.4.5.  databases 16</h3>\n<p>设定库的数量 默认 16，默认数据库为 0，可以使用 SELECT <dbid>命令在连接上指定数据库 id</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730143726917.png\" alt=\"image-20220730143726917\"></p>\n<h2 id=\"5-security安全\"><a class=\"markdownIt-Anchor\" href=\"#5-security安全\">#</a> 5 -  SECURITY 安全</h2>\n<h3 id=\"551-设置密码\"><a class=\"markdownIt-Anchor\" href=\"#551-设置密码\">#</a> 5.5.1.  设置密码</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730144004826.png\" alt=\"image-20220730144004826\"></p>\n<p>访问密码的查看、设置和取消</p>\n<p>在命令中设置密码，只是临时的。重启 redis 服务器，密码就还原了。</p>\n<p>永久设置，需要再配置文件中进行设置。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730144237188.png\" alt=\"image-20220730144237188\"></p>\n<h2 id=\"6-limits限制\"><a class=\"markdownIt-Anchor\" href=\"#6-limits限制\">#</a> 6 - LIMITS 限制</h2>\n<h3 id=\"661-maxclients\"><a class=\"markdownIt-Anchor\" href=\"#661-maxclients\">#</a> 6.6.1.  maxclients</h3>\n<ul>\n<li>\n<p>设置 redis 同时可以与多少个客户端进行连接。</p>\n</li>\n<li>\n<p>默认情况下为 10000 个客户端。</p>\n</li>\n<li>\n<p>如果达到了此限制，redis 则会拒绝新的连接请求，并且向这些连接请求方发出 “max number of clients reached” 以作回应。</p>\n</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730144953788.png\" alt=\"image-20220730144953788\"></p>\n<h3 id=\"662-maxmemory\"><a class=\"markdownIt-Anchor\" href=\"#662-maxmemory\">#</a> 6.6.2.  maxmemory</h3>\n<ul>\n<li>\n<p>建议<strong>必须设置</strong>，否则，将内存占满，造成服务器宕机</p>\n</li>\n<li>\n<p>设置 redis 可以使用的内存量。一旦到达内存使用上限，redis 将会试图移除内部数据，移除规则可以通过<strong> maxmemory-policy</strong> 来指定。</p>\n</li>\n<li>\n<p>如果 redis 无法根据移除规则来移除内存中的数据，或者设置了 “不允许移除”，那么 redis 则会针对那些需要申请内存的指令返回错误信息，比如 SET、LPUSH 等。</p>\n</li>\n<li>\n<p>但是对于无内存申请的指令，仍然会正常响应，比如 GET 等。如果你的 redis 是主 redis（说明你的 redis 有从 redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是 “不移除” 的情况下，才不用考虑这个因素。</p>\n</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145049188.png\" alt=\"image-20220730145049188\"></p>\n<h3 id=\"663-maxmemory-policy\"><a class=\"markdownIt-Anchor\" href=\"#663-maxmemory-policy\">#</a> 6.6.3.  maxmemory-policy</h3>\n<ul>\n<li>\n<p>volatile-lru：使用 LRU 算法移除 key，只对设置了<strong>过期时间</strong>的键；（最近最少使用）</p>\n</li>\n<li>\n<p>allkeys-lru：在所有集合 key 中，使用 LRU 算法移除 key</p>\n</li>\n<li>\n<p>volatile-random：在过期集合中移除随机的 key，只对设置了过期时间的键</p>\n</li>\n<li>\n<p>allkeys-random：在所有集合 key 中，移除随机的 key</p>\n</li>\n<li>\n<p>volatile-ttl：移除那些 TTL 值最小的 key，即那些最近要过期的 key</p>\n</li>\n<li>\n<p>noeviction：不进行移除。针对写操作，只是返回错误信息</p>\n</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145143860.png\" alt=\"image-20220730145143860\"></p>\n<h3 id=\"664-maxmemory-samples\"><a class=\"markdownIt-Anchor\" href=\"#664-maxmemory-samples\">#</a> 6.6.4.  maxmemory-samples</h3>\n<ul>\n<li>\n<p>设置样本数量，LRU 算法和最小 TTL 算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis 默认会检查这么多个 key 并选择其中 LRU 的那个。</p>\n</li>\n<li>\n<p>一般设置 3 到 7 的数字，数值越小样本越不准确，但性能消耗越小。</p>\n</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145234892.png\" alt=\"image-20220730145234892\"></p>\n<h1 id=\"五-redis的发布和订阅\"><a class=\"markdownIt-Anchor\" href=\"#五-redis的发布和订阅\">#</a> 五、Redis 的发布和订阅</h1>\n<h2 id=\"1-什么是发布和订阅\"><a class=\"markdownIt-Anchor\" href=\"#1-什么是发布和订阅\">#</a> 1- 什么是发布和订阅</h2>\n<p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p>\n<p>Redis 客户端可以订阅任意数量的频道。</p>\n<h2 id=\"2-redis的发布和订阅\"><a class=\"markdownIt-Anchor\" href=\"#2-redis的发布和订阅\">#</a> 2- Redis 的发布和订阅</h2>\n<p>1、客户端可以订阅频道如下图</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145408989.png\" alt=\"image-20220730145408989\"></p>\n<p>2、当给这个频道发布消息后，消息就会发送给订阅的客户端</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145420014.png\" alt=\"image-20220730145420014\"></p>\n<h2 id=\"3-发布订阅命令行实现\"><a class=\"markdownIt-Anchor\" href=\"#3-发布订阅命令行实现\">#</a> 3- 发布订阅命令行实现</h2>\n<p>1、\t打开一个客户端订阅 channel1<br>\nSUBSCRIBE channel1</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145530661.png\" alt=\"image-20220730145530661\"></p>\n<p>2、打开另一个客户端，给 channel1 发布消息 hello<br>\npublish channel1 hello</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145549967.png\" alt=\"image-20220730145549967\"></p>\n<p>返回的 1 是订阅者数量<br>\n 3、打开第一个客户端可以看到发送的消息</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145629320.png\" alt=\"image-20220730145629320\"></p>\n<p>注：发布的消息没有持久化，如果在订阅的客户端收不到 hello，只能收到订阅后发布的消息</p>\n<h1 id=\"六-redis新数据类型\"><a class=\"markdownIt-Anchor\" href=\"#六-redis新数据类型\">#</a> 六、Redis 新数据类型</h1>\n<h2 id=\"1-bitmaps\"><a class=\"markdownIt-Anchor\" href=\"#1-bitmaps\">#</a> 1- Bitmaps</h2>\n<h3 id=\"611简介\"><a class=\"markdownIt-Anchor\" href=\"#611简介\">#</a> 6.1.1.\t简介</h3>\n<p>现代计算机用二进制（位） 作为信息的基础单位， 1 个字节等于 8 位， 例如 “abc” 字符串是由 3 个字节组成， 但实际在计算机存储时将其用二进制表示， “abc” 分别对应的 ASCII 码分别是 97、 98、 99， 对应的二进制分别是 01100001、 01100010 和 01100011，如下图</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145703500.png\" alt=\"image-20220730145703500\"></p>\n<p>合理地使用操作位能够有效地提高内存使用率和开发效率。<br>\nRedis 提供了 Bitmaps 这个 “数据类型” 可以实现对位的操作：<br>\n（1）\tBitmaps 本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。<br>\n（2）\tBitmaps 单独提供了一套命令， 所以在 Redis 中使用 Bitmaps 和使用字符串的方法不太相同。 可以把 Bitmaps 想象成一个以位为单位的数组， 数组的每个单元只能存储 0 和 1， 数组的下标在 Bitmaps 中叫做偏移量。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145718081.png\" alt=\"image-20220730145718081\"></p>\n<h3 id=\"612命令\"><a class=\"markdownIt-Anchor\" href=\"#612命令\">#</a> 6.1.2.\t命令</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  （1）存：setbit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  （2）取：getbit</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  （3）统计：bitcount</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  （4）并/交/异或操作：bitop</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>详见下列很实例示范。</pre></td></tr></table></figure><p>1、 <code>setbit</code> <br>\n（1）格式<br>\n **setbit<key><offset><value>** 设置 Bitmaps 中某个偏移量的值（0 或 1）</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145758337.png\" alt=\"image-20220730145758337\"></p>\n<p><code>offset</code> ：偏移量从 0 开始</p>\n<p>（2）实例<br>\n每个独立用户是否访问过网站存放在 Bitmaps 中， 将访问的用户记做 1， 没有访问的用户记做 0， 用偏移量作为用户的 id。<br>\n设置键的第 offset 个位的值（从 0 算起） ， 假设现在有 20 个用户，userid=1， 6， 11， 15， 19 的用户对网站进行了访问， 那么当前 Bitmaps 初始化结果如图</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145816388.png\" alt=\"image-20220730145816388\"></p>\n<p>unique:users:20201106 代表 2020-11-06 这天的独立访问用户的 Bitmaps</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730150000867.png\" alt=\"image-20220730150000867\"></p>\n<p>注：💡<br>\n很多应用的用户 id 以一个指定数字（例如 10000） 开头， 直接将用户 id 和 Bitmaps 的偏移量对应势必会造成一定的浪费， 通常的做法是每次做 setbit 操作时将用户 id 减去这个指定数字。<br>\n在第一次初始化 Bitmaps 时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成 Redis 的阻塞。</p>\n<p>2、 <code>getbit</code> <br>\n（1）格式<br>\n **getbit<key><offset>** 获取 Bitmaps 中某个偏移量的值</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730150357659.png\" alt=\"image-20220730150357659\"></p>\n<p>获取键的第 offset 位的值（从 0 开始算）</p>\n<p>（2）实例<br>\n获取 id=8 的用户是否在 2020-11-06 这天访问过， 返回 0 说明没有访问过：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730150425467.png\" alt=\"image-20220730150425467\"></p>\n<p>注：因为 100 根本不存在，所以也是返回 0</p>\n<p>3、 <code>bitcount</code> <br>\n<strong> 统计字符串</strong>被设置为 1 的 bit 数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指 bit 组的字节的<strong>下标数</strong>，二者皆包含。<br>\n（1）格式<br>\n<strong> bitcount<key>[start end]</strong> 统计字符串从 start 字节到 end 字节比特值为 1 的数量</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730150503473.png\" alt=\"image-20220730150503473\"></p>\n<p>（2）实例<br>\n计算 2022-11-06 这天的独立访问用户数量</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730150516584.png\" alt=\"image-20220730150516584\"></p>\n<p>start 和 end 代表起始和结束字节数， 下面操作计算用户 id 在第 1 个字节到第 3 个字节之间的独立访问用户数， 对应的用户 id 是 11， 15， 19。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730150532060.png\" alt=\"image-20220730150532060\"></p>\n<p>举例：💡</p>\n<p>K1 【01000001 01000000  00000000 00100001】，对应【0，1，2，3】</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bitcount K1 <span class=\"token number\">1</span> <span class=\"token number\">2</span> ： 统计下标1、2字节组中bit<span class=\"token operator\">=</span><span class=\"token number\">1</span>的个数，即01000000  00000000 --》  bitcount K1 <span class=\"token number\">1</span> <span class=\"token number\">2</span>  --》  <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>bitcount K1 <span class=\"token number\">1</span> <span class=\"token number\">3</span>  ： 统计下标1、2字节组中bit<span class=\"token operator\">=</span><span class=\"token number\">1</span>的个数，即01000000  00000000 00100001  --》bitcount K1 <span class=\"token number\">1</span> <span class=\"token number\">3</span>  --》3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bitcount K1 <span class=\"token number\">0</span> <span class=\"token parameter variable\">-2</span>  ： 统计下标0到下标倒数第2，字节组中bit<span class=\"token operator\">=</span><span class=\"token number\">1</span>的个数，即01000001  01000000   00000000   --》bitcount K1 <span class=\"token number\">0</span> <span class=\"token parameter variable\">-2</span>   --》3</pre></td></tr></table></figure><p>注意：💡redis 的 setbit 设置或清除的是 bit 位置，而 bitcount 计算的是 byte 位置。bit（位）byte（字节）</p>\n<p>4、 <code>bitop</code> <br>\n (1) 格式<br>\n<strong> bitop  and (or/not/xor) <destkey> [key…]</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731112131913.png\" alt=\"image-20220731112131913\"></p>\n<p>bitop 是一个复合操作， 它可以做多个 Bitmaps 的 and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在 destkey 中。</p>\n<p>(2) 实例</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2020</span>-11-04 日访问网站的userid<span class=\"token operator\">=</span><span class=\"token number\">1,2</span>,5,9。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>setbit unique:users:20201104 <span class=\"token number\">1</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>setbit unique:users:20201104 <span class=\"token number\">2</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>setbit unique:users:20201104 <span class=\"token number\">5</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>setbit unique:users:20201104 <span class=\"token number\">9</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2020</span>-11-03 日访问网站的userid<span class=\"token operator\">=</span><span class=\"token number\">0,1</span>,4,9。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>setbit unique:users:20201103 <span class=\"token number\">0</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>setbit unique:users:20201103 <span class=\"token number\">1</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>setbit unique:users:20201103 <span class=\"token number\">4</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>setbit unique:users:20201103 <span class=\"token number\">9</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>计算出两天都访问过网站的用户数量</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bitop and unique:users:and:20201104_03</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> unique:users:20201103 unique:users:20201104</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731112424506.png\" alt=\"image-20220731112424506\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731112608764.png\" alt=\"image-20220731112608764\"></p>\n<p>计算出任意一天都访问过网站的用户数量（例如月活跃就是类似这种） ， 可以使用 or 求并集</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731112642593.png\" alt=\"image-20220731112642593\"></p>\n<h3 id=\"613bitmaps与set对比\"><a class=\"markdownIt-Anchor\" href=\"#613bitmaps与set对比\">#</a> 6.1.3.\tBitmaps 与 set 对比</h3>\n<p>假设网站有 1 亿用户， 每天独立访问的用户有 5 千万， 如果每天用集合类型和 Bitmaps 分别存储活跃用户可以得到表<br>\n<img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731112759996.png\" alt=\"image-20220731112759996\"></p>\n<p>很明显， 这种情况下使用 Bitmaps 能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731112933430.png\" alt=\"image-20220731112933430\"></p>\n<p>但 Bitmaps 并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有 10 万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用 Bitmaps 就不太合适了， 因为基本上大部分位都是 0。<br>\n<img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731112959496.png\" alt=\"image-20220731112959496\"></p>\n<h2 id=\"2-hyperloglog\"><a class=\"markdownIt-Anchor\" href=\"#2-hyperloglog\">#</a> 2 - HyperLogLog</h2>\n<h3 id=\"621简介\"><a class=\"markdownIt-Anchor\" href=\"#621简介\">#</a> 6.2.1.\t简介</h3>\n<p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站 PV（PageView 页面访问量）, 可以使用 Redis 的 incr、incrby 轻松实现。</p>\n<p>但像 UV（UniqueVisitor，独立访客）、独立 IP 数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p>\n<p><strong>解决基数问题有很多种方案：</strong><br>\n（1）数据存储在 MySQL 表中，使用 distinct count 计算不重复个数<br>\n（2）使用 Redis 提供的 hash、set、bitmaps 等数据结构来处理</p>\n<p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p>\n<p>能否能够降低一定的精度来平衡存储空间？Redis 推出了 HyperLogLog</p>\n<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p>\n<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>\n<p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>\n<p>什么是基数？<br>\n 比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数 (不重复元素) 为 5。 基数估计就是在误差可接受的范围内，快速计算基数。</p>\n<h3 id=\"622命令\"><a class=\"markdownIt-Anchor\" href=\"#622命令\">#</a> 6.2.2.\t命令</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  （1）存：pfadd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  （2）去重统计（可并集）：pfcount</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  （3）取并集<span class=\"token punctuation\">(</span>生成新数据<span class=\"token punctuation\">)</span>：pfmerge</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>详见下列实例</pre></td></tr></table></figure><p>1、 <code>pfadd </code> <br>\n（1）格式<br>\n<strong> pfadd <key>&lt; element&gt; [element …]</strong>   添加指定元素到 HyperLogLog 中</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161114528.png\" alt=\"image-20220731161114528\"></p>\n<p>（2）实例</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161148573.png\" alt=\"image-20220731161148573\"></p>\n<p>将所有元素添加到指定 HyperLogLog 数据结构中。如果执行命令后 HLL 估计的近似基数发生变化，则返回 1，否则返回 0。</p>\n<p>2、 <code>pfcount</code> <br>\n（1）格式<br>\n<strong> pfcount<key> [key …]</strong> 计算 HLL 的近似基数，可以计算多个 HLL，比如用 HLL 存储每天的 UV，计算一周的 UV 可以使用 7 天的 UV 合并计算即可</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161256514.png\" alt=\"image-20220731161256514\"></p>\n<p>（2）实例</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161305107.png\" alt=\"image-20220731161305107\"></p>\n<p>3、 <code>pfmerge</code> <br>\n（1）格式<br>\n<strong> pfmerge<destkey><sourcekey> [sourcekey …]</strong>  将一个或多个 HLL 合并后的结果存储在另一个 HLL 中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161447288.png\" alt=\"image-20220731161447288\"></p>\n<p>（2）实例</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161510641.png\" alt=\"image-20220731161510641\"></p>\n<h2 id=\"3-geospatial\"><a class=\"markdownIt-Anchor\" href=\"#3-geospatial\">#</a> 3- Geospatial</h2>\n<h3 id=\"631简介\"><a class=\"markdownIt-Anchor\" href=\"#631简介\">#</a> 6.3.1.\t简介</h3>\n<p>Redis 3.2 中增加了对 GEO 类型的支持。GEO，Geographic，<strong>地理信息</strong>的缩写。该类型，就是元素的 2 维坐标，在地图上就是<strong>经纬度</strong>。redis 基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度 Hash 等常见操作。</p>\n<h3 id=\"632命令\"><a class=\"markdownIt-Anchor\" href=\"#632命令\">#</a> 6.3.2.\t命令</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   （1）存：geoadd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   （2）取：geopos</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   （3）直线距离：geodist</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   （4）指定中心、半径内的元素：georadius、</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>详见下列实例</pre></td></tr></table></figure><p>1、 <code>geoadd</code></p>\n<p>（1）格式<br>\n<strong> geoadd<key>&lt; longitude&gt;<latitude><member> [longitude latitude member…]</strong>   添加地理位置（经度，纬度，名称）</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161856254.png\" alt=\"image-20220731161856254\"></p>\n<p>（2）实例</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>geoadd china:city <span class=\"token number\">121.47</span> <span class=\"token number\">31.23</span> shanghai</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>geoadd china:city <span class=\"token number\">106.50</span> <span class=\"token number\">29.53</span> chongqing <span class=\"token number\">114.05</span> <span class=\"token number\">22.52</span> shenzhen <span class=\"token number\">116.38</span> <span class=\"token number\">39.90</span> beijing</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161919961.png\" alt=\"image-20220731161919961\"></p>\n<p>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p>\n<p><strong>有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</strong></p>\n<p>当坐标位置超出指定范围时，该命令将会返回一个错误。<br>\n已经添加的数据，是无法再次往里面添加的。</p>\n<p>2、 <code>geopos  </code></p>\n<p>（1）格式<br>\n<strong> geopos  <key><member> [member…]</strong>  获得指定地区的坐标值</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731162347572.png\" alt=\"image-20220731162347572\"></p>\n<p>（2）实例</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731162359258.png\" alt=\"image-20220731162359258\"></p>\n<p>3、 <code>geodist</code></p>\n<p>（1）格式<br>\n<strong> geodist<key><member1><member2>  [m|km|ft|mi ]</strong>  获取两个位置之间的直线距离</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731162423033.png\" alt=\"image-20220731162423033\"></p>\n<p>（2）实例<br>\n获取两个位置之间的直线距离</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731162458356.png\" alt=\"image-20220731162458356\"></p>\n<p>单位：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m 表示单位为米<span class=\"token punctuation\">[</span>默认值<span class=\"token punctuation\">]</span>。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>km 表示单位为千米。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mi 表示单位为英里。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ft 表示单位为英尺。</pre></td></tr></table></figure><p>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</p>\n<p>4、 <code>georadius</code> <br>\n（1）格式<br>\n<strong> georadius<key>&lt; longitude&gt;<latitude>radius  m|km|ft|mi</strong>   以给定的经纬度为中心，找出某一半径内的元素</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731162604335.png\" alt=\"image-20220731162604335\"></p>\n<p>经度 纬度 距离 单位</p>\n<p>（2）实例</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731162630641.png\" alt=\"image-20220731162630641\"></p>\n<h1 id=\"七-redis_jedis_测试\"><a class=\"markdownIt-Anchor\" href=\"#七-redis_jedis_测试\">#</a> 七、Redis_Jedis_测试</h1>\n<h2 id=\"1-jedis所需要的jar包\"><a class=\"markdownIt-Anchor\" href=\"#1-jedis所需要的jar包\">#</a> 1 - Jedis 所需要的 jar 包</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>redis.clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jedis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"2-连接redis注意事项\"><a class=\"markdownIt-Anchor\" href=\"#2-连接redis注意事项\">#</a> 2 - 连接 Redis 注意事项</h2>\n<p>禁用 Linux 的防火墙：Linux (CentOS7) 里执行命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl stop/disable firewalld.service   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>redis.conf中注释掉bind <span class=\"token number\">127.0</span>.0.1 ,然后 protected-mode no</pre></td></tr></table></figure><h2 id=\"3-jedis常用操作\"><a class=\"markdownIt-Anchor\" href=\"#3-jedis常用操作\">#</a> 3 - Jedis 常用操作</h2>\n<h3 id=\"731创建动态的工程\"><a class=\"markdownIt-Anchor\" href=\"#731创建动态的工程\">#</a> 7.3.1.\t创建动态的工程</h3>\n<h3 id=\"732创建测试程序\"><a class=\"markdownIt-Anchor\" href=\"#732创建测试程序\">#</a> 7.3.2.\t创建测试程序</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>jedis</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Jedis</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.137.3\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">String</span> pong <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功：\"</span><span class=\"token operator\">+</span>pong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"4-测试相关数据类型\"><a class=\"markdownIt-Anchor\" href=\"#4-测试相关数据类型\">#</a> 4 - 测试相关数据类型</h2>\n<h3 id=\"741jedis-api-key\"><a class=\"markdownIt-Anchor\" href=\"#741jedis-api-key\">#</a> 7.4.1.\tJedis-API:    Key</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">ttl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"742jedis-api-string\"><a class=\"markdownIt-Anchor\" href=\"#742jedis-api-string\">#</a> 7.4.2.\tJedis-API:    String</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">mset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"v2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"v3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">mget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"743jedis-api-list\"><a class=\"markdownIt-Anchor\" href=\"#743jedis-api-list\">#</a> 7.4.3.\tJedis-API:    List</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">lrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> element <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"744jedis-api-set\"><a class=\"markdownIt-Anchor\" href=\"#744jedis-api-set\">#</a> 7.4.4.\tJedis-API:    set</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order02\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order03\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order04\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> smembers <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">smembers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> order <span class=\"token operator\">:</span> smembers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">srem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order02\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"745jedis-api-hash\"><a class=\"markdownIt-Anchor\" href=\"#745jedis-api-hash\">#</a> 7.4.5.\tJedis-API:    hash</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"userName\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"userName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"telphone\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"13810169999\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc@163.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hmset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash2\"</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hmget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"telphone\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> element <span class=\"token operator\">:</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>7.4.6.\tJedis-API:    zset</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"l4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> zrange <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> e <span class=\"token operator\">:</span> zrange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"八-redis_jedis_实例\"><a class=\"markdownIt-Anchor\" href=\"#八-redis_jedis_实例\">#</a> 八、Redis_Jedis_实例</h1>\n<h2 id=\"1-完成一个手机验证码功能\"><a class=\"markdownIt-Anchor\" href=\"#1-完成一个手机验证码功能\">#</a> 1 - 完成一个手机验证码功能</h2>\n<p>要求：<br>\n1、输入手机号，点击发送后随机生成 6 位数字码，2 分钟有效<br>\n 2、输入验证码，点击验证，返回成功或失败<br>\n 3、每个手机号每天只能输入 3 次</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731164343801.png\" alt=\"image-20220731164343801\"></p>\n<p>实现见：<a href=\"http://blog.dabing.cool/cache/redis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81%E6%A0%A1%E9%AA%8C/\">http://blog.dabing.cool/cache/redis 实现手机验证码校验 /</a></p>\n<h1 id=\"九-redis与spring-boot整合\"><a class=\"markdownIt-Anchor\" href=\"#九-redis与spring-boot整合\">#</a> 九、Redis 与 Spring Boot 整合</h1>\n<p>Spring Boot 整合 Redis 非常简单，只需要按如下步骤整合即可</p>\n<h2 id=\"1-整合步骤\"><a class=\"markdownIt-Anchor\" href=\"#1-整合步骤\">#</a> 1 - 整合步骤</h2>\n<p>1、\t在 pom.xml 文件中引入 redis 相关依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- redis --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!-- spring2.X 集成 redis 所需 common-pool2--></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.commons<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>commons-pool2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.6.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2、\tapplication.properties 配置 redis 配置</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#Redis 服务器地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">spring.redis.host</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">192.168.140.136</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#Redis 服务器连接端口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">spring.redis.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">6379</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#Redis 数据库索引（默认为 0）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key attr-name\">spring.redis.database</span><span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#连接超时时间（毫秒）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key attr-name\">spring.redis.timeout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1800000</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#连接池最大连接数（使用负值表示没有限制）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key attr-name\">spring.redis.lettuce.pool.max-active</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">20</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#最大阻塞等待时间 (负数表示没限制)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key attr-name\">spring.redis.lettuce.pool.max-wait</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">-1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#连接池中的最大空闲连接</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key attr-name\">spring.redis.lettuce.pool.max-idle</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">5</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#连接池中的最小空闲连接</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key attr-name\">spring.redis.lettuce.pool.min-idle</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">0</span></pre></td></tr></table></figure><p>3、\t添加 redis 配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@EnableCaching</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CachingConfigurerSupport</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">RedisSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> redisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ObjectMapper</span> om <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        om<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyAccessor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ALL</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonAutoDetect<span class=\"token punctuation\">.</span>Visibility</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        om<span class=\"token punctuation\">.</span><span class=\"token function\">enableDefaultTyping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper<span class=\"token punctuation\">.</span>DefaultTyping</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NON_FINAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        jackson2JsonRedisSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">setObjectMapper</span><span class=\"token punctuation\">(</span>om<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//key 序列化方式</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span>redisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//value 序列化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//value hashmap 序列化</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashValueSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">CacheManager</span> <span class=\"token function\">cacheManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    \t<span class=\"token class-name\">RedisSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> redisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    \t<span class=\"token class-name\">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    \t<span class=\"token comment\">// 解决查询缓存转换异常的问题</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">ObjectMapper</span> om <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        om<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyAccessor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ALL</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonAutoDetect<span class=\"token punctuation\">.</span>Visibility</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        om<span class=\"token punctuation\">.</span><span class=\"token function\">enableDefaultTyping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper<span class=\"token punctuation\">.</span>DefaultTyping</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NON_FINAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        jackson2JsonRedisSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">setObjectMapper</span><span class=\"token punctuation\">(</span>om<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 配置序列化（解决乱码的问题）, 过期时间 600 秒</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">RedisCacheConfiguration</span> config <span class=\"token operator\">=</span> <span class=\"token class-name\">RedisCacheConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultCacheConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entryTtl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">serializeKeysWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializationContext<span class=\"token punctuation\">.</span>SerializationPair</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromSerializer</span><span class=\"token punctuation\">(</span>redisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">serializeValuesWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializationContext<span class=\"token punctuation\">.</span>SerializationPair</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disableCachingNullValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">RedisCacheManager</span> cacheManager <span class=\"token operator\">=</span> <span class=\"token class-name\">RedisCacheManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cacheDefaults</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> cacheManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>4、测试一下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">RedisTestController</span>中添加测试方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/redisTest\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisTestController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testRedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 设置值到 redis</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lucy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 从 redis 获取值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"十-redis_事务_锁机制_秒杀\"><a class=\"markdownIt-Anchor\" href=\"#十-redis_事务_锁机制_秒杀\">#</a> 十、Redis_事务_锁机制_秒杀</h1>\n<h2 id=\"1-redis的事务定义\"><a class=\"markdownIt-Anchor\" href=\"#1-redis的事务定义\">#</a> 1- Redis 的事务定义</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731165702195.png\" alt=\"image-20220731165702195\"></p>\n<p>Redis 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p>\n<p>Redis 事务的主要作用就是串联多个命令防止别的命令插队。</p>\n<h2 id=\"2-multi-exec-discard\"><a class=\"markdownIt-Anchor\" href=\"#2-multi-exec-discard\">#</a> 2 - Multi、Exec、discard</h2>\n<p>从输入 Multi 命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入 Exec 后，Redis 会将之前的命令队列中的命令依次执行。</p>\n<p>组队的过程中可以通过 discard 来放弃组队。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731165752989.png\" alt=\"image-20220731165752989\"></p>\n<p>案例：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731165812368.png\" alt=\"image-20220731165812368\"></p>\n<p>组队成功，提交成功</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731165825351.png\" alt=\"image-20220731165825351\"></p>\n<p>组队阶段报错，提交失败</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731165909910.png\" alt=\"image-20220731165909910\"></p>\n<p>组队成功，提交有成功有失败情况</p>\n<h2 id=\"3-事务的错误处理\"><a class=\"markdownIt-Anchor\" href=\"#3-事务的错误处理\">#</a> 3 - 事务的错误处理</h2>\n<p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731165948305.png\" alt=\"image-20220731165948305\"></p>\n<p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731170100577.png\" alt=\"image-20220731170100577\"></p>\n<h2 id=\"4-为什么要做成事务\"><a class=\"markdownIt-Anchor\" href=\"#4-为什么要做成事务\">#</a> 4 - 为什么要做成事务</h2>\n<p>想想一个场景：有很多人有你的账户，同时去参加双十一抢购</p>\n<h2 id=\"5-事务冲突的问题\"><a class=\"markdownIt-Anchor\" href=\"#5-事务冲突的问题\">#</a> 5 - 事务冲突的问题</h2>\n<h3 id=\"1051例子\"><a class=\"markdownIt-Anchor\" href=\"#1051例子\">#</a> 10.5.1.\t例子</h3>\n<p>一个请求想给金额减 8000<br>\n 一个请求想给金额减 5000<br>\n 一个请求想给金额减 1000</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731170212554.png\" alt=\"image-20220731170212554\"></p>\n<h3 id=\"1052悲观锁\"><a class=\"markdownIt-Anchor\" href=\"#1052悲观锁\">#</a> 10.5.2.\t悲观锁</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731170241787.png\" alt=\"image-20220731170241787\"></p>\n<p><code>悲观锁</code>  (Pessimistic Lock),  顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会 block 直到它拿到锁。</p>\n<p><strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如<strong>行锁，表锁等，读锁，写锁</strong>等，都是在做操作之前先上锁。</p>\n<h3 id=\"1053乐观锁\"><a class=\"markdownIt-Anchor\" href=\"#1053乐观锁\">#</a> 10.5.3.\t乐观锁</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731170516369.png\" alt=\"image-20220731170516369\"></p>\n<p><code>乐观锁</code>  (Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用 <code>版本号</code> 等机制。</p>\n<p>乐观锁适用于<strong>多读</strong>的应用类型，<strong>这样可以提高吞吐量</strong>。Redis 就是利用这种<strong> check-and-set 机制</strong>实现事务的。</p>\n<h3 id=\"1054watch-key-key\"><a class=\"markdownIt-Anchor\" href=\"#1054watch-key-key\">#</a> 10.5.4.\tWATCH key [key …]</h3>\n<p>在执行 multi 之前，先执行 watch key1 [key2], 可以监视一个 (或多个) key ，<strong>如果在事务执行之前这个 (或这些) key 被其他命令所改动，那么事务将被打断</strong>。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731170841894.png\" alt=\"image-20220731170841894\"></p>\n<h3 id=\"1055unwatch\"><a class=\"markdownIt-Anchor\" href=\"#1055unwatch\">#</a> 10.5.5.\tunwatch</h3>\n<p>取消 WATCH 命令对所有 key 的监视。</p>\n<p>如果在执行 WATCH 命令之后，EXEC 命令或 DISCARD 命令先被执行了的话，那么就不需要再执行 UNWATCH 了。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2RvYy5yZWRpc2ZhbnMuY29tL3RyYW5zYWN0aW9uL2V4ZWMuaHRtbA==\">http://doc.redisfans.com/transaction/exec.html</span></p>\n<h2 id=\"6-redis事务三特性\"><a class=\"markdownIt-Anchor\" href=\"#6-redis事务三特性\">#</a> 6 - Redis 事务三特性</h2>\n<ul>\n<li>单独的隔离操作\n<ul>\n<li>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>\n</ul>\n</li>\n<li>没有隔离级别的概念\n<ul>\n<li>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li>\n</ul>\n</li>\n<li>不保证原子性\n<ul>\n<li>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"十一-redis_事务_秒杀案例\"><a class=\"markdownIt-Anchor\" href=\"#十一-redis_事务_秒杀案例\">#</a> 十一、Redis_事务_秒杀案例</h1>\n<h2 id=\"1-解决计数器和人员记录的事务操作\"><a class=\"markdownIt-Anchor\" href=\"#1-解决计数器和人员记录的事务操作\">#</a> 1 - 解决计数器和人员记录的事务操作</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731171148364.png\" alt=\"image-20220731171148364\"></p>\n<h2 id=\"2-redis事务秒杀并发模拟\"><a class=\"markdownIt-Anchor\" href=\"#2-redis事务秒杀并发模拟\">#</a> 2 - Redis 事务–秒杀并发模拟</h2>\n<p>使用工具 ab 模拟测试</p>\n<p>CentOS6 默认安装</p>\n<p>CentOS7 需要手动安装</p>\n<h3 id=\"1121联网yum-install-httpd-tools\"><a class=\"markdownIt-Anchor\" href=\"#1121联网yum-install-httpd-tools\">#</a> 11.2.1.\t联网：yum install httpd-tools</h3>\n<h3 id=\"1122无网络\"><a class=\"markdownIt-Anchor\" href=\"#1122无网络\">#</a> 11.2.2.\t无网络</h3>\n<p>（1） 进入 cd  /run/media/root/CentOS 7 x86_64/Packages（路径跟 centos6 不同）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span>  /run/media/root/CentOS <span class=\"token number\">7</span> x86_64/Packages</pre></td></tr></table></figure><p>（2） 顺序安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>apr-1.4.8-3.el7.x86_64.rpm</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>apr-util-1.5.2-6.el7.x86_64.rpm</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>httpd-tools-2.4.6-67.el7.centos.x86_64.rpm</pre></td></tr></table></figure><h3 id=\"1123测试及结果\"><a class=\"markdownIt-Anchor\" href=\"#1123测试及结果\">#</a> 11.2.3.\t测试及结果</h3>\n<p><strong>11.2.3.1.\t通过 ab 测试</strong><br>\n <code>vim postfile </code> 模拟表单提交参数，以 <code>&amp;</code>  符号结尾；存放当前目录。<br>\n** 内容：**prodid=0101&amp;</p>\n<p>ab -n 2000 -c 200  -p ~/postfile -T application/x-www-form-urlencoded <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMi4xMTU6ODA4MS9TZWNraWxsL2Rvc2Vja2lsbA==\">http://192.168.2.115:8081/Seckill/doseckill</span></p>\n<p>表示：- n 参数表示 2000 次请求，-c 参数表示并发请求 200 次，-p 是请求参数，写在当前文件夹的 postfile 文件中</p>\n<p><strong>11.2.3.2.\t超卖</strong><br>\n<img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731171742352.png\" alt=\"image-20220731171742352\"></p>\n<h2 id=\"3-超卖问题\"><a class=\"markdownIt-Anchor\" href=\"#3-超卖问题\">#</a> 3 - 超卖问题</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731171820876.png\" alt=\"image-20220731171820876\"></p>\n<h2 id=\"4-利用乐观锁淘汰用户解决超卖问题\"><a class=\"markdownIt-Anchor\" href=\"#4-利用乐观锁淘汰用户解决超卖问题\">#</a> 4 - 利用乐观锁淘汰用户，解决超卖问题。</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731171831377.png\" alt=\"image-20220731171831377\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 增加乐观锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>qtkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//3. 判断库存</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> qtkeystr <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>qtkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>qtkeystr<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>qtkeystr<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未初始化库存\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> qt <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>qtkeystr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>qt<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已经秒光\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 增加事务</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">Transaction</span> multi <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">multi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//4. 减少库存</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//jedis.decr(qtkey);</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>multi<span class=\"token punctuation\">.</span><span class=\"token function\">decr</span><span class=\"token punctuation\">(</span>qtkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//5. 加人</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//jedis.sadd(usrkey, uid);</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>multi<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span>usrkey<span class=\"token punctuation\">,</span> uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 执行事务</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> multi<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 判断事务提交是否失败</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒杀失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒杀成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731172004110.png\" alt=\"image-20220731172004110\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731172018038.png\" alt=\"image-20220731172018038\"></p>\n<h2 id=\"5-继续增加并发测试\"><a class=\"markdownIt-Anchor\" href=\"#5-继续增加并发测试\">#</a> 5 - 继续增加并发测试</h2>\n<h3 id=\"1151连接有限制\"><a class=\"markdownIt-Anchor\" href=\"#1151连接有限制\">#</a> 11.5.1.\t连接有限制</h3>\n<p>ab -n 2000 -c 200 -k -p postfile -T ‘application/x-www-form-urlencoded’</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMTQwLjE6ODA4MC9zZWNraWxsL2Rvc2Vja2lsbA==\">http://192.168.140.1:8080/seckill/doseckill</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731172350447.png\" alt=\"image-20220731172350447\"></p>\n<p>增加 - r 参数，-r   Don’t exit on socket receive errors.</p>\n<p>ab -n 2000 -c 100 -r -p postfile -T ‘application/x-www-form-urlencoded’</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMTQwLjE6ODA4MC9zZWNraWxsL2Rvc2Vja2lsbA==\">http://192.168.140.1:8080/seckill/doseckill</span></p>\n<h3 id=\"1152已经秒光可是还有库存\"><a class=\"markdownIt-Anchor\" href=\"#1152已经秒光可是还有库存\">#</a> 11.5.2.\t已经秒光，可是还有库存</h3>\n<p>ab -n 2000 -c 100 -p postfile -T ‘application/x-www-form-urlencoded’</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMTM3LjE6ODA4MC9zZWNraWxsL2Rvc2Vja2lsbA==\">http://192.168.137.1:8080/seckill/doseckill</span></p>\n<p>已经秒光，可是还有库存。原因，就是<strong>乐观锁导致很多请求都失败</strong>。先点的没秒到，后点的可能秒到了。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731172717687.png\" alt=\"image-20220731172717687\"></p>\n<h3 id=\"1153连接超时通过连接池解决\"><a class=\"markdownIt-Anchor\" href=\"#1153连接超时通过连接池解决\">#</a> 11.5.3.\t连接超时，通过连接池解决</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731172732412.png\" alt=\"image-20220731172732412\"></p>\n<h3 id=\"1154连接池\"><a class=\"markdownIt-Anchor\" href=\"#1154连接池\">#</a> 11.5.4.\t连接池</h3>\n<p>节省每次连接 redis 服务带来的消耗，把连接好的实例反复利用。</p>\n<p>通过参数管理连接的行为</p>\n<p>代码见项目中</p>\n<ul>\n<li><strong>链接池参数</strong>\n<ul>\n<li><code>MaxTotal</code> ：控制一个 pool 可分配多少个 jedis 实例，通过 **pool.getResource ()** 来获取；如果赋值为 - 1，则表示不限制；如果 pool 已经分配了 MaxTotal 个 jedis 实例，则此时 pool 的状态为 exhausted 。</li>\n<li><code>maxIdle</code> ：控制一个 pool 最多有多少个状态为 idle (空闲) 的 jedis 实例；</li>\n<li><code>MaxWaitMillis</code> ：表示当 borrow 一个 jedis 实例时，最大的等待毫秒数，如果超过等待时间，则直接抛 JedisConnectionException；</li>\n<li><code>testOnBorrow</code> ：获得一个 jedis 实例的时候是否检查连接可用性（ping ()）；如果为 true，则得到的 jedis 实例均是可用的；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-解决库存遗留问题\"><a class=\"markdownIt-Anchor\" href=\"#6-解决库存遗留问题\">#</a> 6 - 解决库存遗留问题</h2>\n<p>** 问题描述：** 由于乐观锁造成的库存遗留问题</p>\n<p>假设现在有 500 个商品要出售，版本号是 1.0，有 2000 个人同时秒杀，其中有 1 个人购买成功并且修改库存为 499，版本号 1.1，那其他的 1999 人都不能成功购买，即有预存但是无法购买，造成的库存预留问题。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220804125018740.png\" alt=\"image-20220804125018740\"></p>\n<p>** 解决：** 用 LUA 脚本，脚本可见 11.7.5 代码</p>\n<h3 id=\"1161lua脚本\"><a class=\"markdownIt-Anchor\" href=\"#1161lua脚本\">#</a> 11.6.1.\tLUA 脚本</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731173040454.png\" alt=\"image-20220731173040454\"></p>\n<p>Lua 是一个小巧的<strong>脚本语言</strong>，Lua 脚本可以很容易的被 C/C++ 代码调用，也可以反过来调用 C/C++ 的函数，Lua 并没有提供强大的库，一个完整的 Lua 解释器不过 200k，所以 Lua 不适合作为开发独立应用程序的语言，而是作为<strong>嵌入式脚本语言</strong>。</p>\n<p>很多应用程序、游戏使用 LUA 作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。</p>\n<p>这其中包括魔兽争霸地图、魔兽世界、博德之门、愤怒的小鸟等众多游戏插件或外挂。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzNjc2Nob29sLmNuL2x1YS8=\">https://www.w3cschool.cn/lua/</span></p>\n<h3 id=\"1162lua脚本在redis中的优势\"><a class=\"markdownIt-Anchor\" href=\"#1162lua脚本在redis中的优势\">#</a> 11.6.2.\tLUA 脚本在 Redis 中的优势</h3>\n<p>将复杂的或者多步的 redis 操作，写为一个脚本，一次提交给 redis 执行，减少反复连接 redis 的次数。提升性能。</p>\n<p><strong>LUA 脚本是类似 redis 事务，有一定的原子性，不会被其他命令插队，可以完成一些 redis 事务性的操作。</strong></p>\n<p>但是注意 redis 的 lua 脚本功能，只有在 Redis 2.6 以上的版本才可以使用。<br>\n利用 lua 脚本淘汰用户，解决<strong>超卖问题</strong>。</p>\n<p>redis 2.6 版本以后，通过 lua 脚本解决<strong>争抢问题</strong>，实际上是<strong> redis 利用其单线程的特性，用任务队列的方式解决多任务并发问题</strong>。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731173328775.png\" alt=\"image-20220731173328775\"></p>\n<h2 id=\"7-redis_事务_秒杀案例_代码\"><a class=\"markdownIt-Anchor\" href=\"#7-redis_事务_秒杀案例_代码\">#</a> 7 - Redis_事务_秒杀案例_代码</h2>\n<h3 id=\"1171项目结构\"><a class=\"markdownIt-Anchor\" href=\"#1171项目结构\">#</a> 11.7.1.\t项目结构</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731173358460.png\" alt=\"image-20220731173358460\"></p>\n<h3 id=\"1172第一版简单版\"><a class=\"markdownIt-Anchor\" href=\"#1172第一版简单版\">#</a> 11.7.2.\t第一版：简单版</h3>\n<p>老师点 10 次，正常秒杀</p>\n<p>同学一起点试一试，秒杀也是正常的。这是因为还达不到并发的效果。</p>\n<p>使用<strong>工具 ab</strong> 模拟并发测试，会出现超卖情况。查看库存会出现<strong>负数</strong>。</p>\n<h3 id=\"1173第二版加事务-乐观锁解决超卖但出现遗留库存和连接超时\"><a class=\"markdownIt-Anchor\" href=\"#1173第二版加事务-乐观锁解决超卖但出现遗留库存和连接超时\">#</a> 11.7.3.\t第二版：加事务 - 乐观锁 (解决超卖), 但出现遗留库存和连接超时</h3>\n<h3 id=\"1174第三版连接池解决超时问题\"><a class=\"markdownIt-Anchor\" href=\"#1174第三版连接池解决超时问题\">#</a> 11.7.4.\t第三版：连接池解决超时问题</h3>\n<h3 id=\"1175第四版解决库存遗留问题lua脚本\"><a class=\"markdownIt-Anchor\" href=\"#1175第四版解决库存遗留问题lua脚本\">#</a> 11.7.5.\t第四版：解决库存遗留问题，LUA 脚本</h3>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> userid<span class=\"token operator\">=</span>KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> prodid<span class=\"token operator\">=</span>KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">local</span> qtkey<span class=\"token operator\">=</span><span class=\"token string\">\"sk:\"</span><span class=\"token operator\">..</span>prodid<span class=\"token operator\">..</span><span class=\"token string\">\":qt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">local</span> usersKey<span class=\"token operator\">=</span><span class=\"token string\">\"sk:\"</span><span class=\"token operator\">..</span>prodid<span class=\"token punctuation\">.</span>\"<span class=\"token punctuation\">:</span>usr'<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">local</span> userExists<span class=\"token operator\">=</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sismember\"</span><span class=\"token punctuation\">,</span>usersKey<span class=\"token punctuation\">,</span>userid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token function\">tonumber</span><span class=\"token punctuation\">(</span>userExists<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token keyword\">then</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">local</span> num<span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span> <span class=\"token punctuation\">,</span>qtkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token function\">tonumber</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span> <span class=\"token keyword\">then</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">else</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decr\"</span><span class=\"token punctuation\">,</span>qtkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sadd\"</span><span class=\"token punctuation\">,</span>usersKey<span class=\"token punctuation\">,</span>userid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"十二-redis持久化之rdb\"><a class=\"markdownIt-Anchor\" href=\"#十二-redis持久化之rdb\">#</a> 十二、Redis 持久化之 RDB</h1>\n<h2 id=\"1-总体介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-总体介绍\">#</a> 1 - 总体介绍</h2>\n<p>官网介绍：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5yZWRpcy5pbw==\">http://www.redis.io</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731173617123.png\" alt=\"image-20220731173617123\"></p>\n<p>Redis 提供了 2 个不同形式的持久化方式。</p>\n<ul>\n<li>RDB（Redis DataBase）</li>\n<li>AOF（Append Of File）</li>\n</ul>\n<h2 id=\"2-rdbredis-database\"><a class=\"markdownIt-Anchor\" href=\"#2-rdbredis-database\">#</a> 2 - RDB（Redis DataBase）</h2>\n<h3 id=\"1221官网介绍\"><a class=\"markdownIt-Anchor\" href=\"#1221官网介绍\">#</a> 12.2.1.\t官网介绍</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731173702411.png\" alt=\"image-20220731173702411\"></p>\n<h3 id=\"1222是什么\"><a class=\"markdownIt-Anchor\" href=\"#1222是什么\">#</a> 12.2.2.\t是什么</h3>\n<p>在指定的<strong>时间间隔</strong>内将内存中的数据集<strong>快照</strong>写入磁盘， 也就是行话讲的 Snapshot 快照，它恢复时是将快照文件直接读到内存里</p>\n<h3 id=\"1223备份是如何执行的\"><a class=\"markdownIt-Anchor\" href=\"#1223备份是如何执行的\">#</a> 12.2.3.\t备份是如何执行的</h3>\n<p>Redis 会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个<strong>临时文件</strong>中，待持久化过程都结束了，再用这个<strong>临时文件替换上次持久化好的文件</strong>。 整个过程中，主进程是不进行任何 IO 操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。</p>\n<p><strong>RDB 的缺点是最后一次持久化后的数据可能丢失</strong>。</p>\n<h3 id=\"1224fork\"><a class=\"markdownIt-Anchor\" href=\"#1224fork\">#</a> 12.2.4.\tFork</h3>\n<ul>\n<li>Fork 的作用是<strong>复制</strong>一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并<strong>作为原进程的子进程</strong></li>\n<li>在 Linux 程序中，fork () 会产生一个和父进程完全相同的子进程，但子进程在此后多会 exec 系统调用，出于效率考虑，Linux 中引入了 “<strong>写时复制技术</strong>”</li>\n<li><strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</li>\n</ul>\n<h3 id=\"1225rdb持久化流程\"><a class=\"markdownIt-Anchor\" href=\"#1225rdb持久化流程\">#</a> 12.2.5.\tRDB 持久化流程</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731174221520.png\" alt=\"image-20220731174221520\"></p>\n<h3 id=\"1226dumprdb文件\"><a class=\"markdownIt-Anchor\" href=\"#1226dumprdb文件\">#</a> 12.2.6.\tdump.rdb 文件</h3>\n<p>在 redis.conf 中配置文件名称，默认为 dump.rdb</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731174310211.png\" alt=\"image-20220731174310211\"></p>\n<h3 id=\"1227配置位置\"><a class=\"markdownIt-Anchor\" href=\"#1227配置位置\">#</a> 12.2.7.\t配置位置</h3>\n<p>rdb 文件的保存路径，也可以修改。默认为 Redis 启动时命令行所在的目录下<br>\n dir “/myredis/”</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731174540479.png\" alt=\"image-20220731174540479\"></p>\n<h3 id=\"1228如何触发rdb快照保持策略\"><a class=\"markdownIt-Anchor\" href=\"#1228如何触发rdb快照保持策略\">#</a> 12.2.8.\t如何触发 RDB 快照；保持策略</h3>\n<p><strong>12.2.8.1.\t配置文件中默认的快照配置</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731174621350.png\" alt=\"image-20220731174621350\"></p>\n<p><strong>12.2.8.2.\t命令 save VS bgsave</strong></p>\n<p><code>save</code>  ：save 时只管保存，其它不管，全部阻塞。手动保存。不建议。</p>\n<p><code>bgsave</code> ：Redis 会在后台异步进行快照操作， <strong>快照同时还可以响应客户端请求。</strong></p>\n<p>可以通过 lastsave 命令获取最后一次成功执行快照的时间</p>\n<p><strong>12.2.8.3.\tflushall 命令</strong></p>\n<p>执行 flushall 命令，也会产生 dump.rdb 文件，但里面是空的，无意义</p>\n<p><strong>12.2.8.4.\t###SNAPSHOTTING 快照 ###</strong></p>\n<p><strong>12.2.8.5.\tSave</strong></p>\n<p>格式：save 秒钟 写操作次数</p>\n<p>RDB 是整个内存的压缩过的 Snapshot，RDB 的数据结构，可以配置复合的快照触发条件，</p>\n<p><strong>默认是 1 分钟内改了 1 万次，或 5 分钟内改了 10 次，或 15 分钟内改了 1 次。</strong></p>\n<p><strong>禁用：不设置 save 指令，或者给 save 传入空字符串</strong></p>\n<p><strong>12.2.8.6.\tstop-writes-on-bgsave-error</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731175145278.png\" alt=\"image-20220731175145278\"></p>\n<p>当 Redis 无法写入磁盘的话，直接关掉 Redis 的写操作。推荐 yes.</p>\n<p><strong>12.2.8.7.\trdbcompression 压缩文件</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731175201409.png\" alt=\"image-20220731175201409\"></p>\n<p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis 会采用 <code>LZF算法</code> 进行压缩。</p>\n<p>如果你不想消耗 CPU 来进行压缩的话，可以设置为关闭此功能。推荐 yes.</p>\n<p><strong>12.2.8.8.\trdbchecksum 检查完整性</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731175342119.png\" alt=\"image-20220731175342119\"></p>\n<p>在存储快照后，还可以让 redis 使用 <code>CRC64算法</code> 来进行数据校验，</p>\n<p>但是这样做会增加大约 10% 的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能 。推荐 yes.</p>\n<p><strong>12.2.8.9.\trdb 的备份</strong></p>\n<p>先通过 config get dir  查询 rdb 文件的目录</p>\n<p>将 *.rdb 的文件拷贝到别的地方</p>\n<p>rdb 的恢复</p>\n<ul>\n<li>关闭 Redis</li>\n<li>先把备份的文件拷贝到工作目录下  <code>cp dump2.rdb dump.rdb</code></li>\n<li>启动 Redis, 备份数据会直接加载</li>\n</ul>\n<h3 id=\"1229优势\"><a class=\"markdownIt-Anchor\" href=\"#1229优势\">#</a> 12.2.9.\t优势</h3>\n<ul>\n<li>适合大规模的数据恢复</li>\n<li>对数据完整性和一致性要求不高更适合使用</li>\n<li>节省磁盘空间</li>\n<li>恢复速度快</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731175646400.png\" alt=\"image-20220731175646400\"></p>\n<h3 id=\"12210劣势\"><a class=\"markdownIt-Anchor\" href=\"#12210劣势\">#</a> 12.2.10.\t劣势</h3>\n<ul>\n<li>\n<p>Fork 的时候，内存中的数据被克隆了一份，大致 2 倍的膨胀性需要考虑</p>\n</li>\n<li>\n<p>虽然 Redis 在 fork 时使用了<strong>写时拷贝技术</strong>，但是如果数据庞大时还是比较消耗性能</p>\n</li>\n<li>\n<p><strong>在备份周期在一定间隔时间做一次备份，所以如果 Redis 意外 down 掉的话，就会丢失最后一次快照后的所有修改</strong>。</p>\n</li>\n</ul>\n<h3 id=\"12211如何停止\"><a class=\"markdownIt-Anchor\" href=\"#12211如何停止\">#</a> 12.2.11.\t如何停止</h3>\n<p>动态停止 RDB： <code>redis-cli config set save &quot;&quot; </code>  #save 后给空值，表示禁用保存策略</p>\n<h3 id=\"12212小总结\"><a class=\"markdownIt-Anchor\" href=\"#12212小总结\">#</a> 12.2.12.\t小总结</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731175756853.png\" alt=\"image-20220731175756853\"></p>\n<h1 id=\"十三-redis持久化之aof\"><a class=\"markdownIt-Anchor\" href=\"#十三-redis持久化之aof\">#</a> 十三、Redis 持久化之 AOF</h1>\n<h2 id=\"1-aofappend-only-file\"><a class=\"markdownIt-Anchor\" href=\"#1-aofappend-only-file\">#</a> 1 - AOF（Append Only File）</h2>\n<h3 id=\"1311是什么\"><a class=\"markdownIt-Anchor\" href=\"#1311是什么\">#</a> 13.1.1.\t是什么</h3>\n<p>以<strong>日志的形式来记录每个写操作（增量保存）</strong>，将 Redis 执行过的所有写指令记录下来 (<strong>读操作不记录</strong>)， <strong>只许追加文件但不可以改写文件</strong>，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将<strong>写指令</strong>从前到后执行一次以完成数据的恢复工作</p>\n<h3 id=\"1312aof持久化流程\"><a class=\"markdownIt-Anchor\" href=\"#1312aof持久化流程\">#</a> 13.1.2.\tAOF 持久化流程</h3>\n<p>（1）客户端的请求写命令会被 append 追加到 AOF 缓冲区内；</p>\n<p>（2）AOF 缓冲区根据 AOF 持久化策略 [always,everysec,no] 将操作 sync 同步到磁盘的 AOF 文件中；</p>\n<p>（3）AOF 文件大小超过重写策略或手动重写时，会对 AOF 文件 rewrite 重写，压缩 AOF 文件容量；</p>\n<p>（4）Redis 服务重启时，会重新 load 加载 AOF 文件中的写操作达到数据恢复的目的；</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731180326215.png\" alt=\"image-20220731180326215\"></p>\n<h3 id=\"1313aof默认不开启\"><a class=\"markdownIt-Anchor\" href=\"#1313aof默认不开启\">#</a> 13.1.3.\tAOF 默认不开启</h3>\n<p>可以在 redis.conf 中配置文件名称，默认为  <code>appendonly.aof</code></p>\n<p>AOF 文件的保存路径，同 RDB 的路径一致。</p>\n<h3 id=\"1314aof和rdb同时开启redis听谁的\"><a class=\"markdownIt-Anchor\" href=\"#1314aof和rdb同时开启redis听谁的\">#</a> 13.1.4.\tAOF 和 RDB 同时开启，redis 听谁的？</h3>\n<p>AOF 和 RDB 同时开启，系统默认取 AOF 的数据（数据不会存在丢失）</p>\n<h3 id=\"1315aof启动修复恢复\"><a class=\"markdownIt-Anchor\" href=\"#1315aof启动修复恢复\">#</a> 13.1.5.\tAOF 启动 / 修复 / 恢复</h3>\n<ul>\n<li>\n<p>AOF 的备份机制和性能虽然和 RDB 不同，但是备份和恢复的操作同 RDB 一样，都是拷贝备份文件，需要恢复时再拷贝到 Redis 工作目录下，启动系统即加载。</p>\n</li>\n<li>\n<p>正常恢复</p>\n<ul>\n<li>修改默认的 appendonly no，改为 yes</li>\n<li>将有数据的 aof 文件复制一份保存到对应目录 (查看目录：config get dir)</li>\n<li>恢复：重启 redis 然后重新加载</li>\n</ul>\n</li>\n<li>\n<p>异常恢复</p>\n<ul>\n<li>修改默认的 appendonly no，改为 yes</li>\n<li>如遇到<strong> AOF 文件损坏</strong>，通过 /<strong>usr/local/bin/redis-check-aof–fix appendonly.aof</strong> 进行恢复</li>\n<li>备份被写坏的 AOF 文件</li>\n<li>恢复：重启 redis，然后重新加载</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1316aof同步频率设置\"><a class=\"markdownIt-Anchor\" href=\"#1316aof同步频率设置\">#</a> 13.1.6.\tAOF 同步频率设置</h3>\n<p><code>appendfsync always</code> <br>\n 始终同步，每次 Redis 的写入都会立刻记入日志；性能较差但数据完整性比较好<br>\n <code>appendfsync everysec</code> <br>\n 每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。<br>\n <code>appendfsync no</code> <br>\nredis 不主动进行同步，把同步时机交给操作系统。</p>\n<h3 id=\"1317rewrite压缩\"><a class=\"markdownIt-Anchor\" href=\"#1317rewrite压缩\">#</a> 13.1.7.\tRewrite 压缩</h3>\n<ol>\n<li>\n<p>是什么：<br>\nAOF 采用<strong>文件追加</strong>方式，文件会越来越大为避免出现此种情况，新增了<strong>重写机制</strong>，当 AOF 文件的大小超过所设定的阈值时，Redis 就会启动 AOF 文件的<strong>内容压缩</strong>， 只保留可以恢复数据的<strong>最小指令集</strong>。可以使用命令 <code>bgrewriteaof</code></p>\n</li>\n<li>\n<p>重写原理，如何实现重写<br>\n AOF 文件持续增长而过大时，会 fork 出一条新进程来将文件重写 (也是先写临时文件最后再 rename)，<strong>redis4.0 版本后的重写，是指上就是把 rdb 的快照，以二级制的形式附在新的 aof 头部，作为已有的历史数据，替换掉原来的流水账操作</strong>。</p>\n<p><code>no-appendfsync-on-rewrite</code> ：<br>\n如果 no-appendfsync-on-rewrite=yes , 不写入 aof 文件只写入 <code>缓存</code> ，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（<strong>降低数据安全性，提高性能</strong>）</p>\n<p>​\t如果 no-appendfsync-on-rewrite=no,  还是会把数据往 <code>磁盘</code> 里刷，但是遇到重写操作，可能会发生阻塞。（<strong>数据安全，但是性能降低</strong>）</p>\n<p>触发机制，何时重写</p>\n<p>Redis 会记录上次重写时的 AOF 大小，默认配置是当 AOF 文件大小是上次 rewrite 后大小的一倍且文件大于 64M 时触发</p>\n<p>重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定 Redis 要满足一定条件才会进行重写。</p>\n<p><code>auto-aof-rewrite-percentage</code> ：设置重写的基准值，文件达到 100% 时开始重写（文件是原来重写后文件的 2 倍时触发）</p>\n<p><code>auto-aof-rewrite-min-size</code> ：设置重写的基准值，最小文件 64MB。达到这个值开始重写。</p>\n<p>** 例如：** 文件达到 70MB 开始重写，降到 50MB，下次什么时候开始重写？100MB</p>\n<p>系统载入时或者上次重写完毕时，Redis 会记录此时 AOF 大小，设为 base_size,</p>\n<p>如果 Redis 的 AOF 当前大小 &gt;= base_size +base_size*100% (默认) 且当前大小 &gt;=64mb (默认) 的情况下，Redis 会对 AOF 进行重写。</p>\n</li>\n<li>\n<p>重写流程<br>\n（1）bgrewriteaof 触发重写，判断是否当前有 bgsave 或 bgrewriteaof 在运行，如果有，则等待该命令结束后再继续执行。</p>\n<p>（2）主进程 fork 出子进程执行重写操作，保证主进程不会阻塞。</p>\n<p>（3）子进程遍历 redis 内存中数据到临时文件，客户端的写请求同时写入 aof_buf 缓冲区和 aof_rewrite_buf 重写缓冲区保证原 AOF 文件完整以及新 AOF 文件生成期间的新的数据修改动作不会丢失。</p>\n<p>（4）1). 子进程写完新的 AOF 文件后，向主进程发信号，父进程更新统计信息。2). 主进程把 aof_rewrite_buf 中的数据写入到新的 AOF 文件。</p>\n<p>（5）使用新的 AOF 文件覆盖旧的 AOF 文件，完成 AOF 重写。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731213215703.png\" alt=\"image-20220731213215703\"></p>\n</li>\n</ol>\n<h3 id=\"1318优势\"><a class=\"markdownIt-Anchor\" href=\"#1318优势\">#</a> 13.1.8.\t优势</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731213229824.png\" alt=\"image-20220731213229824\"></p>\n<ul>\n<li>\n<p>备份机制更稳健，丢失数据概率更低。</p>\n</li>\n<li>\n<p>可读的日志文本，通过操作 AOF 稳健，可以处理误操作。</p>\n</li>\n</ul>\n<h3 id=\"1319劣势\"><a class=\"markdownIt-Anchor\" href=\"#1319劣势\">#</a> 13.1.9.\t劣势</h3>\n<ul>\n<li>比起 RDB 占用更多的磁盘空间。</li>\n<li>恢复备份速度要慢。</li>\n<li>每次读写都同步的话，有一定的性能压力。</li>\n<li>存在个别 Bug，造成恢复不能。</li>\n</ul>\n<h3 id=\"13110-小总结\"><a class=\"markdownIt-Anchor\" href=\"#13110-小总结\">#</a> 13.1.10.\t  小总结</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731213332159.png\" alt=\"image-20220731213332159\"></p>\n<h2 id=\"2-总结which-one\"><a class=\"markdownIt-Anchor\" href=\"#2-总结which-one\">#</a> 2 - 总结 (Which one)</h2>\n<h3 id=\"1321用哪个好\"><a class=\"markdownIt-Anchor\" href=\"#1321用哪个好\">#</a> 13.2.1.\t用哪个好</h3>\n<p>官方推荐两个都启用。</p>\n<p>如果对数据不敏感，可以选单独用 RDB。</p>\n<p>不建议单独用 AOF，因为可能会出现 Bug。</p>\n<p>如果只是做纯内存缓存，可以都不用。</p>\n<h3 id=\"1322官网建议\"><a class=\"markdownIt-Anchor\" href=\"#1322官网建议\">#</a> 13.2.2.\t官网建议</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731213526710.png\" alt=\"image-20220731213526710\"></p>\n<ul>\n<li>RDB 持久化方式能够在指定的时间间隔能对你的数据进行快照存储</li>\n<li>AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF 命令以 redis 协议追加保存每次写的操作到文件末尾.</li>\n<li>Redis 还能对 AOF 文件进行后台重写，使得 AOF 文件的体积不至于过大</li>\n<li>只做缓存：如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式.</li>\n<li>同时开启两种持久化方式</li>\n<li>在这种情况下，当 redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整.</li>\n<li>RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件。那要不要只使用 AOF 呢？</li>\n<li>建议不要，因为 RDB 更适合用于备份数据库 (AOF 在不断变化不好备份)， 快速重启，而且不会有 AOF 可能潜在的 bug，留着作为一个万一的手段。</li>\n<li>性能建议</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731213730871.png\" alt=\"image-20220731213730871\"></p>\n<h1 id=\"十四-redis_主从复制\"><a class=\"markdownIt-Anchor\" href=\"#十四-redis_主从复制\">#</a> 十四、Redis_主从复制</h1>\n<h2 id=\"1-是什么\"><a class=\"markdownIt-Anchor\" href=\"#1-是什么\">#</a> 1 - 是什么</h2>\n<p>主机数据更新后根据配置和策略， 自动同步到备机的<strong> master/slaver 机制，Master 以写为主，Slave 以读为主</strong></p>\n<h2 id=\"2-能干嘛\"><a class=\"markdownIt-Anchor\" href=\"#2-能干嘛\">#</a> 2 - 能干嘛</h2>\n<ul>\n<li>读写分离，性能扩展</li>\n<li>容灾快速恢复</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731213848099.png\" alt=\"image-20220731213848099\"></p>\n<h2 id=\"3-怎么玩主从复制\"><a class=\"markdownIt-Anchor\" href=\"#3-怎么玩主从复制\">#</a> 3 - 怎么玩：主从复制</h2>\n<ol>\n<li>\n<p>拷贝多个 redis.conf 文件 include (写绝对路径)</p>\n</li>\n<li>\n<p>开启 daemonize yes</p>\n</li>\n<li>\n<p>Pid 文件名字 pidfile</p>\n</li>\n<li>\n<p>指定端口 port</p>\n</li>\n<li>\n<p>Log 文件名字</p>\n</li>\n<li>\n<p>dump.rdb 名字 dbfilename</p>\n</li>\n<li>\n<p>Appendonly 关掉或者换名字</p>\n</li>\n</ol>\n<h3 id=\"1431新建redis6379conf填写以下内容\"><a class=\"markdownIt-Anchor\" href=\"#1431新建redis6379conf填写以下内容\">#</a> 14.3.1.\t新建 redis6379.conf，填写以下内容</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>include /myredis/redis.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pidfile /var/run/redis_6379.pid</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>port <span class=\"token number\">6379</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dbfilename dump6379.rdb</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731214026263.png\" alt=\"image-20220731214026263\"></p>\n<h3 id=\"1432新建redis6380conf填写以下内容\"><a class=\"markdownIt-Anchor\" href=\"#1432新建redis6380conf填写以下内容\">#</a> 14.3.2.\t新建 redis6380.conf，填写以下内容</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731214039132.png\" alt=\"image-20220731214039132\"></p>\n<h3 id=\"1433新建redis6381conf填写以下内容\"><a class=\"markdownIt-Anchor\" href=\"#1433新建redis6381conf填写以下内容\">#</a> 14.3.3.\t新建 redis6381.conf，填写以下内容</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731214050893.png\" alt=\"image-20220731214050893\"></p>\n<p><strong>slave-priority 10</strong></p>\n<p><strong>设置从机的优先级，值越小，优先级越高，用于选举主机时使用。默认 100</strong></p>\n<h3 id=\"1434启动三台redis服务器\"><a class=\"markdownIt-Anchor\" href=\"#1434启动三台redis服务器\">#</a> 14.3.4.\t启动三台 redis 服务器</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731233845060.png\" alt=\"image-20220731233845060\"></p>\n<h3 id=\"1435查看系统进程看看三台服务器是否启动\"><a class=\"markdownIt-Anchor\" href=\"#1435查看系统进程看看三台服务器是否启动\">#</a> 14.3.5.\t查看系统进程，看看三台服务器是否启动</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731233859352.png\" alt=\"image-20220731233859352\"></p>\n<h3 id=\"1436查看三台主机运行情况\"><a class=\"markdownIt-Anchor\" href=\"#1436查看三台主机运行情况\">#</a> 14.3.6.\t查看三台主机运行情况</h3>\n<p><code>info replication</code> <br>\n 打印主从复制的相关信息</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731233920372.png\" alt=\"image-20220731233920372\"></p>\n<h3 id=\"1437配从库不配主库\"><a class=\"markdownIt-Anchor\" href=\"#1437配从库不配主库\">#</a> 14.3.7.\t配从 (库) 不配主 (库)</h3>\n<p><code>slaveof  &lt;ip&gt;&lt;port&gt;</code></p>\n<p>成为某个实例的从服务器</p>\n<p>1、在 6380 和 6381 上执行 :  slaveof 127.0.0.1 6379</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731233955771.png\" alt=\"image-20220731233955771\"></p>\n<p>2、在主机上写，在从机上可以读取数据</p>\n<p>在从机上写数据报错</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731234014747.png\" alt=\"image-20220731234014747\"></p>\n<p>3、主机挂掉，重启就行，一切如初</p>\n<p>4、从机重启需重设：slaveof 127.0.0.1 6379</p>\n<p>可以将配置增加到文件中。永久生效。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731234028351.png\" alt=\"image-20220731234028351\"></p>\n<h2 id=\"4-常用3招\"><a class=\"markdownIt-Anchor\" href=\"#4-常用3招\">#</a> 4 - 常用 3 招</h2>\n<h3 id=\"1441一主二仆\"><a class=\"markdownIt-Anchor\" href=\"#1441一主二仆\">#</a> 14.4.1.\t一主二仆</h3>\n<p>切入点问题？slave1、slave2 是从头开始复制还是从切入点开始复制？比如从 k4 进来，那之前的 k1,k2,k3 是否也可以复制？</p>\n<p>从机是否可以写？set 可否？</p>\n<p>主机 shutdown 后情况如何？从机是上位还是原地待命？</p>\n<p>主机又回来了后，主机新增记录，从机还能否顺利复制？</p>\n<p>其中一台从机 down 后情况如何？依照原有它能跟上大部队吗？</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801105448121.png\" alt=\"image-20220801105448121\"></p>\n<h3 id=\"1442薪火相传\"><a class=\"markdownIt-Anchor\" href=\"#1442薪火相传\">#</a> 14.4.2.\t薪火相传</h3>\n<p>上一个 Slave 可以是下一个 slave 的 Master，Slave 同样可以接收其他 slaves 的连接和同步请求，那么该 slave 作为了链条中下一个的 master, 可以有效减轻 master 的写压力，去中心化降低风险。</p>\n<p>用 <code> slaveof  &lt;ip&gt;&lt;port&gt;</code> <br>\n 中途变更转向：会清除之前的数据，重新建立拷贝最新的</p>\n<p>风险是一旦某个 slave 宕机，后面的 slave 都没法备份</p>\n<p>主机挂了，从机还是从机，无法写数据了</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801105607960.png\" alt=\"image-20220801105607960\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801105732231.png\" alt=\"image-20220801105732231\"></p>\n<h3 id=\"1443反客为主\"><a class=\"markdownIt-Anchor\" href=\"#1443反客为主\">#</a> 14.4.3.\t反客为主</h3>\n<p>当一个 master 宕机后，后面的 slave 可以立刻升为 master，其后面的 slave 不用做任何修改。(手动)</p>\n<p>用  <code>slaveof no one</code>   将从机变为主机。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801105740685.png\" alt=\"image-20220801105740685\"></p>\n<h2 id=\"5-复制原理\"><a class=\"markdownIt-Anchor\" href=\"#5-复制原理\">#</a> 5 - 复制原理</h2>\n<ul>\n<li>Slave 启动成功连接到 master 后会发送一个 sync 命令</li>\n<li>Master 接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master 将传送整个数据文件到 slave, 以完成一次完全同步</li>\n<li>全量复制：而 slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li>\n<li>增量复制：Master 继续将新的所有收集到的修改命令依次传给 slave, 完成同步</li>\n<li>但是只要是重新连接 master, 一次完全同步（全量复制) 将被自动执行</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801105844173.png\" alt=\"image-20220801105844173\"></p>\n<h2 id=\"6-哨兵模式sentinel\"><a class=\"markdownIt-Anchor\" href=\"#6-哨兵模式sentinel\">#</a> 6 - 哨兵模式 (sentinel)</h2>\n<h3 id=\"1461是什么\"><a class=\"markdownIt-Anchor\" href=\"#1461是什么\">#</a> 14.6.1.\t是什么</h3>\n<p><strong>反客为主的自动版</strong>，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801110018170.png\" alt=\"image-20220801110018170\"></p>\n<h3 id=\"1462怎么玩使用步骤\"><a class=\"markdownIt-Anchor\" href=\"#1462怎么玩使用步骤\">#</a> 14.6.2.\t怎么玩 (使用步骤)</h3>\n<p><strong>14.6.2.1.\t调整为一主二仆模式，6379 带着 6380、6381</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801110034320.png\" alt=\"image-20220801110034320\"></p>\n<p><strong>14.6.2.2.\t自定义的 /myredis 目录下新建 sentinel.conf 文件，名字绝不能错</strong></p>\n<p><strong>14.6.2.3.\t配置哨兵，填写内容</strong></p>\n<p>sentinel monitor mymaster 127.0.0.1 6379 1</p>\n<p>其中 mymaster 为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。</p>\n<p><strong>14.6.2.4.\t启动哨兵</strong></p>\n<p>/usr/local/bin</p>\n<p>redis 做压测可以用自带的<strong> redis-benchmark</strong> 工具</p>\n<p>执行<strong> redis-sentinel  /myredis/sentinel.conf</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801110305367.png\" alt=\"image-20220801110305367\"></p>\n<p><strong>14.6.2.5.\t当主机挂掉，从机选举中产生新的主机</strong></p>\n<p>(大概 10 秒左右可以看到哨兵窗口日志，切换了新的主机)</p>\n<p>哪个从机会被选举为主机呢？根据优先级别： <code>replica-priority </code></p>\n<p><strong>原主机重启后会变为从机。</strong></p>\n<p><strong>14.6.2.6.\t复制延时</strong></p>\n<p>由于所有的<strong>写操作</strong>都是先在 Master 上操作，然后同步更新到 Slave 上，所以从 Master 同步到 Slave 机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave 机器数量的增加也会使这个问题更加严重。</p>\n<h3 id=\"1463故障恢复\"><a class=\"markdownIt-Anchor\" href=\"#1463故障恢复\">#</a> 14.6.3.\t故障恢复</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801110846257.png\" alt=\"image-20220801110846257\"></p>\n<p><code>优先级</code> 在 redis.conf 中默认：replica-priority 100，值越小优先级越高</p>\n<p><code>偏移量</code> 是指获得原主机数据最全的</p>\n<p>每个 redis 实例启动后都会随机生成一个 40 位的 <code>runid</code></p>\n<h3 id=\"1464主从复制\"><a class=\"markdownIt-Anchor\" href=\"#1464主从复制\">#</a> 14.6.4.\t主从复制</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">JedisSentinelPool</span> jedisSentinelPool<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span>  <span class=\"token class-name\">Jedis</span> <span class=\"token function\">getJedisFromSentinel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>jedisSentinelPool<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sentinelSet<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        sentinelSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.11.103:26379\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">JedisPoolConfig</span> jedisPoolConfig <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        jedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大可用连接数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> \t\tjedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大闲置连接数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tjedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMinIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最小闲置连接数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tjedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setBlockWhenExhausted</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接耗尽是否等待</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tjedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxWaitMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等待时间</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tjedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setTestOnBorrow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取连接的时候进行一下测试 ping pong</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tjedisSentinelPool<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisSentinelPool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mymaster\"</span><span class=\"token punctuation\">,</span>sentinelSet<span class=\"token punctuation\">,</span>jedisPoolConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> jedisSentinelPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> jedisSentinelPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"十五-redis集群\"><a class=\"markdownIt-Anchor\" href=\"#十五-redis集群\">#</a> 十五、Redis 集群</h1>\n<h2 id=\"1-问题\"><a class=\"markdownIt-Anchor\" href=\"#1-问题\">#</a> 1 - 问题</h2>\n<p>容量不够，redis 如何进行扩容？</p>\n<p>并发写操作， redis 如何分摊？</p>\n<p><strong>另外，主从模式，薪火相传模式，主机宕机，导致 ip 地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。</strong></p>\n<p>之前通过代理主机来解决，但是 redis3.0 中提供了解决方案。就是无中心化集群配置。</p>\n<h2 id=\"2-什么是集群\"><a class=\"markdownIt-Anchor\" href=\"#2-什么是集群\">#</a> 2 - 什么是集群</h2>\n<p>Redis 集群实现了对 Redis 的水平扩容，即启动 N 个 redis 节点，将整个数据库分布存储在这 N 个节点中，每个节点存储总数据的 1/N。</p>\n<p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p>\n<h2 id=\"3-删除持久化数据\"><a class=\"markdownIt-Anchor\" href=\"#3-删除持久化数据\">#</a> 3 - 删除持久化数据</h2>\n<p>将 rdb,aof 文件都删除掉。</p>\n<h2 id=\"4-制作6个实例637963806381638963906391\"><a class=\"markdownIt-Anchor\" href=\"#4-制作6个实例637963806381638963906391\">#</a> 4 - 制作 6 个实例，6379,6380,6381,6389,6390,6391</h2>\n<h3 id=\"1541配置基本信息\"><a class=\"markdownIt-Anchor\" href=\"#1541配置基本信息\">#</a> 15.4.1.\t配置基本信息</h3>\n<blockquote>\n<ol>\n<li>开启 daemonize yes</li>\n<li>Pid 文件名字</li>\n<li>指定端口</li>\n<li>Log 文件名字</li>\n<li>Dump.rdb 名字</li>\n<li>Appendonly 关掉或者换名字</li>\n</ol>\n</blockquote>\n<h3 id=\"1542redis-cluster配置修改\"><a class=\"markdownIt-Anchor\" href=\"#1542redis-cluster配置修改\">#</a> 15.4.2.\tredis cluster 配置修改</h3>\n<blockquote>\n<ol>\n<li>cluster-enabled yes    打开集群模式</li>\n<li>cluster-config-file nodes-6379.conf  设定节点配置文件名</li>\n<li>cluster-node-timeout 15000   设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>include /home/bigdata/redis.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>port <span class=\"token number\">6379</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pidfile <span class=\"token string\">\"/var/run/redis_6379.pid\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dbfilename <span class=\"token string\">\"dump6379.rdb\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">dir</span> <span class=\"token string\">\"/home/bigdata/redis_cluster\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>logfile <span class=\"token string\">\"/home/bigdata/redis_cluster/redis_err_6379.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>clu - ster-enabled <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cluster-config-file nodes-6379.conf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cluster-node-timeout <span class=\"token number\">15000</span></pre></td></tr></table></figure><h3 id=\"1543修改好redis6379conf文件拷贝多个redisconf文件\"><a class=\"markdownIt-Anchor\" href=\"#1543修改好redis6379conf文件拷贝多个redisconf文件\">#</a> 15.4.3.\t修改好 redis6379.conf 文件，拷贝多个 redis.conf 文件</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801113056666.png\" alt=\"image-20220801113056666\"></p>\n<h3 id=\"1544使用查找替换修改另外5个文件\"><a class=\"markdownIt-Anchor\" href=\"#1544使用查找替换修改另外5个文件\">#</a> 15.4.4.\t使用查找替换修改另外 5 个文件</h3>\n<p>例如：:% s/6379/6380</p>\n<h3 id=\"1545启动6个redis服务\"><a class=\"markdownIt-Anchor\" href=\"#1545启动6个redis服务\">#</a> 15.4.5.\t启动 6 个 redis 服务</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801113121076.png\" alt=\"image-20220801113121076\"></p>\n<h2 id=\"5-将六个节点合成一个集群\"><a class=\"markdownIt-Anchor\" href=\"#5-将六个节点合成一个集群\">#</a> 5 - 将六个节点合成一个集群</h2>\n<p>组合之前，请确保所有 redis 实例启动后，nodes-xxxx.conf 文件都生成正常。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801113311052.png\" alt=\"image-20220801113311052\"></p>\n<ul>\n<li>合体：</li>\n</ul>\n<p>cd  /opt/redis-6.2.1/src</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>redis-cli <span class=\"token parameter variable\">--cluster</span> create --cluster-replicas <span class=\"token number\">1</span> <span class=\"token number\">192.168</span>.11.101:6379 <span class=\"token number\">192.168</span>.11.101:6380 <span class=\"token number\">192.168</span>.11.101:6381 <span class=\"token number\">192.168</span>.11.101:6389 <span class=\"token number\">192.168</span>.11.101:6390 <span class=\"token number\">192.168</span>.11.101:6391</pre></td></tr></table></figure><p>此处不要用 127.0.0.1， 请用真实 IP 地址<br>\n–replicas 1 采用最简单的方式配置集群，一台主机，一台从机，正好三组。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801113349156.png\" alt=\"image-20220801113349156\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801113414617.png\" alt=\"image-20220801113414617\"></p>\n<ul>\n<li>普通方式登录<br>\n可能直接进入读主机，存储数据时，会出现 MOVED 重定向操作。所以，应该以集群方式登录。</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801113425849.png\" alt=\"image-20220801113425849\"></p>\n<h2 id=\"6-c-采用集群策略连接设置数据会自动切换到相应的写主机\"><a class=\"markdownIt-Anchor\" href=\"#6-c-采用集群策略连接设置数据会自动切换到相应的写主机\">#</a> 6 - -c 采用集群策略连接，设置数据会自动切换到相应的写主机</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801113550736.png\" alt=\"image-20220801113550736\"></p>\n<h2 id=\"7-通过-cluster-nodes-命令查看集群信息\"><a class=\"markdownIt-Anchor\" href=\"#7-通过-cluster-nodes-命令查看集群信息\">#</a> 7-  通过 cluster nodes 命令查看集群信息</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801123052282.png\" alt=\"image-20220801123052282\"></p>\n<h2 id=\"8-redis-cluster-如何分配这六个节点\"><a class=\"markdownIt-Anchor\" href=\"#8-redis-cluster-如何分配这六个节点\">#</a> 8 - redis cluster 如何分配这六个节点？</h2>\n<p>一个集群至少要有<strong>三个主节点</strong>。</p>\n<p>选项 --cluster-replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。</p>\n<p>分配原则尽量保证每个主数据库运行在不同的 IP 地址，每个从库和主库不在一个 IP 地址上。</p>\n<h2 id=\"9-什么是slots\"><a class=\"markdownIt-Anchor\" href=\"#9-什么是slots\">#</a> 9 - 什么是 slots</h2>\n<p><strong>[OK] All nodes agree about slots configuration.</strong></p>\n<p><strong>&gt;&gt;&gt; Check for open slots…</strong></p>\n<p><strong>&gt;&gt;&gt; Check slots coverage…</strong></p>\n<p><strong>[OK] All 16384 slots covered.</strong></p>\n<p>一个 Redis 集群包含 <code>16384</code>  个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个， 集群使用公式  <code>CRC16(key) % 16384</code>  来计算键 key 属于哪个槽， 其中 CRC16 (key) 语句用于计算键 key 的 CRC16 校验和 。</p>\n<p>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点， 其中：</p>\n<blockquote>\n<p>节点 A 负责处理 0 号至 5460 号插槽。<br>\n节点 B 负责处理 5461 号至 10922 号插槽。<br>\n节点 C 负责处理 10923 号至 16383 号插槽。</p>\n</blockquote>\n<h2 id=\"10-在集群中录入值\"><a class=\"markdownIt-Anchor\" href=\"#10-在集群中录入值\">#</a> 10 - 在集群中录入值</h2>\n<p>在 redis-cli 每次录入、查询键值，redis 都会计算出该 key 应该送往的插槽，如果不是该客户端对应服务器的插槽，redis 会报错，并告知应前往的 redis 实例地址和端口。</p>\n<p>redis-cli 客户端提供了  <code>–c</code>  参数实现自动重定向。</p>\n<p>如  <code>redis-cli  -c –p 6379</code>  登入后，再录入、查询键值对可以自动重定向。</p>\n<p>不在一个 slot 下的键值，是不能使用 mget,mset 等多键操作。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801123630199.png\" alt=\"image-20220801123630199\"></p>\n<p>可以通过 {} 来定义组的概念，从而使 key 中 {} 内相同内容的键值对放到一个 slot 中去。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801123644949.png\" alt=\"image-20220801123644949\"></p>\n<h2 id=\"11-查询集群中的值\"><a class=\"markdownIt-Anchor\" href=\"#11-查询集群中的值\">#</a> 11 - 查询集群中的值</h2>\n<p><strong>CLUSTER GETKEYSINSLOT <slot><count></strong>  返回 count 个 slot 槽中的键。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801123657501.png\" alt=\"image-20220801123657501\"></p>\n<h2 id=\"12-故障恢复\"><a class=\"markdownIt-Anchor\" href=\"#12-故障恢复\">#</a> 12 -  故障恢复</h2>\n<p>如果主节点下线？从节点能否自动升为主节点？注意：<strong>15 秒超时</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801123757512.png\" alt=\"image-20220801123757512\"></p>\n<p>主节点恢复后，主从关系会如何？<strong>主节点回来变成从机</strong>。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801123820814.png\" alt=\"image-20220801123820814\"></p>\n<p>如果所有某一段插槽的主从节点都宕掉，redis 服务是否还能继续？</p>\n<p>如果某一段插槽的主从都挂掉，而 cluster-require-full-coverage 为 yes ，那么 ，整个集群都挂掉</p>\n<p>如果某一段插槽的主从都挂掉，而 cluster-require-full-coverage 为 no ，那么，该插槽数据全都不能使用，也无法存储。</p>\n<p>redis.conf 中的参数  cluster-require-full-coverage</p>\n<h2 id=\"13-集群的jedis开发\"><a class=\"markdownIt-Anchor\" href=\"#13-集群的jedis开发\">#</a> 13 - 集群的 Jedis 开发</h2>\n<p>即使连接的不是主机，集群会自动切换主机存储。主机写，从机读。</p>\n<p>无中心化主从集群。无论从哪台主机写的数据，其他主机上都能读到数据。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JedisClusterTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HostAndPort</span><span class=\"token punctuation\">></span></span>set <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HostAndPort</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HostAndPort</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.31.211\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token class-name\">JedisCluster</span> jedisCluster<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisCluster</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     jedisCluster<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedisCluster<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"14-redis-集群提供了以下好处\"><a class=\"markdownIt-Anchor\" href=\"#14-redis-集群提供了以下好处\">#</a> 14 - Redis 集群提供了以下好处</h2>\n<ol>\n<li>实现扩容</li>\n<li>分摊压力</li>\n<li>无中心配置相对简单</li>\n</ol>\n<h2 id=\"15-redis-集群的不足\"><a class=\"markdownIt-Anchor\" href=\"#15-redis-集群的不足\">#</a> 15 - Redis 集群的不足</h2>\n<ol>\n<li>\n<p>多键操作是不被支持的</p>\n</li>\n<li>\n<p>多键的 Redis 事务是不被支持的。lua 脚本不被支持</p>\n</li>\n<li>\n<p>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至 redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</p>\n</li>\n</ol>\n<h1 id=\"十六-redis应用问题解决\"><a class=\"markdownIt-Anchor\" href=\"#十六-redis应用问题解决\">#</a> 十六、Redis 应用问题解决</h1>\n<h2 id=\"1-缓存穿透\"><a class=\"markdownIt-Anchor\" href=\"#1-缓存穿透\">#</a> 1- 缓存穿透</h2>\n<h3 id=\"1611问题描述\"><a class=\"markdownIt-Anchor\" href=\"#1611问题描述\">#</a> 16.1.1.\t问题描述</h3>\n<p>key 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801124314744.png\" alt=\"image-20220801124314744\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220808134718629.png\" alt=\"image-20220808134718629\"></p>\n<h3 id=\"1612解决方案\"><a class=\"markdownIt-Anchor\" href=\"#1612解决方案\">#</a> 16.1.2.\t解决方案</h3>\n<p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p>\n<p><strong>解决方案：</strong><br>\n（1）\t** 对空值缓存：** 如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟</p>\n<p>（2）\t<strong>设置可访问的名单（白名单）</strong>：<br>\n使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmap 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问。</p>\n<p>（3）\t<strong>采用布隆过滤器：</strong>(布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的 <code>二进制向量</code>  (位图) 和一系列随机 <code>映射函数</code> （哈希函数）。</p>\n<p>布隆过滤器可以用于<strong>检索一个元素是否在一个集合中</strong>。它的<strong>优点</strong>是空间效率和查询时间都远远超过一般的算法，<strong>缺点</strong>是有一定的误识别率和删除困难。)</p>\n<p>将所有可能存在的数据哈希到一个足够大的 bitmaps 中，一个一定不存在的数据会被 这个 bitmaps 拦截掉，从而避免了对底层存储系统的查询压力。</p>\n<p>（4）\t<strong>进行实时监控</strong>：当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p>\n<h2 id=\"2-缓存击穿\"><a class=\"markdownIt-Anchor\" href=\"#2-缓存击穿\">#</a> 2 - 缓存击穿</h2>\n<h3 id=\"1621问题描述\"><a class=\"markdownIt-Anchor\" href=\"#1621问题描述\">#</a> 16.2.1.\t问题描述</h3>\n<p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 DB 压垮。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801124751949.png\" alt=\"image-20220801124751949\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220808135145459.png\" alt=\"image-20220808135145459\"></p>\n<h3 id=\"1622解决方案\"><a class=\"markdownIt-Anchor\" href=\"#1622解决方案\">#</a> 16.2.2.\t解决方案</h3>\n<p>key 可能会在某些时间点被超高并发地访问，是一种非常 “热点” 的数据。这个时候，需要考虑一个问题：缓存被 “击穿” 的问题。</p>\n<p><strong>解决问题：</strong></p>\n<p>（1）<strong>预先设置热门数据</strong>：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长</p>\n<p>（2）<strong>实时调整</strong>：现场监控哪些数据热门，实时调整 key 的过期时长</p>\n<p>（3）<strong>使用锁</strong>：</p>\n<ol>\n<li>就是在缓存失效的时候（判断拿出来的值为空），不是立即去 load db。</li>\n<li>先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key</li>\n<li>当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key；</li>\n<li>当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试整个 get 缓存的方法。</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801125032132.png\" alt=\"image-20220801125032132\"></p>\n<h2 id=\"3-缓存雪崩\"><a class=\"markdownIt-Anchor\" href=\"#3-缓存雪崩\">#</a> 3 - 缓存雪崩</h2>\n<h3 id=\"1631问题描述\"><a class=\"markdownIt-Anchor\" href=\"#1631问题描述\">#</a> 16.3.1.\t问题描述</h3>\n<p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 DB 压垮。</p>\n<p>缓存雪崩与缓存击穿的区别在于<strong>这里针对很多 key 缓存，前者则是某一个 key</strong></p>\n<p>正常访问⬇</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801125120331.png\" alt=\"image-20220801125120331\"></p>\n<p>缓存失效瞬间⬇</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801125130104.png\" alt=\"image-20220801125130104\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220808140122025.png\" alt=\"image-20220808140122025\"></p>\n<h3 id=\"1632解决方案\"><a class=\"markdownIt-Anchor\" href=\"#1632解决方案\">#</a> 16.3.2.\t解决方案</h3>\n<p>缓存失效时的雪崩效应对底层系统的冲击非常可怕！</p>\n<p><strong>解决方案：</strong><br>\n（1）\t** 构建多级缓存架构：**nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）</p>\n<p>（2）\t<strong>使用锁或队列：</strong><br>\n用 <code>加锁</code> 或者 <code>队列</code> 的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况</p>\n<p>（3）\t<strong>设置过期标志更新缓存</strong>：<br>\n记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存。</p>\n<p>（4）\t<strong>将缓存失效时间分散开</strong>：<br>\n比如我们可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>\n<h2 id=\"4-分布式锁\"><a class=\"markdownIt-Anchor\" href=\"#4-分布式锁\">#</a> 4 - 分布式锁</h2>\n<h3 id=\"1641问题描述\"><a class=\"markdownIt-Anchor\" href=\"#1641问题描述\">#</a> 16.4.1.\t问题描述</h3>\n<p>随着业务发展的需要，<strong>原单体单机部署</strong>的系统被演化成<strong>分布式集群系统</strong>后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就<strong>需要一种跨 JVM 的互斥机制来控制共享资源的访问</strong>，这就是分布式锁要解决的问题！</p>\n<p><strong>分布式锁主流的实现方案</strong>：</p>\n<ol>\n<li>基于数据库实现分布式锁</li>\n<li>基于缓存（Redis 等）</li>\n<li>基于 Zookeeper<br>\n 每一种分布式锁解决方案都有各自的优缺点：</li>\n<li>性能：redis 最高</li>\n<li>可靠性：zookeeper 最高<br>\n这里，我们就基于 redis 实现分布式锁。</li>\n</ol>\n<h3 id=\"1642解决方案使用redis实现分布式锁\"><a class=\"markdownIt-Anchor\" href=\"#1642解决方案使用redis实现分布式锁\">#</a> 16.4.2.\t解决方案：使用 redis 实现分布式锁</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>redis命令 ： </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">set</span> sku:1:info “OK” NX PX <span class=\"token number\">10000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>EX second：设置键的过期时间为 second 秒。 SET key value EX second 效果等同于 SETEX key second value</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>PX millisecond：设置键的过期时间为 millisecond 毫秒。 SET key value PX millisecond 效果等同于 PSETEX key millisecond value </pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>NX ：只在键不存在时，才对键进行设置操作。 SET key value NX 效果等同于 SETNX key value </pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>XX ：只在键已经存在时，才对键进行设置操作。</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801152803095.png\" alt=\"image-20220801152803095\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220808141133285.png\" alt=\"image-20220808141133285\"></p>\n<ol>\n<li>多个客户端同时获取锁（setnx）</li>\n<li>获取成功，执行业务逻辑 {从 db 获取数据，放入缓存}，执行完成释放锁（del）</li>\n<li>其他客户端等待重试</li>\n</ol>\n<h3 id=\"1643编写代码\"><a class=\"markdownIt-Anchor\" href=\"#1643编写代码\">#</a> 16.4.3.\t编写代码</h3>\n<p>Redis: set num 0</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testLock\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//1 获取锁，setne</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Boolean</span> lock <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//2 获取锁成功、查询 num 的值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//2.1 判断 num 为空 return</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//2.2 有值就转成成 int</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//2.3 把 redis 的 num 加 1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//2.4 释放锁，del</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//3 获取锁失败、每隔 0.1 秒再获取</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">testLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>重启，服务集群，通过网关压力测试：<br>\nab -n 1000 -c 100 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMTQwLjE6ODA4MC90ZXN0L3Rlc3RMb2Nr\">http://192.168.140.1:8080/test/testLock</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801153313835.png\" alt=\"image-20220801153313835\"></p>\n<p>查看 redis 中 num 的值 ：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801153341490.png\" alt=\"image-20220801153341490\"></p>\n<p>但是还会有一些问题，见下，问题及相关解决方案。</p>\n<h3 id=\"1644优化之设置锁的过期时间\"><a class=\"markdownIt-Anchor\" href=\"#1644优化之设置锁的过期时间\">#</a> 16.4.4.\t优化之设置锁的过期时间</h3>\n<p>** 问题：**setnx 刚好获取到锁，业务逻辑出现异常，导致锁无法释放</p>\n<p>** 解决：** 设置过期时间，自动释放锁。</p>\n<p>设置过期时间有<strong>两种方式：</strong></p>\n<ol>\n<li>首先想到通过 <code>expire</code>  设置过期时间（缺乏原子性：如果在 setnx 和 expire 之间出现异常，锁也无法释放）</li>\n<li>在 set 时指定过期时间（推荐）</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801153615051.png\" alt=\"image-20220801153615051\"></p>\n<p>设置过期时间：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801153652058.png\" alt=\"image-20220801153652058\"></p>\n<p>压力测试肯定也没有问题。自行测试</p>\n<h3 id=\"1645优化之uuid防误删\"><a class=\"markdownIt-Anchor\" href=\"#1645优化之uuid防误删\">#</a> 16.4.5.\t优化之 UUID 防误删</h3>\n<p>** 问题：** 可能会释放其他服务器的锁。</p>\n<p>** 场景：** 如果业务逻辑的执行时间是 7s。执行流程如下</p>\n<ol>\n<li>index1 业务逻辑没执行完，3 秒后锁被自动释放。</li>\n<li>index2 获取到锁，执行业务逻辑，3 秒后锁被自动释放。</li>\n<li>index3 获取到锁，执行业务逻辑</li>\n<li>index1 业务逻辑执行完成，开始调用 del 释放锁，这时释放的是 index3 的锁，导致 index3 的业务只执行 1s 就被别人释放。<br>\n最终等于没锁的情况。</li>\n</ol>\n<p>** 解决：**setnx 获取锁时，设置一个指定的唯一值（例如：uuid）；释放前获取这个值，判断是否自己的锁</p>\n<p><strong>图片分析：</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220808142646549.png\" alt=\"image-20220808142646549\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802091705477.png\" alt=\"image-20220802091705477\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802091817746.png\" alt=\"image-20220802091817746\"></p>\n<h3 id=\"1646优化之lua脚本保证删除的原子性\"><a class=\"markdownIt-Anchor\" href=\"#1646优化之lua脚本保证删除的原子性\">#</a> 16.4.6.\t优化之 LUA 脚本保证删除的原子性</h3>\n<p>** 问题：** 删除操作缺乏原子性。</p>\n<p><strong>图片分析：</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220808143635697.png\" alt=\"image-20220808143635697\"></p>\n<p><strong>场景：</strong></p>\n<ol>\n<li>index1 执行删除时，查询到的 lock 值确实和 uuid 相等</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>uuid<span class=\"token operator\">=</span>v1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">,</span>uuid<span class=\"token punctuation\">)</span>；</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802091921511.png\" alt=\"image-20220802091921511\"></p>\n<ol start=\"2\">\n<li>index1 执行删除前，lock 刚好过期时间已到，被 redis 自动释放<br>\n在 redis 中没有了 lock，没有了锁。</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802091953632.png\" alt=\"image-20220802091953632\"></p>\n<ol start=\"3\">\n<li>index2 获取了 lock<br>\nindex2 线程获取到了 cpu 的资源，开始执行方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>uuid<span class=\"token operator\">=</span>v2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">,</span>uuid<span class=\"token punctuation\">)</span>；</pre></td></tr></table></figure><ol start=\"4\">\n<li>index1 执行删除，此时会把 index2 的 lock 删除<br>\n index1 因为已经在方法中了，所以不需要重新上锁。index1 有执行的权限。index1 已经比较完成了，这个时候，开始执行</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802092126594.png\" alt=\"image-20220802092126594\"></p>\n<p>删除的 index2 的锁！</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testLockLua\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLockLua</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//1 声明一个 uuid , 将做为一个 value 放入我们的 key 所对应的值中</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> uuid <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//2 定义一个锁：lua 脚本可以使用同一把锁，来实现删除！</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">String</span> skuId <span class=\"token operator\">=</span> <span class=\"token string\">\"25\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问 skuId 为 25 号的商品 100008348542</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">String</span> locKey <span class=\"token operator\">=</span> <span class=\"token string\">\"lock:\"</span> <span class=\"token operator\">+</span> skuId<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 锁住的是每个商品的数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 3 获取锁</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">Boolean</span> lock <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span>locKey<span class=\"token punctuation\">,</span> uuid<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 第一种： lock 与过期时间中间不写任何的代码。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//redisTemplate.expire (\"lock\",10, TimeUnit.SECONDS);// 设置过期时间</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 如果 true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 执行的业务逻辑开始</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 获取缓存中的 num 数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 如果是空直接返回</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 不是空 如果说在这出现了异常！ 那么 delete 就删除失败！ 也就是说锁永远存在！</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 使 num 每次 + 1 放入缓存</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/* 使用 lua 脚本来锁 */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 定义 lua 脚本</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">String</span> script <span class=\"token operator\">=</span> <span class=\"token string\">\"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 使用 redis 执行 lua 执行</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> redisScript <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        redisScript<span class=\"token punctuation\">.</span><span class=\"token function\">setScriptText</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 设置一下返回值类型 为 Long</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 因为删除判断的时候，返回的 0, 给其封装为数据类型。如果不封装那么默认返回 String 类型，</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 那么返回字符串与 0 会有发生错误。</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        redisScript<span class=\"token punctuation\">.</span><span class=\"token function\">setResultType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 第一个要是 script 脚本 ，第二个需要判断的 key，第三个就是 key 所对应的值。</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>redisScript<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>locKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> uuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 其他线程等待</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 睡眠</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">// 睡醒了之后，调用方法。</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token function\">testLockLua</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Lua 脚本详解：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802092521165.png\" alt=\"image-20220802092521165\"></p>\n<p>项目中正确使用：</p>\n<p>定义 key，key 应该是为每个 sku 定义的，也就是每个 sku 有一把锁。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> locKey <span class=\"token operator\">=</span><span class=\"token string\">\"lock:\"</span><span class=\"token operator\">+</span>skuId<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 锁住的是每个商品的数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Boolean</span> lock <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span>locKey<span class=\"token punctuation\">,</span> uuid<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802092834206.png\" alt=\"image-20220802092834206\"></p>\n<h3 id=\"1647总结\"><a class=\"markdownIt-Anchor\" href=\"#1647总结\">#</a> 16.4.7.\t总结</h3>\n<p>1、加锁</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 从 redis 中获取锁，set k1 v1 px 20000 nx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> uuid <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Boolean</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock\"</span><span class=\"token punctuation\">,</span> uuid<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>2、使用 lua 释放锁</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 2. 释放锁 del</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> script <span class=\"token operator\">=</span> <span class=\"token string\">\"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 设置 lua 脚本返回的数据类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> redisScript <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 设置 lua 脚本返回类型为 Long</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>redisScript<span class=\"token punctuation\">.</span><span class=\"token function\">setResultType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>redisScript<span class=\"token punctuation\">.</span><span class=\"token function\">setScriptText</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>redisScript<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>uuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>3、重试</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">testLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>为了确保分布式锁可用，我们至少要确保锁的实现同时<strong>满足以下四个条件</strong>：</p>\n<ul>\n<li>互斥性。在任意时刻，只有一个客户端能持有锁。</li>\n<li>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li>\n<li>解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</li>\n<li>加锁和解锁必须具有原子性。</li>\n</ul>\n<h1 id=\"十七-redis60新功能\"><a class=\"markdownIt-Anchor\" href=\"#十七-redis60新功能\">#</a> 十七、Redis6.0 新功能</h1>\n<h2 id=\"1-acl\"><a class=\"markdownIt-Anchor\" href=\"#1-acl\">#</a> 1 - ACL</h2>\n<h3 id=\"1711简介\"><a class=\"markdownIt-Anchor\" href=\"#1711简介\">#</a> 17.1.1.\t简介</h3>\n<p>Redis  <code>ACL</code>  是 <code>Access Control List</code> （访问控制列表）的缩写，该功能允许根据<strong>可以执行的命令</strong>和<strong>可以访问的键</strong>来限制某些连接。</p>\n<p>在 Redis 5 版本之前，Redis 安全规则只有密码控制 还有通过 rename 来调整高危命令比如 flushdb ， KEYS* ， shutdown 等。Redis 6 则提供 ACL 的功能对用户进行更细粒度的权限控制 ：</p>\n<p>（1）接入权限：用户名和密码<br>\n（2）可以执行的命令<br>\n（3）可以操作的 KEY</p>\n<p>参考官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWRpcy5pby90b3BpY3MvYWNs\">https://redis.io/topics/acl</span></p>\n<h3 id=\"1712命令\"><a class=\"markdownIt-Anchor\" href=\"#1712命令\">#</a> 17.1.2.\t命令</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t（1）查看权限列表：acl list</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t（2）查看权限类别：acl <span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t（3）查看当前用户：acl <span class=\"token function\">whoami</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t（4）创建和编辑用户：acl setuser</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>具体使用见下：</pre></td></tr></table></figure><p>1、使用 acl list 命令展现用户权限列表<br>\n（1）数据说明</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802093424775.png\" alt=\"image-20220802093424775\"></p>\n<p>2、使用 acl cat 命令<br>\n（1）查看添加权限指令类别</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802093544283.png\" alt=\"image-20220802093544283\"></p>\n<p>（2）加参数类型名可以查看类型下具体命令</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802093606610.png\" alt=\"image-20220802093606610\"></p>\n<p>3、使用 acl whoami 命令查看当前用户</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802093652694.png\" alt=\"image-20220802093652694\"></p>\n<p>4、使用 aclsetuser 命令创建和编辑用户 ACL</p>\n<p>（1）ACL 规则<br>\n下面是有效 ACL 规则的列表。某些规则只是用于激活或删除标志，或对用户 ACL 执行给定更改的单个单词。其他规则是字符前缀，它们与命令或类别名称、键模式等连接在一起。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802094003527.png\" alt=\"image-20220802094003527\"></p>\n<p>（2）通过命令创建新用户默认权限<br>\n <code>acl setuser user1</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802094158447.png\" alt=\"image-20220802094158447\"></p>\n<p>在上面的示例中，我根本没有指定任何规则。如果用户不存在，这将使用 just created 的默认属性来创建用户。如果用户已经存在，则上面的命令将不执行任何操作。</p>\n<p>（3）设置有用户名、密码、ACL 权限、并启用的用户<br>\n <code>acl setuser user2 on &gt;password ~cached:* +get</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802094428400.png\" alt=\"image-20220802094428400\"></p>\n<p>(4) 切换用户，验证权限</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802094549151.png\" alt=\"image-20220802094549151\"></p>\n<h2 id=\"2-io多线程\"><a class=\"markdownIt-Anchor\" href=\"#2-io多线程\">#</a> 2 - IO 多线程</h2>\n<h3 id=\"1721简介\"><a class=\"markdownIt-Anchor\" href=\"#1721简介\">#</a> 17.2.1.\t简介</h3>\n<p>Redis6 终于支撑多线程了，告别单线程了吗？</p>\n<p>IO 多线程其实指<strong>客户端交互部分的网络 IO 交互处理模块多线程</strong>，而非执行命令多线程。Redis6 执行命令依然是单线程。</p>\n<h3 id=\"1722原理架构\"><a class=\"markdownIt-Anchor\" href=\"#1722原理架构\">#</a> 17.2.2.\t原理架构</h3>\n<p>Redis 6 加入多线程，但跟 Memcached 这种从 IO 处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来<strong>处理网络数据的读写和协议解析</strong>，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH/LPOP 等等的并发问题。整体的设计大体如下:</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802094700691.png\" alt=\"image-20220802094700691\"></p>\n<p>另外，多线程 IO 默认也是不开启的，需要再配置文件中配置</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>io-threads-do-reads  <span class=\"token function\">yes</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>io-threads <span class=\"token number\">4</span></pre></td></tr></table></figure><h2 id=\"3-工具支持-cluster\"><a class=\"markdownIt-Anchor\" href=\"#3-工具支持-cluster\">#</a> 3 - 工具支持 Cluster</h2>\n<p>之前老版 Redis 想要搭集群需要单独安装 ruby 环境，Redis 5 将 redis-trib.rb 的功能集成到 redis-cli 。</p>\n<p>另外官方 redis-benchmark 工具开始支持  <code>cluster</code>  模式了，通过多线程的方式对多个分片进行压测。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802095313745.png\" alt=\"image-20220802095313745\"></p>\n<h2 id=\"4-redis新功能持续关注\"><a class=\"markdownIt-Anchor\" href=\"#4-redis新功能持续关注\">#</a> 4 - Redis 新功能持续关注</h2>\n<p>Redis6 新功能还有：</p>\n<p>1、RESP3 新的 Redis 通信协议：优化服务端与客户端之间通信</p>\n<p>2、Client side caching 客户端缓存：基于 RESP3 协议实现的客户端缓存功能。为了进一步提升缓存的性能，将客户端经常访问的数据 cache 到客户端。减少 TCP 网络交互。</p>\n<p>3、Proxy 集群代理模式：Proxy 功能，让 Cluster 拥有像单实例一样的接入方式，降低大家使用 cluster 的门槛。不过需要注意的是代理不改变 Cluster 的功能限制，不支持的命令还是不会支持，比如跨 slot 的多 Key 操作。</p>\n<p>4、Modules API<br>\nRedis 6 中模块 API 开发进展非常大，因为 Redis Labs 为了开发复杂的功能，从一开始就用上 Redis 模块。Redis 可以变成一个框架，利用 Modules 来构建不同系统，而不需要从头开始写然后还要 BSD 许可。Redis 一开始就是一个向编写各种系统开放的平台。</p>\n",
            "tags": [
                "Redis"
            ]
        }
    ]
}