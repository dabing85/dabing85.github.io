{
    "version": "https://jsonfeed.org/version/1",
    "title": "null",
    "description": "欢迎来到大冰的笔记空间~这里主要会记录编程学习笔记🌸",
    "home_page_url": "https://blog.dabing.cool",
    "items": [
        {
            "id": "https://blog.dabing.cool/algorithm/%E4%BA%8C%E5%88%86%E6%B3%95/",
            "url": "https://blog.dabing.cool/algorithm/%E4%BA%8C%E5%88%86%E6%B3%95/",
            "title": "二分法、动态数组、哈希表-新手",
            "date_published": "2022-10-19T02:00:00.000Z",
            "content_html": "<p>作者：dabing🧁</p>\n<p>算法小白开始算法学习了，从最简单的开始，一步一步来，这里记录一下。笔记基于自己能看懂～～</p>\n<p>第三节～我真的好懒啊啊啊啊😶‍🌫️</p>\n<p>这节课基本上都是睡觉前听听有些许迷糊，所有后面补的时候是直接做题的，因为听都听过思路了是可以做题直接做的了。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>题目： </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>有序数组中找到num </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>有序数组中找到<span class=\"token operator\">>=</span>num最左的位置 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>有序数组中找到<span class=\"token operator\">&lt;=</span>num最右的位置 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>局部最小值问题 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>哈希表使用的code讲解 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>有序表使用的code讲解</pre></td></tr></table></figure><h1 id=\"1-二分法查找\"><a class=\"markdownIt-Anchor\" href=\"#1-二分法查找\">#</a> 1. 二分法查找</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> times<span class=\"token operator\">=</span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> maxNum<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> maxLen<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">boolean</span> succeed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> times<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>maxNum<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token function\">randomArr</span><span class=\"token punctuation\">(</span>maxLen<span class=\"token punctuation\">,</span>maxNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">testFind</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出错了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                succeed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>succeed <span class=\"token operator\">?</span> <span class=\"token string\">\"Nice!\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Fucking fucked!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 有序数组中找到 num</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 二分法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span> <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">int</span> mid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token operator\">+</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token class-name\">L</span><span class=\"token operator\">=</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token class-name\">R</span><span class=\"token operator\">=</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 对数器</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">randomArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxLen<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> maxNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>maxLen<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>maxNum<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">// 打印数组</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">// 对数</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">testFind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cur <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur<span class=\"token operator\">==</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"2-有序数组中找到num最左的位置\"><a class=\"markdownIt-Anchor\" href=\"#2-有序数组中找到num最左的位置\">#</a> 2. 有序数组中找到 &gt;=num 最左的位置</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 有序数组中找到 >=num 最左的位置</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 如有序数组 [1,2,2,2,3,5,8,9,11]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * num=2;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 则 >=2 的最左下标为 1.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mostLeftNoLessNumIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> index<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token operator\">&lt;=</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">int</span> mid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token operator\">+</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                index<span class=\"token operator\">=</span>mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token class-name\">R</span><span class=\"token operator\">=</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token class-name\">L</span><span class=\"token operator\">=</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 随机有序数组</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">randomArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxLen<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> maxNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>maxLen<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>maxNum<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 对数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">testIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">int</span> times<span class=\"token operator\">=</span><span class=\"token number\">50000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">int</span> maxNum<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">int</span> maxLen<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">boolean</span> succeed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> times<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">int</span> num<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>maxNum<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token function\">randomArr</span><span class=\"token punctuation\">(</span>maxLen<span class=\"token punctuation\">,</span>maxNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">mostLeftNoLessNumIndex</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">testIndex</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出错了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                succeed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>succeed <span class=\"token operator\">?</span> <span class=\"token string\">\"Nice!\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Fucking fucked!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"3-局部最小值\"><a class=\"markdownIt-Anchor\" href=\"#3-局部最小值\">#</a> 3. 局部最小值</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 局部最小值问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 序列：无序，但任意相邻的数不相等</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 局部最小：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 1）0 1 x x x x .....    第一个 0 是局部最小</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 2) ....x x x x 8 2     最后的 2 是局部最小</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 3）...x 8 3 9 x x x     中间的 3 是局部最小</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BSAwesome</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 局部最小值下标</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">oneMinIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span><span class=\"token operator\">=</span><span class=\"token class-name\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token operator\">&lt;</span> <span class=\"token class-name\">R</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">int</span> mid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token operator\">+</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token class-name\">R</span><span class=\"token operator\">=</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token class-name\">L</span><span class=\"token operator\">=</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span>  arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 随机无序相邻不等序列</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">randomArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxLen<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> maxNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>maxLen<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>maxNum<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>maxNum<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">// 打印数组</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// 对数</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">return</span> minIndex <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> minIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> minIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">boolean</span> leftBigger <span class=\"token operator\">=</span> left <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">boolean</span> rightBigger <span class=\"token operator\">=</span> right <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">return</span> leftBigger <span class=\"token operator\">&amp;&amp;</span> rightBigger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">int</span> maxLen <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">int</span> maxValue <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">int</span> testTime <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试开始\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> testTime<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">randomArr</span><span class=\"token punctuation\">(</span>maxLen<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token function\">oneMinIndex</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token function\">printArr</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"4-时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#4-时间复杂度\">#</a> 4. 时间复杂度</h1>\n<p>列一些常见的时间复杂度，由好到差：</p>\n<p><strong>O(1)、O(logN)、O(N)、O(N*logN)</strong></p>\n<p><strong>O(N<sup>2)、O(N</sup>3)、O(N^k)</strong></p>\n<p><strong>O(2<sup>n)、O(3</sup>n)、O(k^n)</strong></p>\n<p><strong>O(n!)</strong></p>\n<h1 id=\"5-哈希表hashmap-有序表treemap\"><a class=\"markdownIt-Anchor\" href=\"#5-哈希表hashmap-有序表treemap\">#</a> 5. 哈希表 HashMap、有序表 TreeMap</h1>\n<p>HashMap 哈希表，增删改查都是常数时间。put、containsKey、remove</p>\n<p>基础类型按内容查，非基础类型按引用地址查。所以空间耗损也是如果你是地址，那只是占用地址 8 字节而已，两个都是地址那就是 16 字节。</p>\n<p>TreeMap 有序表的一些特别方法：它的时间复杂度是 O (logN)</p>\n<p>非基础类型不能直接用有序表，因为 key 一定要是能比较的，你可以在你的类里面添加上比较器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> treeMap1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\ttreeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"我是3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\ttreeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"我是0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\ttreeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"我是7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\ttreeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"我是2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\ttreeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"我是5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\ttreeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"我是9\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>treeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>treeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>treeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\ttreeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"他是3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>treeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\ttreeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>treeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>treeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">firstKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>treeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">lastKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//9</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">// &lt;=5 离 5 最近的 key 告诉我</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>treeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">floorKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">// &lt;=6 离 6 最近的 key 告诉我</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>treeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">floorKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// >=5 离 5 最近的 key 告诉我</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>treeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">ceilingKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">// >=6 离 6 最近的 key 告诉我</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>treeMap1<span class=\"token punctuation\">.</span><span class=\"token function\">ceilingKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//7</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 非基础类型不能直接用有序表，因为 key 一定要是能比较的，你可以在你的类里面添加上比较器</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//\t\tNode node3 = new Node(3);</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//\t\tNode node4 = new Node(4);</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//\t\tTreeMap&lt;Node, String> treeMap2 = new TreeMap&lt;>();</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//\t\ttreeMap2.put (node3, \"我是 node3\");</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//\t\ttreeMap2.put (node4, \"我是 node4\");</span></pre></td></tr></table></figure>",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "https://blog.dabing.cool/diary/%E6%88%90%E5%8A%9F%E6%97%A5%E8%AE%B0/",
            "url": "https://blog.dabing.cool/diary/%E6%88%90%E5%8A%9F%E6%97%A5%E8%AE%B0/",
            "title": "成功日记",
            "date_published": "2022-09-19T16:00:00.000Z",
            "content_html": "<p>成功日记，就是一点小小的事都记下来表扬一下自己哈哈哈哈哈，那就是成功了～～～👧</p>\n<h3 id=\"1-2022-10-19-周三-️\"><a class=\"markdownIt-Anchor\" href=\"#1-2022-10-19-周三-️\">#</a> 1. 2022-10-19  周三  🌥️</h3>\n<ol>\n<li>\n<p>今天运动啦～～🏸（因为隔离在家，闷得要死去蹭的别人的羽毛球拍和跳绳哈哈哈运动了一下很舒服）</p>\n<p>又是社牛的一天</p>\n</li>\n</ol>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221019203140896.png\" alt=\"image-20221019203140896\"></p>\n<h3 id=\"2-2022-10-19-周四-️\"><a class=\"markdownIt-Anchor\" href=\"#2-2022-10-19-周四-️\">#</a> 2. 2022-10-19  周四  🌥️</h3>\n<ol>\n<li>\n<p>今天运动了🪢跳绳 1000 多个</p>\n</li>\n<li>\n<p>今天好好搞卫生了</p>\n</li>\n<li>\n<p>今天的做的饭很好吃</p>\n</li>\n</ol>\n",
            "tags": [
                "成功日记"
            ]
        },
        {
            "id": "https://blog.dabing.cool/diary/%E8%A1%A5%E7%89%99%E6%97%A5%E8%AE%B0/",
            "url": "https://blog.dabing.cool/diary/%E8%A1%A5%E7%89%99%E6%97%A5%E8%AE%B0/",
            "title": "补牙日记",
            "date_published": "2022-09-19T16:00:00.000Z",
            "content_html": "<p>日记… 口水话</p>\n<p>2022-09-20 周二  ⛅   郑州📍</p>\n<p>周日去补牙了，本来是去洗牙的。</p>\n<p>结果去了医生一看我牙齿，就说，你这牙不疼么？🦷</p>\n<p>我说不疼，我有两个大牙是初中的时候疼死了，一直到现在都没疼过了。所以如果不是这次去洗牙，我也不会去管我的牙齿。</p>\n<p>拍片检查，洁牙，结果是有两颗大牙需要种牙（但是我没钱哈哈哈哈），有 15 个牙基本都是浅龋，就直接补了。没有智齿。（28 颗牙）</p>\n<p>补了两颗 p60 的，399 一颗。说硬度高点放在大牙的位置，其他 13 颗都是补的 z350 的，199 一颗。</p>\n<p>我听医生说的是补牙很快，40 分钟左右就行，原来他说是一颗，我补了 15 颗牙，补了四五小时。</p>\n<p>对牙齿的常识几乎没有，我都不知道自己一口坏牙。因为不疼我就不管他，疼我就忍着就过去了。平时自己身体有什么毛病也不去看。</p>\n<p>补完之后，当天和第二天前磨牙，比较深的那几颗有些酸软无力，吃不了硬东西，医生让我再观察观察。</p>\n<p>就是如果没有好转，就是要进行下一步治疗了。下一步不就是根管治疗了。我看知乎上说根管治疗可疼了，想象一下有根细钻具在你牙齿里钻，多吓人。</p>\n<p>我要好好爱护我的牙齿。现在我的牙齿都是没有黑的了嘻嘻，好看多了。🦷</p>\n<p>好好刷牙🪥，饭后漱口。还有呢？。。。。。</p>\n<p><strong>洁牙后注意事项</strong>：1、近 1 周内避免冷热酸刺激，温水刷牙；🪥<br>\n2、近 1 周尽量减少咖啡、茶、可乐、酱油等含色素食物摄入；<br>\n3、加强口腔卫生维护，采用上下拂刷方式刷牙（详见巴氏刷牙法）；<br>\n4、定期检查、洁治（半年或 1 年）。</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20220920125431772.png\" alt=\"image-20220920125431772\"></p>\n<p>-----20220923 更新  周五 -----</p>\n<p>上周日补的牙，到现在有 5 天了，吃东西还是会酸疼，但是我看很多人都有同样的现象，有些的两个多月才好的，我就不慌了，再观察观察。不想做根管治疗。</p>\n<p>-----20221019 更新  周三 ------</p>\n<p>现在已经快一个月了，牙齿是将近两个星期的时候不会酸痛了。</p>\n<p>但是现在开始冷热敏感了，我认为我需要回去复查一下才行。但现在郑州疫情蛮严重的不能出门，得等解封了再去检查吧。</p>\n<p>去检查的话估计就是让我让我做根管治疗啊，妈呀酷刑啊我不做！！！！</p>\n",
            "tags": [
                "补牙"
            ]
        },
        {
            "id": "https://blog.dabing.cool/javamore/RabbitMQ/RabbitMQ-%E7%AE%80%E5%8D%95%E6%96%B9%E5%BC%8F/",
            "url": "https://blog.dabing.cool/javamore/RabbitMQ/RabbitMQ-%E7%AE%80%E5%8D%95%E6%96%B9%E5%BC%8F/",
            "title": "RabbitMQ入门（聊天室）-简单模式",
            "date_published": "2022-09-09T16:00:00.000Z",
            "content_html": "<h1 id=\"rabbitmq入门\"><a class=\"markdownIt-Anchor\" href=\"#rabbitmq入门\">#</a> RabbitMQ 入门</h1>\n<p>官网： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tLw==\">https://www.rabbitmq.com/</span></p>\n<p>Java 简单模式文档参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL3R1dG9yaWFscy90dXRvcmlhbC1vbmUtamF2YS5odG1s\">https://www.rabbitmq.com/tutorials/tutorial-one-java.html</span></p>\n<p>需求：使用简单模式完成消息传递</p>\n<p>步骤：</p>\n<p>① 创建工程（生成者、消费者）</p>\n<p>② 分别添加依赖</p>\n<p>③ 编写生产者发送消息</p>\n<p>④ 编写消费者接收消息</p>\n<h2 id=\"1-搭建示例工程\"><a class=\"markdownIt-Anchor\" href=\"#1-搭建示例工程\">#</a> 1. 搭建示例工程</h2>\n<h3 id=\"11-创建工程\"><a class=\"markdownIt-Anchor\" href=\"#11-创建工程\">#</a> 1.1. 创建工程</h3>\n<p>创建项目： <code>rabbitmq-producer</code></p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220902094203897.png\" alt=\"image-20220902094203897\"></p>\n<p>创建项目： <code>rabbitmq-consumer</code></p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220902094209384.png\" alt=\"image-20220902094209384\"></p>\n<h3 id=\"12-添加依赖\"><a class=\"markdownIt-Anchor\" href=\"#12-添加依赖\">#</a> 1.2. 添加依赖</h3>\n<p>往两个 rabbitmq 的 pom.xml 文件中添加如下依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.rabbitmq<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>amqp-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.6.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-compiler-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>source</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>target</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>target</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"2-编写生产者\"><a class=\"markdownIt-Anchor\" href=\"#2-编写生产者\">#</a> 2. 编写生产者</h2>\n<p>编写消息生产者  <code>com.atguigu.rabbitmq.simple.Producer</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>simple</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Channel</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectionFactory</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 创建连接工厂</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 主机地址</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.6.100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 连接端口；默认为 5672</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 虚拟主机名称；默认为 /</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 连接用户名；默认为 guest</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 连接密码；默认为 guest</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 创建连接</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 创建频道</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 声明（创建）队列</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         * queue      参数 1：队列名称</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         * durable    参数 2：是否定义持久化队列，当 mq 重启之后，还在</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         * exclusive  参数 3：是否独占本次连接</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         *            ① 是否独占，只能有一个消费者监听这个队列</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         *            ② 当 connection 关闭时，是否删除队列</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>         * autoDelete 参数 4：是否在不使用的时候自动删除队列，当没有 consumer 时，自动删除</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         * arguments  参数 5：队列其它参数</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"simple_queue\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 要发送的信息</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"你好；小兔子！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         * 参数 1：交换机名称，如果没有指定则使用默认 Default Exchage</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         * 参数 2：路由 key, 简单模式可以传递队列名称</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>         * 参数 3：配置信息</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>         * 参数 4：消息内容</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"simple_queue\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已发送消息：\"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">// 关闭资源</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行程序：<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguNi4xMDA6MTU2NzI=\">http://192.168.6.100:15672</span> <code> </code></p>\n<p>在执行上述的消息发送之后；可以登录 rabbitMQ 的管理控制台，可以发现队列和其消息： <img data-src=\"http://image.dabing.cool/image/image-20220902094308205.png\" alt=\"image-20220902094308205\"></p>\n<h2 id=\"3-编写消费者\"><a class=\"markdownIt-Anchor\" href=\"#3-编写消费者\">#</a> 3. 编写消费者</h2>\n<p>编写消息的消费者  <code>com.atguigu.rabbitmq.simple.Consumer</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>simple</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>rabbitmq<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeoutException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//1. 创建连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//2. 设置参数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.6.100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ip</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 端口  默认值 5672</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 虚拟机 默认值 /</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用户名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 密码</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//3. 创建连接 Connection</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//4. 创建 Channel</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//5. 创建队列 Queue</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        queueDeclare (String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object> arguments)</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        参数：</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            1. queue：队列名称</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            2. durable：是否持久化，当 mq 重启之后，还在</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            3. exclusive：</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                * 是否独占。只能有一个消费者监听这队列</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                * 当 Connection 关闭时，是否删除队列</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            4. autoDelete：是否自动删除。当没有 Consumer 时，自动删除掉</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            5. arguments：参数。</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 如果没有一个名字叫 simple_queue 的队列，则会创建该队列，如果有则不会创建</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"simple_queue\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 接收消息</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">DefaultConsumer</span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>               回调方法，当收到消息后，会自动执行该方法</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>               1. consumerTag：标识</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>               2. envelope：获取一些信息，交换机，路由 key...</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>               3. properties：配置信息</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>               4. body：数据</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AMQP<span class=\"token punctuation\">.</span>BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"consumerTag：\"</span><span class=\"token operator\">+</span>consumerTag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exchange：\"</span><span class=\"token operator\">+</span>envelope<span class=\"token punctuation\">.</span><span class=\"token function\">getExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RoutingKey：\"</span><span class=\"token operator\">+</span>envelope<span class=\"token punctuation\">.</span><span class=\"token function\">getRoutingKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"properties：\"</span><span class=\"token operator\">+</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        basicConsume (String queue, boolean autoAck, Consumer callback)</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        参数：</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            1. queue：队列名称</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            2. autoAck：是否自动确认，类似咱们发短信，发送成功会收到一个确认消息</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            3. callback：回调对象</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// 消费者类似一个监听程序，主要是用来监听消息</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"simple_queue\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>consumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行程序</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20220917235627876.png\" alt=\"image-20220917235627876\"></p>\n<h2 id=\"4-小结\"><a class=\"markdownIt-Anchor\" href=\"#4-小结\">#</a> 4. 小结</h2>\n<p>上述的入门案例中中其实使用的是如下的简单模式：</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20220917235608323.png\" alt=\"image-20220917235608323\"></p>\n<p>在上图的模型中，有以下概念：</p>\n<ul>\n<li>P：生产者，也就是要发送消息的程序</li>\n<li>C：消费者：消息的接受者，会一直等待消息到来。</li>\n<li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li>\n</ul>\n<h1 id=\"简易聊天室\"><a class=\"markdownIt-Anchor\" href=\"#简易聊天室\">#</a> 简易聊天室</h1>\n<p><strong>效果：</strong></p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20220917235819321.png\" alt=\"image-20220917235819321\"></p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20220917235835334.png\" alt=\"image-20220917235835334\"></p>\n<p>因为创建连接部分是公共部分，就不重复写了，可以写一个工具类。</p>\n<p>main 方法也差不多，只不过改改队列名而已。也是瞎写的，反正实现了功能，如果有什么不对的望指点。</p>\n<p><strong>聊天者 1：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> worker1 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">DABING_QUEUE</span><span class=\"token operator\">=</span><span class=\"token string\">\"dabing\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">CZH_QUEUE</span><span class=\"token operator\">=</span><span class=\"token string\">\"czh\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 生产者</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token class-name\">ConnUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DABING_QUEUE</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">DefaultConsumer</span> consumer<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AMQP<span class=\"token punctuation\">.</span>BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在控制台输入信息，回车确认!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CZH_QUEUE</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> consumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">String</span> message<span class=\"token operator\">=</span><span class=\"token string\">\"小冰冰 : \"</span><span class=\"token operator\">+</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">DABING_QUEUE</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送完毕！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>聊天者 2：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> worker2 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">DABING_QUEUE</span><span class=\"token operator\">=</span><span class=\"token string\">\"dabing\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">CZH_QUEUE</span><span class=\"token operator\">=</span><span class=\"token string\">\"czh\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 生产者</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token class-name\">ConnUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CZH_QUEUE</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">DefaultConsumer</span> consumer<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultConsumer</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleDelivery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Envelope</span> envelope<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AMQP<span class=\"token punctuation\">.</span>BasicProperties</span> properties<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> body<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请在控制台输入信息，回车确认!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DABING_QUEUE</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> consumer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">String</span> message<span class=\"token operator\">=</span><span class=\"token string\">\"小辉辉 : \"</span><span class=\"token operator\">+</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">CZH_QUEUE</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>scanner<span class=\"token punctuation\">.</span><span class=\"token function\">hasNextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送完毕！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "RabbitMQ"
            ]
        },
        {
            "id": "https://blog.dabing.cool/algorithm/%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0/",
            "url": "https://blog.dabing.cool/algorithm/%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0/",
            "title": "随机函数-新手",
            "date_published": "2022-09-06T02:00:00.000Z",
            "content_html": "<p>作者：dabing</p>\n<p>新手第二课～ 比较简单</p>\n<p>之后会上传到 github 或者码云上，再说吧。</p>\n<p><strong>随机函数</strong>：[0,1) 之间的数等概率随机</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Math<span class=\"token punctuation\">.</span>Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"1-测试随机函数是等概率\"><a class=\"markdownIt-Anchor\" href=\"#1-测试随机函数是等概率\">#</a> 1- 测试随机函数是等概率</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 测试 Math.random () 是否等概率</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 这里测试 0.5</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> testTimes<span class=\"token operator\">=</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 执行 100 万次</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">double</span> p<span class=\"token operator\">=</span><span class=\"token number\">0d</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> testTimes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">double</span> ans<span class=\"token operator\">=</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ans<span class=\"token operator\">&lt;</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        p<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>count<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>testTimes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0.4999083    即 & lt;0.5 的概率，这里约等于 0.5 说明是等概率的。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"2-由random到其他随机数\"><a class=\"markdownIt-Anchor\" href=\"#2-由random到其他随机数\">#</a> 2 - 由 random 到其他随机数</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 等概率返回 [0,8) 随机数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 等概率返回 [0,8) 随机整数，即 [0,7]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 等概率返回 [1，5] 整数随机</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h1 id=\"3-由15到17\"><a class=\"markdownIt-Anchor\" href=\"#3-由15到17\">#</a> 3 - 由 [1,5] 到 [1,7]</h1>\n<p>只给你一个 <code>f()</code>  函数， <code>f()</code>  表示等概率返回 <code>[1,5]</code>  的随机整数，让你使用 <code>f()</code>  得到 <code>f0()</code> ，等概率返回 <code>[1,7]</code>  的随机整数，就是不许你用 <code>Math.random()</code> ;</p>\n<p><strong>思路：</strong></p>\n<p>1、整数 0，1，2，3…7，的二进制位都是由 0 和 1 组成的。</p>\n<p>2、因此能不能控制将 <code>f()</code>  得到 <code>f1()</code>  等概率返回 0 和 1？----&gt; 可以，因为返回 1 或 2 的概率跟返回 4 或 5 的概率是一样的，也就是等概率，都是 2/5。-----&gt; 控制返回 1 或 2 的时候是事件 0，返回 4 或 5 是事件 1，返回 3 的时候重做。这样事件 0 和事件 1 是等概率的（不明白可以看下面的代码展示）</p>\n<p>3、由 <code>f1()</code>  排列组合正好就能随机得到 [0,7]，即 <code>f2()</code></p>\n<p>4、由 <code>f2()</code>  得到 [1,7] 随机整数，即题目所需 <code>f0()</code></p>\n<p>5、总结一套通用方法</p>\n<p><strong>代码实现：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    * 由函数 f ()---> 得到 [1,7] 的随机整数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    * 这个方法比较通用</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * 如 f () 表示得到 [1,5] 的随机整数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 由 f ()---> 等概率返回 0 和 1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            ans<span class=\"token operator\">=</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ans<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 遇到 3 重做</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 由 f1 ()----> 等概率返回 [0,7] 的随机整数</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * 由 f2 ()---> 等概率返回 [1,7]</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * 遇到 0 重做</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">f0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            ans<span class=\"token operator\">=</span><span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ans<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遇到 0 重做</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"4-randombox到任意范围随机整数\"><a class=\"markdownIt-Anchor\" href=\"#4-randombox到任意范围随机整数\">#</a> 4 - RandomBox 到任意范围随机整数</h1>\n<p>同样思路，给你一个 RandomBox，不管他是随机得哪个范围，只要找到等概率的事件，把这两个事件当作 0 和 1，就都能组成任何范围的数。</p>\n<p>思路：</p>\n<p>1、找等概率事件，范围 <code>[min,max]</code> ，分两半，左一半，右一半，如果有中间就重做。</p>\n<p>如果是奇数，就有中间一个数得重做。偶数就正好一半，不用重做</p>\n<p>2、由 RandomBox–&gt; 等概率返回 0 和 1</p>\n<p>3、确定 from–&gt;to 需要多少个二进制位</p>\n<p>4、随机组合返回整数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 更加通用的，给你一个 RandomBox, 等概率返回任意范围的随机整数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 然后让你通过这个 RandomBox 来实现等概率返回指定范围的随机整数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomBox</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 这个结构是唯一的随机机制</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 你只能初始化并使用，不可修改</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 初始化时请一定不要让 mi==ma</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">RandomBox</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mi<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ma<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            min <span class=\"token operator\">=</span> mi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            max <span class=\"token operator\">=</span> ma<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 13 ~ 17</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 13 + [0,4]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> min <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">-</span> min <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">rand01</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RandomBox</span> randomBox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">int</span> min<span class=\"token operator\">=</span>randomBox<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">int</span> max<span class=\"token operator\">=</span>randomBox<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 判断是否为奇数</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">int</span> size<span class=\"token operator\">=</span>max<span class=\"token operator\">-</span>min<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">boolean</span> odd <span class=\"token operator\">=</span> size <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 与 2 取余为 1 即为奇数</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">int</span> mid<span class=\"token operator\">=</span>size<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            ans<span class=\"token operator\">=</span>randomBox<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>odd <span class=\"token operator\">&amp;&amp;</span> ans<span class=\"token operator\">==</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> ans <span class=\"token operator\">&lt;</span> mid <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 给你一个 RandomBox，这是唯一能借助的随机机制</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 等概率返回 from~to 范围上任何一个数</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 要求 from&lt;=to</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RandomBox</span> randomBox<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from <span class=\"token operator\">==</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">return</span> from<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">// 3 ~ 9</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// 0 ~ 6</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 0 ~ range</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">int</span> range <span class=\"token operator\">=</span> <span class=\"token keyword\">to</span> <span class=\"token operator\">-</span> from<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// 求 0～range 需要几个 2 进制位</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> num<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> range<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 我们一共需要 num 位</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 最终的累加和，首先 + 0 位上是 1 还是 0，1 位上是 1 还是 0，2 位上是 1 还是 0...</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                ans <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rand01</span><span class=\"token punctuation\">(</span>randomBox<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">></span> range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">return</span> ans <span class=\"token operator\">+</span> from<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"5-对数器\"><a class=\"markdownIt-Anchor\" href=\"#5-对数器\">#</a> 5 - 对数器</h1>\n<p>利用 Math.random () 生成随机的数组序列，对代码进行测试。</p>\n<p>如：生成随机大小的数组序列</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 生成随机大小的随机序列</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param maxLen 最大长度</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param maxVal 最大数字</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">randArrs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxLen<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> maxVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>maxLen<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>maxVal<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如：生成随机的有序序列</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 随机有序序列</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">orderRandArr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxLen<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> maxVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token function\">randArrs</span><span class=\"token punctuation\">(</span>maxLen<span class=\"token punctuation\">,</span>maxVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>…</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "https://blog.dabing.cool/hexo/ssl/",
            "url": "https://blog.dabing.cool/hexo/ssl/",
            "title": "服务器配置hexo开启https（ssl证书）",
            "date_published": "2022-09-05T13:46:25.000Z",
            "content_html": "<p>作者：dabing（王甜甜）</p>\n<p>参加了又拍云的联盟活动，白嫖的 10G 的存储空间 + 15GB 的 CDN 免费流量，有域名并且已经备案的有网站的小伙伴也可以去试试：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudXB5dW4uY29tL2xlYWd1ZQ==\">又拍云联盟 - 开发者帮助计划，为开发者加速 - 又拍云 (upyun.com)</span></p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220909084820511.png\" alt=\"image-20220909084820511\"></p>\n<p>顺便申请了免费的 SSL 证书，你看我的小站现在是 https 开头的啦～～～</p>\n<p>一些申领过程可以参考我友链中余白的博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudmlweXViYWkudG9wL3Bvc3QvYTQyYmVmYzYuaHRtbA==\">hexo 的优化：又拍云 cdn 加速 | 余白の小屋 (vipyubai.top)</span></p>\n<p>我这里只是记录一下我在服务器 nginx 如何开启 https（SSL 证书）</p>\n<h1 id=\"获取证书\"><a class=\"markdownIt-Anchor\" href=\"#获取证书\">#</a> 获取证书</h1>\n<p>先从你的又拍云平台把已经颁发了的证书下载下来。</p>\n<p>我的下载下来有两个文件：</p>\n<ul>\n<li>blog.dabing.cool.crt</li>\n<li>blog.dabing.cool.key</li>\n</ul>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220909085441872.png\" alt=\"image-20220909085441872\"></p>\n<h1 id=\"服务器配置nginx\"><a class=\"markdownIt-Anchor\" href=\"#服务器配置nginx\">#</a> 服务器配置 nginx</h1>\n<p>我参考的这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC84NTA0MDYyNQ==\">Nginx 配置 SSL 证书</span></p>\n<p>懒得再写一次了，这里记录一下我的配置</p>\n<h2 id=\"1-先检测一下自己的环境是否允许\"><a class=\"markdownIt-Anchor\" href=\"#1-先检测一下自己的环境是否允许\">#</a> 1. 先检测一下自己的环境是否允许：</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nginx <span class=\"token parameter variable\">-V</span></pre></td></tr></table></figure><p>看到这个 <code>--with-stream_ssl_module</code>  那就 ok</p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220909090711795.png\" alt=\"image-20220909090711795\"></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>openssl version</pre></td></tr></table></figure><p><img data-src=\"http://image.dabing.cool/image/image-20220909090843974.png\" alt=\"image-20220909090843974\"></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-qa</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token function\">open</span>  <span class=\"token comment\"># 查询是否安装 openssl</span></pre></td></tr></table></figure><p><img data-src=\"http://image.dabing.cool/image/image-20220909091040936.png\" alt=\"image-20220909091040936\"></p>\n<h2 id=\"2-confd的文件配置\"><a class=\"markdownIt-Anchor\" href=\"#2-confd的文件配置\">#</a> 2. conf.d/ 的文件配置</h2>\n<p>再你的 etc/nginx/conf.d/ 文件夹下创建一个文件，我的是 <code>etc/nginx/conf.d/blog.conf</code></p>\n<p>我的配置内容如下：</p>\n<p>值得注意的是：# 如果你的 ssl on 爆红或者你的 nginx 是 1.15.x 以上版本的话</p>\n<p>得将 <code>listen 443</code>  和 <code>ssl on</code>  改成 <code>listen 443 ssl </code></p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">listen</span> <span class=\"token number\">443</span> ssl</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\"># 如果你的 ssl on 爆红或者你的 nginx 是 1.15 以上版本的话，</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">server_name</span> blog.dabing.cool</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\"># 填写绑定证书的域名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">ssl_certificate</span> /etc/nginx/cert/blog.dabing.cool.crt</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">ssl_certificate_key</span> /etc/nginx/cert/blog.dabing.cool.key</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">ssl_session_timeout</span> <span class=\"token number\">5m</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">ssl_protocols</span> TLSv1 TLSv1.1 TLSv1.2</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\"># 按照这个协议配置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\"># 按照这个套件配置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">ssl_prefer_server_ciphers</span> <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">root</span> /var/www/hexo</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\"># 站点目录</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">index</span>  index.html index.htm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">server</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">listen</span>       <span class=\"token number\">80</span> default_server</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">listen</span>       [::]:80 default_server</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">server_name</span>  xxx.xx.xxx.xx</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 这里可以填你的主机 ip</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">root</span>         /var/www/hexo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">rewrite</span> ^(.*) https://blog.dabing.cool</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\"># 添加的语句</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后重启 nginx 即可：</p>\n<p><code>systemctl restart nginx.service</code>  重启</p>\n<p>如果你遇到类似这样的错误：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Job <span class=\"token keyword\">for</span> nginx.service failed because the control process exited with error code. See <span class=\"token string\">\"systemctl status nginx.service\"</span> and <span class=\"token string\">\"journalctl -xe\"</span> <span class=\"token keyword\">for</span> details.</pre></td></tr></table></figure><p>有可能是你的 80 端口或者 443 端口被占用着，命令查看一下</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> nginx</pre></td></tr></table></figure><p>有就把进程杀掉，再重启即可。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> pid</pre></td></tr></table></figure><p>再访问看看：<a href=\"https://blog.dabing.cool/\">https://blog.dabing.cool/</a></p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220909100723165.png\" alt=\"image-20220909100723165\"></p>\n",
            "tags": [
                "Hexo",
                "ssl",
                "https"
            ]
        },
        {
            "id": "https://blog.dabing.cool/diary/%E6%89%93%E5%8D%A1%E6%97%A5%E8%AE%B0/",
            "url": "https://blog.dabing.cool/diary/%E6%89%93%E5%8D%A1%E6%97%A5%E8%AE%B0/",
            "title": "打卡日记",
            "date_published": "2022-09-02T16:00:00.000Z",
            "content_html": "<p>因为摆烂好久了，天天不学习，试试在这打卡能不能让自己好好学习，这个打卡日记不会一直在的，但是至少明年的时候还在，应该到明年我就把这个打卡下了哈哈哈哈，因为我要是把这个博客放简历里的话我是不想让公司的人看到我的打卡日记的。</p>\n<p>以前也是有好好打卡的，试过很多地方，不过都是在校时候的事情了。试过在本子上，我小本本都写好几本了，写的贼详细，几乎每天都写对于以前的我还是蛮有效果的。</p>\n<p>一些好习惯啊不能丢的呀，例如：记账、睡前看书、不带手机上床、看电影、番茄学习法（休息时间可以上个厕所啊，看十几分钟其他书啊，或者搞卫生走走啊都行）。。。。</p>\n<h1 id=\"一-2022年10月\"><a class=\"markdownIt-Anchor\" href=\"#一-2022年10月\">#</a> 一、2022 年 10 月</h1>\n<h3 id=\"1-2022-10-19-周三\"><a class=\"markdownIt-Anchor\" href=\"#1-2022-10-19-周三\">#</a> 1 . 2022-10-19  周三   🌤</h3>\n<ol>\n<li><s>🌸算法新手班 - 第三课（练习）</s></li>\n<li><s>🌸SpringCloud 笔记整理</s> (1/4)</li>\n</ol>\n<h3 id=\"2-2022-10-20-周四\"><a class=\"markdownIt-Anchor\" href=\"#2-2022-10-20-周四\">#</a> 2 . 2022-10-20  周四  🌤</h3>\n<p>今日计划🌸：(完成划线)</p>\n<ol>\n<li><s>🗒SpringCloud 笔记整理</s></li>\n<li><s>📒记账</s></li>\n<li><s>工作：健康度监控 - 实时停机及时率（整理文档 + 部分代码）</s>- 部分不具备办公条件</li>\n</ol>\n",
            "tags": [
                "打卡"
            ]
        },
        {
            "id": "https://blog.dabing.cool/diary/%E8%84%B1%E5%8F%91%E6%97%A5%E8%AE%B0/",
            "url": "https://blog.dabing.cool/diary/%E8%84%B1%E5%8F%91%E6%97%A5%E8%AE%B0/",
            "title": "脱发日记",
            "date_published": "2022-09-02T16:00:00.000Z",
            "content_html": "<p>2022-09-15 周四  🌞   郑州📍</p>\n<p>就跟日记一样吧记录一下，因为觉得自己有脱发的迹象，发出来给大家参考参考，不慌。</p>\n<p>（我可能没有很严重）</p>\n<p>因为我大学的时候我感觉整个寝室，就我不掉头发，掉的极少。</p>\n<p>但是 21 年 7 月份到郑州之后，8 月就感觉开始掉头发了。感觉枕头、地板、下水道、梳头发的地方全是我的头发，真的救命。</p>\n<p>个人感觉不咋熬夜，不焦虑，没有晚上睡不着觉。</p>\n<p>就想会不会是因为这里的水有问题不习惯？（因为我是广东人在河南工作）或者是因为我用了阿道夫洗发水洗脱发了？</p>\n<p>正确的做法是去医院看看。🔔</p>\n<p>这里就是记录一下都看了啥～</p>\n<p>我是 20220904 中午去的，医生说如果没有失眠之类的，做检查看看，一个是 “性激素六项”，还有一个是啥我忘了，因为这个检查要空腹就没做。</p>\n<p>我的 “性激素六项” 都在正常的范围内，我百度看是说：“<strong>脱发之后进行性激素 6 项检查，主要是观察是否有脂溢性脱发或者是雄激素性脱发的，发现之后可以应用相应的药物调节激素，具体的药物要根据化验结果来确定</strong>。”💡</p>\n<p><strong>医生的提议：</strong></p>\n<ol>\n<li>\n<p>如果洗头的时候掉头发没有超过 100 根的话不算脱发（我感觉应该没有 100 根，脱发要求还这么严苛吗？）</p>\n</li>\n<li>\n<p>不熬夜，少吃油腻辛辣的东西（就那堆呗）</p>\n</li>\n<li>\n<p>可以适当使用黑芝麻，黑豆，何首乌，固肾等相关的东西</p>\n</li>\n<li>\n<p>开了一些固肾补肝的药（这个是自愿可以不开）</p>\n</li>\n<li>\n<p>用了药还是感觉在脱发，实在不行可以试下米诺地尔生发擦剂（有男士和女士的）</p>\n</li>\n</ol>\n<p>花钱的话，检查 275 块，药 3 盒 100 多，都是刷医保的，都报销了一半，扣医保账户余额一半。</p>\n<p>哈哈哈哈反正我是看了医生之后我这个一两个星期都觉得自己心安了很多，都感觉自己不掉头发了。</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20220915214434388.png\" alt=\"image-20220915214434388\"></p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20220915214445593.png\" alt=\"image-20220915214445593\"></p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20220915214530766.png\" alt=\"image-20220915214527011\"></p>\n<p>-------20221019  周三 --------</p>\n<p>说下现在的情况，我太懒了，我吃完要之后没有去继续去买药吃，但是我至少现在觉得掉头发的情况又在减缓。虽然每次洗头还是会掉不少头发，特别是抹护发素的时候，很奇怪。</p>\n<p>我也没有使用米诺地尔，因为我看到这个产品会有一个狂脱期，我害怕哈哈哈哈，本就不多，万一狂脱了之后不长了咋办呐。</p>\n<p>我觉得我掉的多是因为我的头发爱出油了，之前我的头发尽管四五天不洗头也不会大油头的，现在两天就会很油。我现在勤快了点了，好像就没有前段时间掉的那么多了。然后我真的太懒就没有在意这个头发的问题了，就勤洗头，认准<strong>月桂醇聚醚硫酸酯钠</strong>这个东东，去油的。</p>\n<p>（我也是看了 b 站兔八哥说的，我觉得他说的很有道理，还有胖天使也说过脱发的话题）</p>\n",
            "tags": [
                "脱发"
            ]
        },
        {
            "id": "https://blog.dabing.cool/algorithm/%E5%89%8D%E7%BC%80%E5%92%8C/",
            "url": "https://blog.dabing.cool/algorithm/%E5%89%8D%E7%BC%80%E5%92%8C/",
            "title": "前缀和-新手",
            "date_published": "2022-09-01T02:00:00.000Z",
            "content_html": "<p>作者：dabing</p>\n<p>新手第二课～</p>\n<p>之后会上传到 github 或者码云上，再说吧。</p>\n<p>首先你得知道什么是前缀和，<strong>就是序列的前 n 项和</strong>。</p>\n<h1 id=\"1-一维前缀和\"><a class=\"markdownIt-Anchor\" href=\"#1-一维前缀和\">#</a> 1. 一维前缀和</h1>\n<p>先看两道 leetcode 题：</p>\n<ol>\n<li>简单得到一维前缀和序列</li>\n</ol>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220905153701740.png\" alt=\"image-20220905153701740\"></p>\n<ol start=\"2\">\n<li>返回指定范围的元素的和</li>\n</ol>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220905154926588.png\" alt=\"image-20220905154926588\"></p>\n<p>第一道是实现前缀和，第二道是前缀和的应用求区域和。</p>\n<p>下面代码展示：</p>\n<h2 id=\"1-求前缀和\"><a class=\"markdownIt-Anchor\" href=\"#1-求前缀和\">#</a> 1 - 求前缀和</h2>\n<p><strong>两种方式：</strong></p>\n<ol>\n<li>跟数组一样的大小，依次求出前 n 项和。</li>\n</ol>\n<p>求区间 <code>[L,R]</code>  元素和时，取出 <code>preNum[R]</code>  和 <code>preNum[L-1]</code> ，作差即可。</p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220905214708504.png\" alt=\"image-20220905214708504\"></p>\n<ol start=\"2\">\n<li>\n<p>一个二维矩阵，缺点是前面生成二维矩阵的时候要花时间和空间。时间复杂度 <code>n*n/2</code> ，空间 <code>n * n</code></p>\n<p>但是当你需要做超多次求区间和操作的时间，你可以直接拿出来不用运算。</p>\n</li>\n</ol>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220905215950938.png\" alt=\"image-20220905215950938\"></p>\n<p>代码：可以直接粘到 idea 中执行，由 mian 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 这里提供的方案是创建一个跟数组一样大小的数组，里面 0-i 的前缀和</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 要求 2~7 之间的和的时候就是就 arr [7]-arr [1]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getPreNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preNum<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        preNum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            preNum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>preNum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> preNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 求数组 arr 的第 L 位到第 R 位的之间数字的和 (区域和)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">preNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preNum<span class=\"token operator\">=</span><span class=\"token function\">getPreNum</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token operator\">?</span>preNum<span class=\"token punctuation\">[</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>preNum<span class=\"token punctuation\">[</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>preNum<span class=\"token punctuation\">[</span><span class=\"token class-name\">L</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">preNum</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">preNum</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">preNum</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">preNum</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当然还有二维的，一样的道理：就是下面这样的原理。</p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220905155508969.png\" alt=\"image-20220905155508969\"></p>\n<p>sorry，我懒了。代码不复杂我不写了，感兴趣的自己实现一下。</p>\n",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "https://blog.dabing.cool/algorithm/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/",
            "url": "https://blog.dabing.cool/algorithm/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/",
            "title": "简单排序-新手",
            "date_published": "2022-08-31T02:00:00.000Z",
            "content_html": "<p>作者：dabing</p>\n<p>算法小白开始算法学习了，从最简单的开始，一步一步来，这里记录一下。</p>\n<p>第一天～</p>\n<p>之后会上传到 github 或者码云上，再说吧。</p>\n<p>这里的简单排序实现包括：选择排序、冒泡排序和插入排序。 直接拷贝到 idea 就能运行，有 main 方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>dabing</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> sort <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 选择排序</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 每次都中 i~n-1 中选择出一个最小的数放前面</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param arrs</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>  <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arrs <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arrs<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//0~n-1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//1~n-1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//2~n-1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//n-2~n-1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arrs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">int</span> minValue<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arrs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                minValue<span class=\"token operator\">=</span>arrs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>arrs<span class=\"token punctuation\">[</span>minValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> j <span class=\"token operator\">:</span> minValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arrs<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>minValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 冒泡排序</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * 每次相邻的两位数字对比，如果前一位比后一位大，则交换位置，这样每次下来最大的数字就会跑到队尾去了</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @param arrs</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arrs<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arrs<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">//0~n-1</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">//0~n-2</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">//0~n-3</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//0~1</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span><span class=\"token operator\">=</span>arrs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> end<span class=\"token operator\">=</span><span class=\"token class-name\">N</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>end<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>end<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">//0~end</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 0 1   1 2   2 3  ....</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> second <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> second<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arrs<span class=\"token punctuation\">[</span>second<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arrs<span class=\"token punctuation\">[</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arrs<span class=\"token punctuation\">,</span>second<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * 插入排序</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * 像你玩扑克整牌一样，手上的牌已经有序了，你新拿来一个牌，从右往左一个一个对比，找到自己的位置插入</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     * @param arrs</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertSort1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arrs<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arrs<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">//0~1</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">//0~2</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">//0~3</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">//0~n-1</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span><span class=\"token operator\">=</span>arrs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">int</span> endNum<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>endNum<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> arrs<span class=\"token punctuation\">[</span>endNum<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>arrs<span class=\"token punctuation\">[</span>endNum<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arrs<span class=\"token punctuation\">,</span>endNum<span class=\"token punctuation\">,</span>endNum<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                endNum<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertSort2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arrs<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arrs<span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">//0~1</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">//0~2</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\">//0~3</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">//0~n-1</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span><span class=\"token operator\">=</span>arrs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> endNum<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>endNum<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> arrs<span class=\"token punctuation\">[</span>endNum<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arrs<span class=\"token punctuation\">[</span>endNum<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>endNum <span class=\"token operator\">--</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arrs<span class=\"token punctuation\">,</span>endNum<span class=\"token punctuation\">,</span>endNum<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrs<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">int</span> tmp<span class=\"token operator\">=</span>arrs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        arrs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arrs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        arrs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arrs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arrs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrs<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token comment\">//        selectSort(arrs);</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token comment\">//        bubbleSort(arrs);</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token function\">insertSort1</span><span class=\"token punctuation\">(</span>arrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法"
            ]
        },
        {
            "id": "https://blog.dabing.cool/hexo/Valine-Admin/",
            "url": "https://blog.dabing.cool/hexo/Valine-Admin/",
            "title": "使用Valine-Admin实现评论邮件提醒",
            "date_published": "2022-08-30T14:46:25.000Z",
            "content_html": "<p>作者：dabing（王甜甜）<br>\nvaline 文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92YWxpbmUuanMub3JnL25vdGlmeS5odG1s\">https://valine.js.org/notify.html</span></p>\n<p>github 地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Rlc2VydHNQL1ZhbGluZS1BZG1pbg==\">https://github.com/DesertsP/Valine-Admin</span></p>\n<p>使用说明参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3poYW9qdW4xOTk4L1ZhbGluZS1BZG1pbg==\">https://github.com/zhaojun1998/Valine-Admin</span></p>\n<p>为啥用这个呢？人官方推荐的，那肯定是比较适配的了。</p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220901102318063.png\" alt=\"img\"></p>\n<p>使用这个 valine-admin 评论前提是你前面的评论系统已经正常使用，并且 leancloud 数据存储也配好了。</p>\n<p>就只是添加一个邮件提醒的功能而已。</p>\n<p>以上评论系统的怎么配？可以参考 valine 的官网文档，很详细：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92YWxpbmUuanMub3JnL3F1aWNrc3RhcnQuaHRtbA==\">https://valine.js.org/quickstart.html</span></p>\n<h1 id=\"在-leancloud-部署-valine-admin\"><a class=\"markdownIt-Anchor\" href=\"#在-leancloud-部署-valine-admin\">#</a> 在 LeanCloud 部署 Valine-Admin</h1>\n<p>进入<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb25zb2xlLmxlYW5jbG91ZC5jbi9hcHBz\"> LeanCloud</span> 对应的 Valine 应用里去。</p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220901103247667.png\" alt=\"img\"></p>\n<h2 id=\"1-部署-git-项目\"><a class=\"markdownIt-Anchor\" href=\"#1-部署-git-项目\">#</a> 1. 部署 git 项目</h2>\n<p>点击  <code>云引擎</code>  -&gt;  <code>WEB</code>  -&gt;  <code>部署</code>  ，按 github 所说，在部署项目中填写代码库：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3poYW9qdW4xOTk4L1ZhbGluZS1BZG1pbg==\">https://github.com/zhaojun1998/Valine-Admin</span></p>\n<p>手动部署，再点击部署按钮即可。</p>\n<p>但是作者这个代码 node.js 是 6 版本的，版本不对，使用作者的可能会部署失败。这个后面展示。</p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220901105142332.png\" alt=\"img\"></p>\n<p><strong>问题</strong>：会报如下这样的错</p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220901105317095.png\" alt=\"img\"></p>\n<p>由于 node.js 版本过低导致。</p>\n<p><strong>解决</strong>：</p>\n<ol>\n<li>把作者的项目 fork 到自己仓库下，修改 package.json 的 node 版本为 12.x 即可</li>\n<li>当然也可以直接使用我的地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhYmluZzg1L1ZhbGluZS1BZG1pbg==\">https://github.com/dabing85/Valine-Admin</span></li>\n</ol>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220901110153266.png\" alt=\"img\"></p>\n<h2 id=\"2-邮件环境变量配置\"><a class=\"markdownIt-Anchor\" href=\"#2-邮件环境变量配置\">#</a> 2. 邮件环境变量配置</h2>\n<p>点击  <code>云引擎</code>  -&gt;  <code>WEB</code>  -&gt;  <code>设置</code>  ，添加环境变量，添加变量如下：</p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220901144642095.png\" alt=\"img\"></p>\n<p>我添加的都是必填，再加一个域名的参数:</p>\n<ul>\n<li>\n<p><strong>SITE_NAME</strong> : 网站名称。</p>\n</li>\n<li>\n<p><strong>SITE_URL</strong> : 网站地址。</p>\n</li>\n<li>\n<p><strong>SMTP_USER</strong> : SMTP 服务用户名，一般为邮箱地址。</p>\n</li>\n<li>\n<p><strong>SMTP_PASS</strong> : SMTP 密码，一般为授权码，而不是邮箱的登陆密码，请自行查询对应邮件服务商的获取方式。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZXJ2aWNlLm1haWwucXEuY29tL2NnaS1iaW4vaGVscD9zdWJ0eXBlPTEmYW1wO2lkPTI4JmFtcDtubz0xMDAxMjU2\">QQ 邮箱获取授权码</span> <span class=\"exturl\" data-url=\"aHR0cDovL2hlbHAubWFpbC4xNjMuY29tL2ZhcURldGFpbC5kbz9jb2RlPWQ3YTVkYzg0NzFjZDBjMGU4YjRiOGY0ZjhlNDk5OThiMzc0MTczY2ZlOTE3MTMwNWZhMWNlNjMwZDdmNjdhYzJjZGE4MDE0NWExNzQyNTE2\">网易邮箱获取授权码</span></p>\n</li>\n<li>\n<p><strong>SMTP_SERVICE</strong> : 邮件服务提供商，支持  <code>QQ</code>  、  <code>163</code>  、  <code>126</code>  、  <code>Gmail</code>  、 <code>Yahoo</code>  、 … ，全部支持请参考 : <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlbWFpbGVyLmNvbS9zbXRwL3dlbGwta25vd24vI3N1cHBvcnRlZC1zZXJ2aWNlcw==\">Nodemailer Supported services</span>。 — 如这里没有你使用的邮件提供商，请查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhYmluZzg1L1ZhbGluZS1BZG1pbi9ibG9iL21hc3Rlci8lRTklQUIlOTglRTclQkElQTclRTklODUlOEQlRTclQkQlQUUubWQjJUU4JTg3JUFBJUU1JUFFJTlBJUU0JUI5JTg5JUU5JTgyJUFFJUU0JUJCJUI2JUU2JTlDJThEJUU1JThBJUExJUU1JTk5JUE4\">自定义邮件服务器</span></p>\n</li>\n<li>\n<p><strong>SENDER_NAME</strong>: 寄件人名称。</p>\n</li>\n<li>\n<p><strong>SENDER_EMAIL</strong> : 发件人邮箱</p>\n</li>\n</ul>\n<p>也有其他可选参数：</p>\n<ul>\n<li><strong>ADMIN_URL</strong> ： [建议] Web 主机二级域名（云引擎域名），用于自动唤醒</li>\n<li><strong>BLOGGER_EMAIL</strong> ： [可选] 博主通知收件地址，默认使用 SENDER_EMAIL</li>\n<li><strong>AKISMET_KEY</strong> ： [可选] Akismet Key 用于垃圾评论检测，设为 MANUAL_REVIEW 开启人工审核，留空不使用反垃圾</li>\n</ul>\n<p>如果没绑定域名的话，可以不填 ADMIN_URL 这个参数，也能用，只不过 leancloud 每天会有休眠 6 小时，没有请求 30 分钟就会休眠了，绑定域名是为了能做定时任务自动唤醒。(下面会做展示)</p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220901145720995.png\" alt=\"img\"></p>\n<p>完成上面两步其实都已经可以使用了。不记得要不要重启了。自己测试测试。</p>\n<h2 id=\"3-leancloud-休眠策略\"><a class=\"markdownIt-Anchor\" href=\"#3-leancloud-休眠策略\">#</a> 3. LeanCloud 休眠策略</h2>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3poYW9qdW4xOTk4L1ZhbGluZS1BZG1pbi9ibG9iL21hc3Rlci8lRTklQUIlOTglRTclQkElQTclRTklODUlOEQlRTclQkQlQUUubWQjbGVhbmNsb3VkLSVFNCVCQyU5MSVFNyU5QyVBMCVFNyVBRCU5NiVFNyU5NSVBNQ==\">LeanCloud 休眠策略</span></p>\n<blockquote>\n<ol>\n<li>绑定域名</li>\n<li>添加上配置项（环境变量）</li>\n<li>配置定时任务</li>\n</ol>\n</blockquote>\n<ol>\n<li>绑定域名</li>\n</ol>\n<p>同样在  <code>云引擎</code>  -&gt;  <code>WEB</code>  -&gt;  <code>设置</code>  ，绑定域名。</p>\n<p>据说以前是有 leancloud 有提供以前共享的二级域名，但是现在取消了，我这个是自己在腾讯云租的一年，618 租的，才十几块钱一年。</p>\n<p>编一个三级域名，为了好区分我直接写 leancloud。 然后去腾讯云解析域名，记录类型是 CNAME，记录值填 leancloud 推荐的那个节点，即我下面框起来的那个。</p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220901150934361.png\" alt=\"img\"></p>\n<p>解析完之后等等刷新一下，就显示已绑定状态了。</p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220901151247337.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li>添加上配置项（环境变量）</li>\n</ol>\n<p>即 <strong>ADMIN_URL</strong> ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFuY2xvdWQuZGFiaW5nLmNvb2wv\">https://leancloud.dabing.cool/</span></p>\n<p>可以看我上边的截图</p>\n<ol start=\"3\">\n<li>配置定时任务</li>\n</ol>\n<p>点击  <code>定时任务</code>  -&gt;  <code>创建定时任务</code></p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220905143608005.png\" alt=\"image-20220905143608005\"></p>\n<p><code>self_wake</code>  ，cron 表达式：  <code>0 */30 0-16 * * ?</code>  ，表示每天 0 点到 16 点每半小时唤醒一次</p>\n<p><code>resend_mails</code>  ， cron 表达式：  <code>0 0 0 * * ?</code>  ，表示检查 24 小时以前有无漏发邮件，有则重发 再到部署出重启部署即可。</p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220901151813671.png\" alt=\"img\"></p>\n<p>成功唤醒的状态码是 200</p>\n<p><img data-src=\"https://www.vipyubai.top//dabing/image-20220901152512376.png\" alt=\"img\"></p>\n<h2 id=\"补充\"><a class=\"markdownIt-Anchor\" href=\"#补充\">#</a> 补充</h2>\n<p>配置了定时任务之后当天我没发现什么问题，过两天我发现日志里有报错信息：</p>\n<p><strong>&quot;error&quot;:&quot; 因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠</strong></p>\n<p>也有成功的时候，大部分都是从 7 点开始就是唤醒失败的。</p>\n<p><img data-src=\"http://image.dabing.cool/image/image-20220905150734160.png\" alt=\"image-20220905150734160\"></p>\n<p>百度了一下：</p>\n<p>大家可以参考 [优雅解决 LeanCloud 流控问题](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNjI4OTUw\">优雅解决 LeanCloud 流控问题 - 腾讯云开发者社区 - 腾讯云 (tencent.com)</span>), 或者再百度看看别的。我不折腾了</p>\n<p><img data-src=\"http://image.dabing.cool/image/kf7k2w33cj.png\" alt=\"preload\"></p>\n",
            "tags": [
                "Hexo",
                "Valine-Admin"
            ]
        },
        {
            "id": "https://blog.dabing.cool/javamore/cache/redis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81%E6%A0%A1%E9%AA%8C/",
            "url": "https://blog.dabing.cool/javamore/cache/redis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81%E6%A0%A1%E9%AA%8C/",
            "title": "Redis实现手机验证码校验",
            "date_published": "2022-08-20T02:10:10.000Z",
            "content_html": "<h2 id=\"目标-完成一个手机验证码功能\"><a class=\"markdownIt-Anchor\" href=\"#目标-完成一个手机验证码功能\">#</a> 目标 - 完成一个手机验证码功能</h2>\n<p><strong>要求：</strong><br>\n1、输入手机号，点击发送后随机生成 6 位数字码，2 分钟有效<br>\n 2、输入验证码，点击验证，返回成功或失败<br>\n 3、每个手机号每天只能输入 3 次</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731164343801.png\" alt=\"image-20220731164343801\"></p>\n<p><strong>实现：</strong></p>\n<h3 id=\"前端代码\"><a class=\"markdownIt-Anchor\" href=\"#前端代码\">#</a> 前端代码：</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span>@ page language<span class=\"token operator\">=</span><span class=\"token string\">\"java\"</span> contentType<span class=\"token operator\">=</span><span class=\"token string\">\"text/html; charset=UTF-8\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    pageEncoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">%</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Insert title here<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span>script  src<span class=\"token operator\">=</span><span class=\"token string\">\"static/jquery/jquery-3.1.0.js\"</span> <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span>link href<span class=\"token operator\">=</span><span class=\"token string\">\"static/bs/css/bootstrap.min.css\"</span> rel<span class=\"token operator\">=</span><span class=\"token string\">\"stylesheet\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span>script  src<span class=\"token operator\">=</span><span class=\"token string\">\"static/bs/js/bootstrap.min.js\"</span>   <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"row\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"alertdiv\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"col-md-12\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t          <span class=\"token operator\">&lt;</span>form <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"navbar-form navbar-left\"</span> role<span class=\"token operator\">=</span><span class=\"token string\">\"search\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"codeform\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"form-group\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"form-control\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"填写手机号\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"phone_no\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"btn btn-default\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"sendCode\"</span><span class=\"token operator\">></span>发送验证码<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span>font id<span class=\"token operator\">=</span><span class=\"token string\">\"countdown\"</span> color<span class=\"token operator\">=</span><span class=\"token string\">\"red\"</span> <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>font<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"form-control\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"填写验证码\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"verify_code\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"btn btn-default\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"verifyCode\"</span><span class=\"token operator\">></span>确定<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span>font id<span class=\"token operator\">=</span><span class=\"token string\">\"result\"</span> color<span class=\"token operator\">=</span><span class=\"token string\">\"green\"</span> <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>font<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>font id<span class=\"token operator\">=</span><span class=\"token string\">\"error\"</span> color<span class=\"token operator\">=</span><span class=\"token string\">\"red\"</span> <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>font<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">var</span> t<span class=\"token operator\">=</span><span class=\"token number\">120</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设定倒计时的时间 </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">var</span> interval<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">refer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#countdown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请于\"</span><span class=\"token operator\">+</span>t<span class=\"token operator\">+</span><span class=\"token string\">\"秒内填写验证码 \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显示倒计时 </span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    t<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计数器递减 </span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    \t<span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    \t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#countdown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证码已失效，请重新发送！ \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#sendCode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t       </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t   $<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SendCodeServlet\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#codeform\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t    \t <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">==</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t    \t\t t<span class=\"token operator\">=</span><span class=\"token number\">120</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t    \t\t <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t    \t\t interval<span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"refer()\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 启动 1 秒定时  </span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t   \t\t <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">==</span><span class=\"token string\">\"limit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t   \t\t\t<span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t   \t\t\t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#countdown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单日发送超过次数！ \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t   \t\t <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#verifyCode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t    </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t   $<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CheckCodeServlet\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#codeform\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t    \t <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">==</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t    \t\t <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"green\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t    \t\t <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t    \t\t <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t    \t\t <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#countdown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t   \t\t <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t    \t\t <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t    \t\t <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t   \t\t <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"后端代码\"><a class=\"markdownIt-Anchor\" href=\"#后端代码\">#</a> 后端代码：</h3>\n<ol>\n<li>点击发送验证码时：</li>\n</ol>\n<p>将数据存入 redis 中</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>dabing<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>servlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Jedis</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Duration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocalTime</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 处理发送验证码的 Servlet</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/SendCodeServlet\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SendCodeServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">String</span> phoneNo <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phone_no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>phoneNo<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>phoneNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx.xxx.xx.xx\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">String</span> countKey<span class=\"token operator\">=</span>phoneNo<span class=\"token operator\">+</span><span class=\"token string\">\":count\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 生成验证码的次数 key</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> codeKey<span class=\"token operator\">=</span>phoneNo<span class=\"token operator\">+</span><span class=\"token string\">\":code\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 手机验证码 key</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">String</span> count <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>countKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">String</span> code<span class=\"token operator\">=</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code=\"</span><span class=\"token operator\">+</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 证明没有发送过验证码</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 保存验证码到 redis，过期时间 120 秒</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">setex</span><span class=\"token punctuation\">(</span>codeKey<span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 设置过期时间为今天的剩余时间</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">setex</span><span class=\"token punctuation\">(</span>countKey<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">getTheLeftSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 证明已经发送过 3 次了</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"limit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回不让发了</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 证明已经发过，但是次数没达到 3 次</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">setex</span><span class=\"token punctuation\">(</span>codeKey<span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">,</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">incr</span><span class=\"token punctuation\">(</span>countKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 次数加 1</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 随机生成验证码的方法</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">String</span> code <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">int</span> rand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            code <span class=\"token operator\">+=</span> rand<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">return</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 获取当天剩余秒数的方法</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getTheLeftSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 获取现在的时间</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">LocalTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// 获取当日 23 点 59 分 59 秒的时间</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">LocalTime</span> end <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">// 获取 end 与 now 相差的秒数</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">long</span> millis <span class=\"token operator\">=</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">return</span> millis<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>输入验证码校验时</li>\n</ol>\n<p>从 redis 中取出对比</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>dabing<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>servlet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Jedis</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 处理验证验证码请求的 Servlet</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/CheckCodeServlet\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CheckCodeServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> code<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"verify_code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span> phoneNo<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phone_no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>code<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token operator\">||</span>phoneNo<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token operator\">||</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>phoneNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx.xx.xxx.xx\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> codeKey<span class=\"token operator\">=</span>phoneNo <span class=\"token operator\">+</span> <span class=\"token string\">\":code\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">String</span> codeRedis <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>codeKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>codeRedis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span>codeKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://blog.dabing.cool/javamore/cache/%E4%BD%BF%E7%94%A8Jedis%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8Redis/",
            "url": "https://blog.dabing.cool/javamore/cache/%E4%BD%BF%E7%94%A8Jedis%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8Redis/",
            "title": "用Jedis连接Redis",
            "date_published": "2022-08-20T02:10:10.000Z",
            "content_html": "<p>🚨🚨先说明，做下面操作，如果是服务器的话，修改端口 6379 为公开、不设置 redis 密码这些操作都是很危险的！！！一定要设置密码，可以改端口号，只要不是 6379 都行，然后也不要公开，就设置自己本机的 ip 即可，我下面没有做更改。</p>\n<p>血的教训，我就被攻击了，可参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NpbmRlcmVsbGFfX18vYXJ0aWNsZS9kZXRhaWxzLzgwMzkxNTYz\"> 挖矿？入侵？木马？都是 redis 没设密码搞的鬼</span></p>\n<h2 id=\"1-jedis所需要的jar包\"><a class=\"markdownIt-Anchor\" href=\"#1-jedis所需要的jar包\">#</a> 1 - Jedis 所需要的 jar 包</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>redis.clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jedis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"2-连接redis注意事项\"><a class=\"markdownIt-Anchor\" href=\"#2-连接redis注意事项\">#</a> 2 - 连接 Redis 注意事项</h2>\n<p>禁用 Linux 的防火墙：Linux (CentOS7) 里执行命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>查看状态： systemctl status firewalld</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>关闭： systemctl stop firewalld</pre></td></tr></table></figure><p>redis.conf 中注释掉 bind 127.0.0.1 , 然后 protected-mode no</p>\n<h2 id=\"3-jedis连接测试\"><a class=\"markdownIt-Anchor\" href=\"#3-jedis连接测试\">#</a> 3 - Jedis 连接测试</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>dabing<span class=\"token punctuation\">.</span>jedis</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Jedis</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 测试连接 Redis 服务</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 能连接上的前提：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 1. 关闭 linux 的防火墙</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 2. 修改 Redis 的配置文件</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     *      2.1 将 bind 127.0.0.1 注释掉</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     *      2.2 将保护模式关闭，即 protected-mode 的值设置为 no</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connectionTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.22.3\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这个主机我瞎写的，写自己的</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">String</span> pong <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功：\"</span><span class=\"token operator\">+</span>pong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"4-测试相关数据类型\"><a class=\"markdownIt-Anchor\" href=\"#4-测试相关数据类型\">#</a> 4 - 测试相关数据类型</h2>\n<h3 id=\"741jedis-api-key\"><a class=\"markdownIt-Anchor\" href=\"#741jedis-api-key\">#</a> 7.4.1.\tJedis-API:    Key</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">ttl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"742jedis-api-string\"><a class=\"markdownIt-Anchor\" href=\"#742jedis-api-string\">#</a> 7.4.2.\tJedis-API:    String</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">mset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"v2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"v3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">mget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"743jedis-api-list\"><a class=\"markdownIt-Anchor\" href=\"#743jedis-api-list\">#</a> 7.4.3.\tJedis-API:    List</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">lrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> element <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"744jedis-api-set\"><a class=\"markdownIt-Anchor\" href=\"#744jedis-api-set\">#</a> 7.4.4.\tJedis-API:    set</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order02\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order03\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order04\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> smembers <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">smembers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> order <span class=\"token operator\">:</span> smembers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">srem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order02\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"745jedis-api-hash\"><a class=\"markdownIt-Anchor\" href=\"#745jedis-api-hash\">#</a> 7.4.5.\tJedis-API:    hash</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"userName\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"userName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"telphone\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"13810169999\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc@163.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hmset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash2\"</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hmget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"telphone\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> element <span class=\"token operator\">:</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>7.4.6.\tJedis-API:    zset</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"l4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> zrange <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> e <span class=\"token operator\">:</span> zrange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"5-我滴实操\"><a class=\"markdownIt-Anchor\" href=\"#5-我滴实操\">#</a> 5- 我滴实操</h2>\n<ol>\n<li>写 test 跟上边的一样，呐，连接超时</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220821201445710.png\" alt=\"image-20220821201445710\"></p>\n<ol start=\"2\">\n<li>关防火墙、改保护模式为 no、注释掉 bind 127.0.0.1</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>、firewalld的基本使用</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>启动： systemctl start firewalld</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>关闭： systemctl stop firewalld</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>查看状态： systemctl status firewalld</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>开机禁用 ： systemctl disable firewalld</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>开机启用 ： systemctl <span class=\"token builtin class-name\">enable</span> firewalld</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2</span>. <span class=\"token function\">vi</span> redis.conf </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">3</span>. 启动redis-server</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220821191948636.png\" alt=\"image-20220821191948636\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220821192558716.png\" alt=\"image-20220821192558716\"></p>\n<p>注：我这里完成了以上两步之后，还是没有连接成功，百度之后发现原来是由于我连接的是服务器，没有添加 6379 端口的安全组。</p>\n<p>可参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3ODMzMi9hcnRpY2xlL2RldGFpbHMvMTA4NzQxMzY3\">Java 使用 Jedis 在本地远程连接腾讯云服务器（CentOS 7）</span></p>\n<p>但是我的是轻量级服务器，看意思就是防火墙设置了：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220821195819961.png\" alt=\"image-20220821195819961\"></p>\n<p>再来测试一次：成功！</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220821202013924.png\" alt=\"image-20220821202013924\"></p>\n<p>接下来就是测试那些数据了。跟上边的来就行。</p>\n",
            "tags": [
                "Redis",
                "Jedis"
            ]
        },
        {
            "id": "https://blog.dabing.cool/javamore/cache/Redis/",
            "url": "https://blog.dabing.cool/javamore/cache/Redis/",
            "title": "Redis",
            "date_published": "2022-07-01T02:00:00.000Z",
            "content_html": "<p>官网链接：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5yZWRpcy5pbw==\">http://www.redis.io</span></p>\n<p>视频：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVJ2NDExNzdBZj9zcG1faWRfZnJvbT0zMzMuOTk5LjAuMCZhbXA7dmRfc291cmNlPTEzOWU4MTY4ZDFhZWJiYTg3NGI4MDQ4OTEwMDY2ZDMx\">Redis 6 尚硅谷</span></p>\n<h1 id=\"一-nosql数据库简介\"><a class=\"markdownIt-Anchor\" href=\"#一-nosql数据库简介\">#</a> 一、NoSQL 数据库简介</h1>\n<h2 id=\"1-技术发展\"><a class=\"markdownIt-Anchor\" href=\"#1-技术发展\">#</a> 1- 技术发展</h2>\n<p>技术的分类</p>\n<blockquote>\n<p>1、解决功能性的问题：Java、Jsp、RDBMS、Tomcat、HTML、Linux、JDBC、SVN<br>\n2、解决扩展性的问题：Struts、Spring、SpringMVC、Hibernate、Mybatis<br>\n3、解决性能的问题：NoSQL、Java 线程、Hadoop、Nginx、MQ、ElasticSearch</p>\n</blockquote>\n<h3 id=\"111web10时代\"><a class=\"markdownIt-Anchor\" href=\"#111web10时代\">#</a> 1.1.1.\tWeb1.0 时代</h3>\n<p>Web1.0 的时代，数据访问量很有限，用一夫当关的高性能的单点服务器可以解决大部分问题。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726231113112.png\" alt=\"image-20220726231113112\"></p>\n<h3 id=\"112web20时代\"><a class=\"markdownIt-Anchor\" href=\"#112web20时代\">#</a> 1.1.2.\tWeb2.0 时代</h3>\n<p>随着 Web2.0 的时代的到来，用户访问量大幅度提升，同时产生了大量的用户数据。加上后来的智能移动设备的普及，所有的互联网平台都面临了巨大的性能挑战。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726231129462.png\" alt=\"image-20220726231129462\"></p>\n<h3 id=\"113解决cpu及内存压力\"><a class=\"markdownIt-Anchor\" href=\"#113解决cpu及内存压力\">#</a> 1.1.3.\t解决 CPU 及内存压力</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726231204844.png\" alt=\"image-20220726231204844\"></p>\n<h3 id=\"114解决io压力\"><a class=\"markdownIt-Anchor\" href=\"#114解决io压力\">#</a> 1.1.4.\t解决 IO 压力</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726231220567.png\" alt=\"image-20220726231220567\"></p>\n<h2 id=\"2-nosql数据库\"><a class=\"markdownIt-Anchor\" href=\"#2-nosql数据库\">#</a> 2 - NoSQL 数据库</h2>\n<h3 id=\"121nosql数据库概述\"><a class=\"markdownIt-Anchor\" href=\"#121nosql数据库概述\">#</a> 1.2.1.\tNoSQL 数据库概述</h3>\n<p><strong>NoSQL(NoSQL = Not Only SQL )</strong>，意即 “不仅仅是 SQL”，泛指 <code>非关系型</code> 的数据库。<br>\nNoSQL 不依赖业务逻辑方式存储，而以简单的 <code>key-value</code>  模式存储。因此大大的增加了数据库的扩展能力。</p>\n<ul>\n<li>不遵循 SQL 标准。</li>\n<li>不支持 ACID。</li>\n<li>远超于 SQL 的性能。</li>\n</ul>\n<h3 id=\"122nosql适用场景\"><a class=\"markdownIt-Anchor\" href=\"#122nosql适用场景\">#</a> 1.2.2.\tNoSQL 适用场景</h3>\n<ul>\n<li>对数据高并发的读写</li>\n<li>海量数据的读写</li>\n<li>对数据高可扩展性的</li>\n</ul>\n<h3 id=\"123nosql不适用场景\"><a class=\"markdownIt-Anchor\" href=\"#123nosql不适用场景\">#</a> 1.2.3.\tNoSQL 不适用场景</h3>\n<ul>\n<li>\n<p>需要事务支持</p>\n</li>\n<li>\n<p>基于 sql 的结构化查询存储，处理复杂的关系，需要 <code>即席</code>  查询。</p>\n</li>\n<li>\n<p><strong>（用不着 sql 的和用了 sql 也不行的情况，请考虑用 NoSql）</strong></p>\n</li>\n</ul>\n<h3 id=\"124memcache\"><a class=\"markdownIt-Anchor\" href=\"#124memcache\">#</a> 1.2.4.\tMemcache</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726231803375.png\" alt=\"image-20220726231803375\"></p>\n<h3 id=\"125redis\"><a class=\"markdownIt-Anchor\" href=\"#125redis\">#</a> 1.2.5.\tRedis</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726231821129.png\" alt=\"image-20220726231821129\"></p>\n<h3 id=\"126mongodb\"><a class=\"markdownIt-Anchor\" href=\"#126mongodb\">#</a> 1.2.6.\tMongoDB</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726231850038.png\" alt=\"image-20220726231850038\"></p>\n<h2 id=\"3-行式存储数据库大数据时代\"><a class=\"markdownIt-Anchor\" href=\"#3-行式存储数据库大数据时代\">#</a> 3 - 行式存储数据库（大数据时代）</h2>\n<h3 id=\"131行式数据库\"><a class=\"markdownIt-Anchor\" href=\"#131行式数据库\">#</a> 1.3.1.\t行式数据库</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726232027994.png\" alt=\"image-20220726232027994\"></p>\n<h3 id=\"132列式数据库\"><a class=\"markdownIt-Anchor\" href=\"#132列式数据库\">#</a> 1.3.2.\t列式数据库</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726232035860.png\" alt=\"image-20220726232035860\"></p>\n<p><strong>1.3.2.1.\tHbase</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220726232045024.png\" alt=\"image-20220726232045024\"></p>\n<p>HBase 是<strong> Hadoop</strong> 项目中的数据库。它用于需要对大量的数据进行随机、实时的读写操作的场景中。<br>\nHBase 的目标就是处理数据量<strong>非常庞大</strong>的表，可以用<strong>普通的计算机</strong>处理超过<strong> 10 亿行数据</strong>，还可处理有数百万<strong>列</strong>元素的数据表。</p>\n<p><strong>1.3.2.2.\tCassandra[kəˈsændrə]</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727003413693.png\" alt=\"image-20220727003413693\"></p>\n<p>Apache Cassandra 是一款免费的开源 NoSQL 数据库，其设计目的在于管理由大量商用服务器构建起来的庞大集群上的<strong>海量数据集 (数据量通常达到 PB 级别)</strong>。在众多显著特性当中，Cassandra 最为卓越的长处是对写入及读取操作进行规模调整，而且其不强调主集群的设计思路能够以相对直观的方式简化各集群的创建与扩展流程。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>计算机存储单位 计算机存储单位一般用<span class=\"token class-name\">B</span>，<span class=\"token constant\">KB</span>，<span class=\"token constant\">MB</span>，<span class=\"token constant\">GB</span>，<span class=\"token constant\">TB</span>，<span class=\"token constant\">EB</span>，<span class=\"token constant\">ZB</span>，<span class=\"token constant\">YB</span>，<span class=\"token constant\">BB</span>来表示，它们之间的关系是：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>位 bit <span class=\"token punctuation\">(</span>比特<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Binary</span> <span class=\"token class-name\">Digits</span><span class=\"token punctuation\">)</span>：存放一位二进制数，即 <span class=\"token number\">0</span> 或 <span class=\"token number\">1</span>，最小的存储单位。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>字节 <span class=\"token keyword\">byte</span>：<span class=\"token number\">8</span>个二进制位为一个字节<span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span>，最常用的单位。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">KB</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Kilobyte</span> 千字节<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">1024</span>B，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">MB</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Megabyte</span> 兆字节 简称“兆”<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token constant\">KB</span>，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">GB</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Gigabyte</span> 吉字节 又称“千兆”<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token constant\">MB</span>，</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">TB</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Trillionbyte</span> 万亿字节 太字节<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token constant\">GB</span>，其中<span class=\"token number\">1024</span><span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">^</span><span class=\"token number\">10</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">2</span> 的<span class=\"token number\">10</span>次方<span class=\"token punctuation\">)</span>，</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">PB</span>（<span class=\"token class-name\">Petabyte</span> 千万亿字节 拍字节）<span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token constant\">TB</span>，</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">EB</span>（<span class=\"token class-name\">Exabyte</span> 百亿亿字节 艾字节）<span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token constant\">PB</span>，</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">ZB</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Zettabyte</span> 十万亿亿字节 泽字节<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token number\">1024</span> <span class=\"token constant\">EB</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">YB</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Jottabyte</span> 一亿亿亿字节 尧字节<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token number\">1024</span> <span class=\"token constant\">ZB</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1</span><span class=\"token constant\">BB</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Brontobyte</span> 一千亿亿亿字节<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token number\">1024</span> <span class=\"token constant\">YB</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>注：“兆”为百万级数量单位。</pre></td></tr></table></figure><h2 id=\"4-图关系型数据库\"><a class=\"markdownIt-Anchor\" href=\"#4-图关系型数据库\">#</a> 4- 图关系型数据库</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727003806092.png\" alt=\"image-20220727003806092\"></p>\n<p>主要应用：社会关系，公共交通网络，地图及网络拓谱 (n*(n-1)/2)</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727003831658.png\" alt=\"image-20220727003831658\"></p>\n<h2 id=\"5-db-engines-数据库排名\"><a class=\"markdownIt-Anchor\" href=\"#5-db-engines-数据库排名\">#</a> 5 - DB-Engines 数据库排名</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2RiLWVuZ2luZXMuY29tL2VuL3Jhbmtpbmc=\">http://db-engines.com/en/ranking</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727003904477.png\" alt=\"image-20220727003904477\"></p>\n<h1 id=\"二-redis概述安装\"><a class=\"markdownIt-Anchor\" href=\"#二-redis概述安装\">#</a> 二、Redis 概述安装</h1>\n<ul>\n<li>Redis 是一个 <code>开源</code> 的 <code>key-value</code>  存储系统。</li>\n<li>和 Memcached 类似，它支持存储的 value 类型相对更多，包括 <code>string</code>  (字符串)、 <code>list</code>  (链表)、 <code>set</code>  (集合)、 <code>zset</code>  (sorted set -- 有序集合) 和 <code>hash</code> （哈希类型）</li>\n<li>这些数据类型都支持 push/pop、add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是 <code>原子性</code> 的</li>\n<li>在此基础上，Redis 支持各种不同方式的 <code>排序</code> 。</li>\n<li>与 memcached 一样，为了保证效率，数据都是 <code>缓存在内存</code> 中。</li>\n<li>区别的是 Redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件。</li>\n<li>并且在此基础上实现了 <code>master-slave(主从)</code>  同步。</li>\n</ul>\n<h2 id=\"1-应用场景\"><a class=\"markdownIt-Anchor\" href=\"#1-应用场景\">#</a> 1 - 应用场景</h2>\n<h3 id=\"211配合关系型数据库做高速缓存\"><a class=\"markdownIt-Anchor\" href=\"#211配合关系型数据库做高速缓存\">#</a> 2.1.1.\t配合关系型数据库做高速缓存</h3>\n<ul>\n<li>高频次，热门访问的数据，降低数据库 IO</li>\n<li>分布式架构，做 session 共享</li>\n<li><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727004314790.png\" alt=\"image-20220727004314790\"></li>\n</ul>\n<h3 id=\"212多样的数据结构存储持久化数据\"><a class=\"markdownIt-Anchor\" href=\"#212多样的数据结构存储持久化数据\">#</a> 2.1.2.\t多样的数据结构存储持久化数据</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727004344728.png\" alt=\"image-20220727004344728\"></p>\n<h2 id=\"2-redis安装\"><a class=\"markdownIt-Anchor\" href=\"#2-redis安装\">#</a> 2 - Redis 安装</h2>\n<p>Redis 官方网站:  <span class=\"exturl\" data-url=\"aHR0cDovL3JlZGlzLmlv\">http://redis.io</span></p>\n<p>Redis 中文官方网站:  <span class=\"exturl\" data-url=\"aHR0cDovL3JlZGlzLmNuLw==\">http://redis.cn/</span></p>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81Mjc4Mjg2Mjc=\">linux 系统安装和使用 Redis - 知乎 (zhihu.com)</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727004514512.png\" alt=\"image-20220727004514512\"></p>\n<h3 id=\"221安装版本\"><a class=\"markdownIt-Anchor\" href=\"#221安装版本\">#</a> 2.2.1.\t安装版本</h3>\n<ul>\n<li>6.2.1 for Linux（redis-6.2.1.tar.gz）</li>\n<li>不用考虑在 windows 环境下对 Redis 的支持 (如果真的需要可以去 github 上找找)</li>\n</ul>\n<h3 id=\"222安装步骤\"><a class=\"markdownIt-Anchor\" href=\"#222安装步骤\">#</a> 2.2.2.\t安装步骤</h3>\n<p><strong>2.2.2.1.\t准备工作：下载安装最新版的 gcc 编译器</strong><br>\n安装 C 语言的编译环境</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> centos-release-scl scl-utils-build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> devtoolset-8-toolchain</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>scl <span class=\"token builtin class-name\">enable</span> devtoolset-8 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 测试 gcc 版本 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>gcc <span class=\"token parameter variable\">--version</span></pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727104704322.png\" alt=\"image-20220727104704322\"></p>\n<p><strong>2.2.2.2.\t下载 redis-6.2.1.tar.gz 放 /opt 目录</strong></p>\n<p><strong>2.2.2.3.\t解压命令：tar -zxvf redis-6.2.1.tar.gz</strong></p>\n<p><strong>2.2.2.4.\t解压完成后进入目录：cd redis-6.2.1</strong></p>\n<p><strong>2.2.2.5.\t在 redis-6.2.1 目录下再次执行 make 命令（只是编译好）</strong></p>\n<p><strong>2.2.2.6.\t如果没有准备好 C 语言编译环境，make 会报错 —Jemalloc/jemalloc.h：没有那个文件</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727104834499.png\" alt=\"image-20220727104834499\"></p>\n<p><strong>2.2.2.7.\t解决方案：运行 make distclean</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727104852287.png\" alt=\"image-20220727104852287\"></p>\n<p><strong>2.2.2.8.\t在 redis-6.2.1 目录下再次执行 make 命令（只是编译好）</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727104906795.png\" alt=\"image-20220727104906795\"></p>\n<p><strong>2.2.2.9.\t跳过 make test 继续执行: make install</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727104934592.png\" alt=\"image-20220727104934592\"></p>\n<h3 id=\"实操\"><a class=\"markdownIt-Anchor\" href=\"#实操\">#</a> 实操</h3>\n<ol>\n<li>安装依赖，因为 Redis 是基于 C 语言编写的，因此首先需要安装 Redis 所需要的 gcc 依赖</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> gcc tcl</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727155634575.png\" alt=\"image-20220727155634575\"></p>\n<ol start=\"2\">\n<li>\n<p>上传文件：我上传到了 /opt 目录下</p>\n</li>\n<li>\n<p>解压： <code>tar -zxvf redis-6.2.7.tar.gz</code></p>\n</li>\n<li>\n<p>cd 到该目录：cd  redis-6.2.7</p>\n</li>\n<li>\n<p>make: 编译   <code>make</code>  这个完成之后 <code>make install</code></p>\n</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727161333762.png\" alt=\"image-20220727161333762\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727161816964.png\" alt=\"image-20220727161816964\"></p>\n<p>默认安装路径：usr/local/bin/</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727161855947.png\" alt=\"image-20220727161855947\"></p>\n<p>使用推荐的后台启动方式，需要对 redis.conf 备份一份</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> redis.conf redis.conf.copy</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727162452302.png\" alt=\"image-20220727162452302\"></p>\n<h3 id=\"223安装目录usrlocalbin\"><a class=\"markdownIt-Anchor\" href=\"#223安装目录usrlocalbin\">#</a> 2.2.3.\t安装目录：/usr/local/bin</h3>\n<p><strong>查看默认安装目录：</strong><br>\nredis-benchmark :   性能测试工具，可以在自己本子运行，看看自己本子性能如何<br>\n redis-check-aof： 修复有问题的 AOF 文件，rdb 和 aof 后面讲<br>\n redis-check-dump：修复有问题的 dump.rdb 文件<br>\n redis-sentinel：Redis 集群使用<br>\n <code>redis-server</code> ：Redis 服务器启动命令<br>\n <code>redis-cli</code> ：客户端，操作入口</p>\n<h3 id=\"224前台启动不推荐\"><a class=\"markdownIt-Anchor\" href=\"#224前台启动不推荐\">#</a> 2.2.4.\t前台启动（不推荐）</h3>\n<p>前台启动，命令行窗口不能关闭，否则服务器停止</p>\n<p>redis-server</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105158482.png\" alt=\"image-20220727105158482\"></p>\n<h3 id=\"225后台启动推荐\"><a class=\"markdownIt-Anchor\" href=\"#225后台启动推荐\">#</a> 2.2.5.\t后台启动（推荐）</h3>\n<p><strong>2.2.5.1.\t备份 redis.conf</strong></p>\n<p>拷贝一份 <code>redis.conf</code>  到其他目录<br>\n <code>cp  /opt/redis-3.2.5/redis.conf  /myredis</code></p>\n<p><strong>2.2.5.2.\t后台启动设置 <code>daemonize no</code>  改成 <code>yes</code> </strong></p>\n<p>修改 redis.conf (128 行) 文件将里面的 daemonize no 改成 yes，让服务在后台启动</p>\n<p><strong>2.2.5.3.\tRedis 启动</strong></p>\n<p><code>redis-server/myredis/redis.conf</code>   你的这个配置文件在那个文件夹下就执行哪个文件夹的配置配置文件</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105349213.png\" alt=\"image-20220727105349213\"></p>\n<p><strong>2.2.5.4.\t用客户端访问：</strong> <code>redis-cli</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105413882.png\" alt=\"image-20220727105413882\"></p>\n<p><strong>2.2.5.5.\t多个端口可以：</strong> <code>redis-cli -p6379</code> <br>\n<strong>2.2.5.6.\t测试验证：</strong>  <code>ping</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105506029.png\" alt=\"image-20220727105506029\"></p>\n<p><strong>2.2.5.7.\tRedis 关闭</strong></p>\n<p>单实例关闭： <code>redis-cli shutdown</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105606303.png\" alt=\"image-20220727105606303\"></p>\n<p>也可以进入终端后再关闭</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105620164.png\" alt=\"image-20220727105620164\"></p>\n<p>多实例关闭，指定端口关闭： <code>redis-cli -p 6379 shutdown</code></p>\n<h3 id=\"226redis介绍相关知识\"><a class=\"markdownIt-Anchor\" href=\"#226redis介绍相关知识\">#</a> 2.2.6.\tRedis 介绍相关知识</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105742074.png\" alt=\"image-20220727105742074\"></p>\n<p><strong>Redis 是单线程 + 多路 IO 复用技术</strong></p>\n<p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用 select 和 poll 函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）</p>\n<p><code>串行   vs   多线程+锁（memcached） vs   单线程+多路IO复用(Redis)</code></p>\n<p>（与 Memcache 三点不同：支持多数据类型，支持持久化，单线程 + 多路 IO 复用）</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727105854506.png\" alt=\"image-20220727105854506\"></p>\n<h1 id=\"三-常用五大数据类型\"><a class=\"markdownIt-Anchor\" href=\"#三-常用五大数据类型\">#</a> 三、常用五大数据类型</h1>\n<p>哪里去获得 redis 常见数据类型操作命令 http://www.redis.cn/commands.html</p>\n<h2 id=\"1-redis键key\"><a class=\"markdownIt-Anchor\" href=\"#1-redis键key\">#</a> 1 - Redis 键 (key)</h2>\n<p><code>key:</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  （1）keys * <span class=\"token builtin class-name\">:</span> 查看当前库所有key    <span class=\"token punctuation\">(</span>匹配：keys *1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  （2）exists key: 判断某个key是否存在</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  （3）type key <span class=\"token builtin class-name\">:</span> 查看你的key是什么类型</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  （4）del key  <span class=\"token builtin class-name\">:</span> 删除指定的key数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  （5）unlink key <span class=\"token builtin class-name\">:</span> 根据value选择非阻塞删除<span class=\"token punctuation\">(</span>仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  （6）expire key <span class=\"token number\">10</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10</span>秒钟,为给定的key设置过期时间</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  （7）ttl key <span class=\"token builtin class-name\">:</span> 查看还有多少秒过期，-1表示永不过期，-2表示已过期</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  （8）select  <span class=\"token builtin class-name\">:</span> 命令切换数据库</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  （9）dbsize  <span class=\"token builtin class-name\">:</span> 查看当前数据库的key的数量</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  （10）flushdb <span class=\"token builtin class-name\">:</span> 清空当前库</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  （11）flushall: 通杀全部库</pre></td></tr></table></figure><h2 id=\"2-redis字符串string\"><a class=\"markdownIt-Anchor\" href=\"#2-redis字符串string\">#</a> 2 - Redis 字符串 (String)</h2>\n<h3 id=\"321简介\"><a class=\"markdownIt-Anchor\" href=\"#321简介\">#</a> 3.2.1.\t简介</h3>\n<p>String 是 Redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。<br>\nString 类型是 <code>二进制安全的</code> 。意味着 Redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象。<br>\nString 类型是 Redis 最基本的数据类型，一个 Redis 中字符串 value 最多可以是 <code>512M</code></p>\n<h3 id=\"322常用命令\"><a class=\"markdownIt-Anchor\" href=\"#322常用命令\">#</a> 3.2.2.\t常用命令</h3>\n<p><code>String:</code>  k- key (键)  v-value (值)</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  （1）存：set k <span class=\"token function\">v</span>  <span class=\"token punctuation\">[</span>另说明见下！<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  （2）取：get k         </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  （3）追加字符：append k <span class=\"token string\">\"追加字段\"</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  （4）长度：strlen k</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  （5）无该key时存：setnx k v:（只有在 key 不存在时设置 key 的值）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  （6）增指定值：incrby k <span class=\"token punctuation\">[</span>integer<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  （7）减指定值：decrby k <span class=\"token punctuation\">[</span>integer<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  （8）递增：incr k （一定是整数；如无值则赋0后加1）</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  （9）递键：decr k （一定是整数；如无值则赋0后减1）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>其他命令：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  （1）批量存：mset k1 v1 k2 v2<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  （2）批量取：mget k1 k2 k3 <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>         </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  （3）批量存：msetnx k1 v1 k2 v2<span class=\"token punctuation\">..</span>.（当且仅当所有给定 key 都不存在，原子性，有一个失败则都失败）</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  （4）范围取：getrange k 起始位置 结束位置（类似java中的substring，前包，后包）</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  （5）取全部数据：getrange k <span class=\"token number\">0</span> <span class=\"token parameter variable\">-1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  （6）覆盖值：setrange k 起始位置 <span class=\"token function\">v</span> <span class=\"token punctuation\">(</span>用<span class=\"token operator\">&lt;</span>value<span class=\"token operator\">></span>覆写<span class=\"token operator\">&lt;</span>key<span class=\"token operator\">></span>所储存的字符串值，从<span class=\"token operator\">&lt;</span>起始位置<span class=\"token operator\">></span>开始<span class=\"token punctuation\">(</span>索引从0开始<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  （7）过期时间：setex k 过期时间 value <span class=\"token punctuation\">(</span>设置键值的同时，设置过期时间，单位秒<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  （8）以新换旧：getset k <span class=\"token function\">v</span> <span class=\"token punctuation\">(</span>设置了新值同时获得旧值<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>存 set 的说明：</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727111440940.png\" alt=\"image-20220727111440940\"></p>\n<ul>\n<li>NX：当数据库中 key 不存在时，可以将 key-value 添加数据库</li>\n<li>XX：当数据库中 key 存在时，可以将 key-value 添加数据库，与 NX 参数互斥</li>\n<li>EX：key 的超时秒数</li>\n<li>PX：key 的超时毫秒数，与 EX 互斥</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727113031192.png\" alt=\"image-20220727113031192\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727113111389.png\" alt=\"image-20220727113111389\"></p>\n<p>上面的值可能是 2~200，因为 i++ 不是原子操作，它分三步完成：获取 i 的值，进行 + 操作，赋值</p>\n<h3 id=\"323数据结构\"><a class=\"markdownIt-Anchor\" href=\"#323数据结构\">#</a> 3.2.3.\t数据结构</h3>\n<p>String 的数据结构为 <code>简单动态字符串</code>  (Simple Dynamic String, 缩写 SDS)。是可以修改的字符串，内部结构实现上类似于 Java 的 <code>ArrayList</code> ，采用预分配冗余空间的方式来减少内存的频繁分配</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727123548075.png\" alt=\"image-20220727123548075\"></p>\n<p>如图中所示，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度 len。当字符串长度小于 1M 时，扩容都是 <code>加倍</code> 现有的空间，如果超过 1M，扩容时一次只会 <code>多扩1M</code>  的空间。需要注意的是字符串最大长度为 512M。</p>\n<h2 id=\"3-redis列表list\"><a class=\"markdownIt-Anchor\" href=\"#3-redis列表list\">#</a> 3 - Redis 列表 (List)</h2>\n<h3 id=\"331简介\"><a class=\"markdownIt-Anchor\" href=\"#331简介\">#</a> 3.3.1.\t简介</h3>\n<p><strong>单键多值</strong><br>\n Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<p>它的底层实际是个 <code>双向链表</code> ，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727123852045.png\" alt=\"image-20220727123852045\"></p>\n<h3 id=\"332常用命令\"><a class=\"markdownIt-Anchor\" href=\"#332常用命令\">#</a> 3.3.2.\t常用命令</h3>\n<p><code>list:</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>概述：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>元素插入</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>链表表头或结尾插入：高效，中间：低</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>存储list：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1</span>.ArrayList使用数组方式：使用索引查询-块，新增删除时涉及位移操作-慢</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2</span>.LinkedList使用双向链接方式：每个元素记录前后元素指针</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">3</span>.双向链表增加数据</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">4</span>.双向链表删除数据</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>存储list常用命令：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token number\">1</span>.两端添加：lpush、rpush<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>lpush list <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token comment\">#从左侧往 list 表中插入 1 2 3</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>rpush list a b c <span class=\"token comment\">#从右侧往 list 表中插入 a b c </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token number\">2</span>.查看列表：lrange<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>lrange list <span class=\"token number\">0</span> <span class=\"token parameter variable\">-1</span> <span class=\"token comment\">#从头到尾查看</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>lrange list <span class=\"token number\">0</span> <span class=\"token number\">5</span>  <span class=\"token comment\">#从开始到第 5 个查看</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token number\">3</span>.两端弹出：lpop、rpop <span class=\"token punctuation\">(</span>值在键在，值光键亡<span class=\"token punctuation\">)</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>lpop list <span class=\"token comment\">#从左边弹出第一个数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>rpop list <span class=\"token comment\">#从尾部弹出第一个数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token number\">4</span>.获取列表元素个数：llen<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>llen list <span class=\"token comment\">#查看元素个数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token number\">5</span>.扩展命令：lpushx、rpushx、lrem、lset、rpoplppush<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>lpushx list x <span class=\"token comment\">#插入 x 到 list 表的开头（左边）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>rpushx list y <span class=\"token comment\">#插入 y 到 list 表的尾部（右边）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>lrem list n value <span class=\"token comment\">#从头到尾删除 n 个 value</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>lrem list <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token comment\">#从头到尾删除 2 个 3 (从左到右)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>lrem list <span class=\"token parameter variable\">-2</span> <span class=\"token number\">1</span>  <span class=\"token comment\">#从尾到头删除 2 个 1（从右到左）</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>lrem list <span class=\"token number\">0</span> <span class=\"token number\">2</span>\t<span class=\"token comment\">#删除所有 2</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>lset key n value \t<span class=\"token comment\">#在 key 表第 n 个角标设置为 value</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>lset list <span class=\"token number\">3</span> mmm \t<span class=\"token comment\">#在 list 表第 3 个角标设置 mmm</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>linset list before a yy\t <span class=\"token comment\">#在 list 表中 a 之前插入 yy</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>linset list after b xx \t<span class=\"token comment\">#在 list 表中 b 之后插入 xx</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>rpoplpush list1 list2 \t<span class=\"token comment\">#从 list1 表的右边吐出压入到 list2 表的左边</span></pre></td></tr></table></figure><h3 id=\"333数据结构\"><a class=\"markdownIt-Anchor\" href=\"#333数据结构\">#</a> 3.3.3.\t数据结构</h3>\n<p>List 的数据结构为 <code>快速链表quickList</code> 。</p>\n<p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是 <code>ziplist</code> ，也即是 <code>压缩列表</code> 。</p>\n<p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p>\n<p>当数据量比较多的时候才会改成 <code>quicklist</code> 。</p>\n<p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是 int 类型的数据，结构上还需要两个额外的指针 prev 和 next。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727135259344.png\" alt=\"image-20220727135259344\"></p>\n<p>Redis 将链表和 ziplist 结合起来组成了 quicklist。也就是将多个 ziplist 使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p>\n<h2 id=\"4-redis集合set\"><a class=\"markdownIt-Anchor\" href=\"#4-redis集合set\">#</a> 4 - Redis 集合 (Set)</h2>\n<h3 id=\"341简介\"><a class=\"markdownIt-Anchor\" href=\"#341简介\">#</a> 3.4.1.\t简介</h3>\n<p>Redis set 对外提供的功能与 list 类似是一个列表的功能，特殊之处在于 set 是可以 <code>自动排重</code> 的，当你需要存储一个列表数据，又不希望出现重复数据时，set 是一个很好的选择，并且 set 提供了判断某个成员是否在一个 set 集合内的重要接口，这个也是 list 所不能提供的。</p>\n<p>Redis 的 Set 是 string 类型的<strong>无序集合</strong>。<strong>它底层其实是一个 value 为 null 的 hash 表，所以添加，删除，查找的复杂度都是 O (1)</strong>。</p>\n<p>一个算法，随着数据的增加，执行时间的长短，如果是 O (1)，数据增加，查找数据的时间不变</p>\n<h3 id=\"342常用命令\"><a class=\"markdownIt-Anchor\" href=\"#342常用命令\">#</a> 3.4.2.\t常用命令</h3>\n<p><code>Set:</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Redis数据结构（Set）: List允许出现重复数据，Set不允许出现重复数据；Set最大元素数量是4294967295</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>命令：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  （1）存：sadd 列名 <span class=\"token punctuation\">[</span>值<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  （2）删：srem 列名 <span class=\"token punctuation\">[</span>值<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  （3）查全：smembers 列名</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  （4）查是否存在：sismember 列名 值，1表示存在，0表示不存在</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  （5）差集：sdiff 列名1 列名2 （<span class=\"token punctuation\">(</span>列1中的，不包含在列2中的<span class=\"token punctuation\">)</span>）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  （6）交集：sinter 列名1 列名2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  （7）并集：sunion 列名1 列名2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  （8）查数量：scard 列名</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  （9）随机查<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">></span>个值：srandmember 列名 <span class=\"token operator\">&lt;</span>n<span class=\"token operator\">></span>（不会从集合中删除）</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  （10）随机吐出一个值：spop 列名</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  （11）从集合A的值移动到集合B：smove 列名1 列名2 值 </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  （12）将差集存到新集合中：sdiffstore 新列名 列名1 列名2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  （13）将交集存到新集合中：sinterstore 新列名 列名1 列名2</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  （14）将并集存到新集合中：sunionstore 新列名 列名1 列名2</pre></td></tr></table></figure><h3 id=\"343数据结构\"><a class=\"markdownIt-Anchor\" href=\"#343数据结构\">#</a> 3.4.3.\t数据结构</h3>\n<p>Set 数据结构是 dict 字典，字典是用 <code>哈希表</code> 实现的。</p>\n<p>Java 中 HashSet 的内部实现使用的是 HashMap，只不过所有的 value 都指向同一个对象。Redis 的 set 结构也是一样，它的内部也使用 hash 结构，所有的 value 都指向同一个内部值。</p>\n<h2 id=\"5-redis哈希hash\"><a class=\"markdownIt-Anchor\" href=\"#5-redis哈希hash\">#</a> 5 - Redis 哈希 (Hash)</h2>\n<h3 id=\"351简介\"><a class=\"markdownIt-Anchor\" href=\"#351简介\">#</a> 3.5.1.\t简介</h3>\n<p>Redis hash 是一个键值对集合。</p>\n<p>Redis hash 是一个 string 类型的 <code>field</code>  和 <code>value</code>  的映射表，hash 特别适合用于 <code>存储对象</code> 。<br>\n类似 Java 里面的 Map&lt;String,Object&gt;</p>\n<p>用户 ID 为查找的 key，存储的 value 用户对象包含姓名，年龄，生日等信息，如果用普通的 key/value 结构来存储</p>\n<p>主要有以下 2 种存储方式：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727140611227.png\" alt=\"image-20220727140611227\"></p>\n<h3 id=\"352常用命令\"><a class=\"markdownIt-Anchor\" href=\"#352常用命令\">#</a> 3.5.2.\t常用命令</h3>\n<p><code>Hash:</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>常用存储类型（Hash）：每个可存4294967295个键值对</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>命令: 表名<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> 域<span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span> 值<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  （1）存：hset 表名 域 值 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  （2）批量存：hmset 表名 域 值 域 值<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  （2）取：hget 表名 域</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  （4）批量取：hmget 表名 域 域 <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  （5）取全：hgetall 表名</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  （6）删除：hdel 表名 域<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  （7）全删：del 表名</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  （8）增指定值：hincrby 表名 域 <span class=\"token punctuation\">[</span>integer<span class=\"token punctuation\">]</span>（一定是整数）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  （9）判断存在：hexists 表名 域 <span class=\"token punctuation\">(</span>查看哈希表 key 中，给定域 field 是否存在<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  （10）设置域值：hsetnx 表名 f <span class=\"token function\">v</span> （将hash表中域f的值设置为v，当且仅当field不存在时）</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  （11）键值对数量：hlen 表名</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  （12）取所有域<span class=\"token punctuation\">(</span>键<span class=\"token punctuation\">)</span>：hkeys 表名（列出所有的field）</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  （13）取所有值：hvals 表名（列出所有的value）</pre></td></tr></table></figure><h3 id=\"353数据结构\"><a class=\"markdownIt-Anchor\" href=\"#353数据结构\">#</a> 3.5.3.\t数据结构</h3>\n<p>Hash 类型对应的数据结构是两种： <code>ziplist</code> （压缩列表）， <code>hashtable</code> （哈希表）。当 field-value 长度较短且个数较少时，使用 ziplist，否则使用 hashtable。</p>\n<h2 id=\"6-redis有序集合zsetsorted-set\"><a class=\"markdownIt-Anchor\" href=\"#6-redis有序集合zsetsorted-set\">#</a> 6 - Redis 有序集合 Zset (sorted set)</h2>\n<h3 id=\"361简介\"><a class=\"markdownIt-Anchor\" href=\"#361简介\">#</a> 3.6.1.\t简介</h3>\n<p>Redis 有序集合 zset 与普通集合 set 非常相似，是一个 <code>没有重复元素</code> 的字符串集合。</p>\n<p>不同之处是有序集合的每个成员都关联了一个 <code>评分（score）</code> , 这个评分（score）被用来按照从最低分到最高分的方式 <code>排序</code> 集合中的成员。<strong>集合的成员是唯一的，但是评分可以是重复了 。</strong></p>\n<p>因为元素是有序的，所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p>\n<p>访问有序集合的中间元素也是非常快的，因此你能够<strong>使用有序集合作为一个没有重复成员</strong>的智能列表。</p>\n<h3 id=\"362常用命令\"><a class=\"markdownIt-Anchor\" href=\"#362常用命令\">#</a> 3.6.2.\t常用命令</h3>\n<p><code>Zset:</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令: 集合名<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> 评分<span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span> 值<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  （1）<span class=\"token variable\"><span class=\"token variable\">`</span>存<span class=\"token variable\">`</span></span>：zadd 集合名 评分1 值1 评分2 值2<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  （2）<span class=\"token variable\"><span class=\"token variable\">`</span>按下标取<span class=\"token variable\">`</span></span>：zrange 集合名 下标1 下标2 <span class=\"token punctuation\">[</span>WITHSCORES<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  （返回有序集 key 中，下标在<span class=\"token operator\">&lt;</span>下标<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span> <span class=\"token operator\">&lt;</span>下标<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>之间的元素,带WITHSCORES，可以让分数一起和值返回到结果集）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  （3）<span class=\"token variable\"><span class=\"token variable\">`</span>按评分取<span class=\"token variable\">`</span></span>：zrangebyscore 集合名 min max <span class=\"token punctuation\">[</span>withscores<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>limit offset count<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  （返回有序集 key 中，所有 score 值介于 min 和 max 之间<span class=\"token punctuation\">(</span>包括等于 min 或 max <span class=\"token punctuation\">)</span>的成员。有序集成员按 score 值递增<span class=\"token punctuation\">(</span>从小到大<span class=\"token punctuation\">)</span>次序排列）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  （4）<span class=\"token variable\"><span class=\"token variable\">`</span>从大到小取<span class=\"token variable\">`</span></span>：zrevrangebyscore 集合名 max min <span class=\"token punctuation\">[</span>withscores<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>limit offset count<span class=\"token punctuation\">]</span>   （同上，改为从大到小排列。）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  （5）<span class=\"token variable\"><span class=\"token variable\">`</span>增指定值<span class=\"token variable\">`</span></span>：zincrby 集合名 增量 值（给值加上增量）</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  （6）<span class=\"token variable\"><span class=\"token variable\">`</span>删除<span class=\"token variable\">`</span></span>：zrem 集合名 值 </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  （7）<span class=\"token variable\"><span class=\"token variable\">`</span>统计<span class=\"token variable\">`</span></span>：zcount 集合名 min max （统计该集合，分数区间内的元素个数）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  （8）<span class=\"token variable\"><span class=\"token variable\">`</span>排名<span class=\"token variable\">`</span></span>：zrank 集合名 值 （返回该值在集合中的排名，从0开始）</pre></td></tr></table></figure><p>案例：如何利用 zset 实现一个文章访问量的排行榜？</p>\n<h3 id=\"363数据结构\"><a class=\"markdownIt-Anchor\" href=\"#363数据结构\">#</a> 3.6.3.\t数据结构</h3>\n<p>SortedSet (zset) 是 Redis 提供的一个非常特别的数据结构，一方面它等价于 Java 的数据结构 Map&lt;String, Double&gt;，可以给每一个元素 value 赋予一个权重 score，另一方面它又类似于 TreeSet，内部的元素会按照权重 score 进行排序，可以得到每个元素的名次，还可以通过 score 的范围来获取元素的列表。</p>\n<p>zset 底层使用了两个数据结构<br>\n（1）<strong>hash</strong>，hash 的作用就是关联元素 value 和权重 score，保障元素 value 的唯一性，可以通过元素 value 找到相应的 score 值。<br>\n（2）<strong>跳跃表</strong>，跳跃表的目的在于给元素 value 排序，根据 score 的范围获取元素列表。</p>\n<h3 id=\"364跳跃表跳表\"><a class=\"markdownIt-Anchor\" href=\"#364跳跃表跳表\">#</a> 3.6.4.\t跳跃表（跳表）</h3>\n<p><strong>1、简介</strong></p>\n<p>​\t    有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis 采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p>\n<p><strong>2、实例</strong></p>\n<p>​\t对比有序链表和跳跃表，从链表中查询出 51</p>\n<p>（1）<strong>有序链表</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727150205067.png\" alt=\"image-20220727150205067\"></p>\n<p>要查找值为 51 的元素，需要从第一个元素开始依次查找、比较才能找到。共需要 6 次比较。<br>\n（2）<strong>跳跃表</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220727150256931.png\" alt=\"image-20220727150256931\"></p>\n<p>从第 2 层开始，1 节点比 51 节点小，向后比较。</p>\n<p>21 节点比 51 节点小，继续向后比较，后面就是 NULL 了，所以从 21 节点向下到第 1 层</p>\n<p>在第 1 层，41 节点比 51 节点小，继续向后，61 节点比 51 节点大，所以从 41 向下</p>\n<p>在第 0 层，51 节点为要查找的节点，节点被找到，共查找 4 次。</p>\n<p>从此可以看出跳跃表比有序链表效率要高</p>\n<h1 id=\"四-redis配置文件介绍\"><a class=\"markdownIt-Anchor\" href=\"#四-redis配置文件介绍\">#</a> 四、Redis 配置文件介绍</h1>\n<p>我的目录：/opt/redis-6.2.7/redis.conf</p>\n<h2 id=\"1-units单位\"><a class=\"markdownIt-Anchor\" href=\"#1-units单位\">#</a> 1- Units 单位</h2>\n<p>配置大小单位，开头定义了一些基本的度量单位，只支持 bytes，不支持 bit 大小写不敏感</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730115141232.png\" alt=\"image-20220730115141232\"></p>\n<h2 id=\"2-includes包含\"><a class=\"markdownIt-Anchor\" href=\"#2-includes包含\">#</a> 2- INCLUDES 包含</h2>\n<p>类似 jsp 中的 include，多实例的情况可以把公用的配置文件提取出来</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730115303933.png\" alt=\"image-20220730115303933\"></p>\n<h2 id=\"3-网络相关配置\"><a class=\"markdownIt-Anchor\" href=\"#3-网络相关配置\">#</a> 3 - 网络相关配置</h2>\n<h3 id=\"431-bind\"><a class=\"markdownIt-Anchor\" href=\"#431-bind\">#</a> 4.3.1  bind</h3>\n<p>默认情况 bind=127.0.0.1 只能接受本机的访问请求</p>\n<p>不写的情况下，无限制接受任何 ip 地址的访问</p>\n<p>生产环境肯定要写你应用服务器的地址；服务器是需要远程访问的，所以需要将其注释掉</p>\n<p><strong>如果开启了 protected-mode，那么在没有设定 bind ip 且没有设密码的情况下，Redis 只允许接受本机的响应</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730141422593.png\" alt=\"image-20220730141422593\"></p>\n<p>保存配置，停止服务，重启启动查看进程，不再是本机访问了。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730114744786.png\" alt=\"image-20220730114744786\"></p>\n<h3 id=\"432-protected-mode\"><a class=\"markdownIt-Anchor\" href=\"#432-protected-mode\">#</a> 4.3.2.  protected-mode</h3>\n<p>将本机访问保护模式设置 no</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730141730607.png\" alt=\"image-20220730141730607\"></p>\n<h3 id=\"433-port\"><a class=\"markdownIt-Anchor\" href=\"#433-port\">#</a> 4.3.3 Port</h3>\n<p>端口号，默认 6379</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730141828893.png\" alt=\"image-20220730141828893\"></p>\n<h3 id=\"434-tcp-backlog\"><a class=\"markdownIt-Anchor\" href=\"#434-tcp-backlog\">#</a> 4.3.4.  tcp-backlog</h3>\n<p>设置 tcp 的 backlog，backlog 其实是一个连接队列，backlog 队列总和 = 未完成三次握手队列 + 已经完成三次握手队列。</p>\n<p>在高并发环境下你需要一个高 backlog 值来避免慢客户端连接问题。</p>\n<p>注意 Linux 内核会将这个值减小到 /proc/sys/net/core/somaxconn 的值（128），所以需要确认增大 /proc/sys/net/core/somaxconn 和 /proc/sys/net/ipv4/tcp_max_syn_backlog（128）两个值来达到想要的效果</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730142147649.png\" alt=\"image-20220730142147649\"></p>\n<h3 id=\"435-timeout\"><a class=\"markdownIt-Anchor\" href=\"#435-timeout\">#</a> 4.3.5.  timeout</h3>\n<p>一个空闲的客户端维持多少秒会关闭，0 表示关闭该功能。即<strong>永不关闭</strong>。</p>\n<p><img data-src=\"C:%5CUsers%5C22616%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220730142318928.png\" alt=\"image-20220730142318928\"></p>\n<h3 id=\"436-tcp-keepalive\"><a class=\"markdownIt-Anchor\" href=\"#436-tcp-keepalive\">#</a> 4.3.6.  tcp-keepalive</h3>\n<p>对访问客户端的一种<strong>心跳检测</strong>，每个 n 秒检测一次。</p>\n<p>单位为秒，如果设置为 0，则不会进行 Keepalive 检测，建议设置成 60</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730143102388.png\" alt=\"image-20220730143102388\"></p>\n<h2 id=\"4-general通用\"><a class=\"markdownIt-Anchor\" href=\"#4-general通用\">#</a> 4 - GENERAL 通用</h2>\n<h3 id=\"441-daemonize\"><a class=\"markdownIt-Anchor\" href=\"#441-daemonize\">#</a> 4.4.1.  daemonize</h3>\n<p>是否为后台进程，设置为 yes</p>\n<p>守护进程，后台启动</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730143234823.png\" alt=\"image-20220730143234823\"></p>\n<h3 id=\"442-pidfile\"><a class=\"markdownIt-Anchor\" href=\"#442-pidfile\">#</a> 4.4.2.  pidfile</h3>\n<p>存放 pid 文件的位置，每个实例会产生一个不同的 pid 文件</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730143450301.png\" alt=\"image-20220730143450301\"></p>\n<h3 id=\"443-loglevel\"><a class=\"markdownIt-Anchor\" href=\"#443-loglevel\">#</a> 4.4.3.  loglevel</h3>\n<p>指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为<strong> notice</strong></p>\n<p><strong>四个级别根据使用阶段来选择，生产环境选择 notice 或者 warning</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730143541853.png\" alt=\"image-20220730143541853\"></p>\n<h3 id=\"444-logfile\"><a class=\"markdownIt-Anchor\" href=\"#444-logfile\">#</a> 4.4.4.  logfile</h3>\n<p>日志文件名称</p>\n<p><img data-src=\"C:%5CUsers%5C22616%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220730143639134.png\" alt=\"image-20220730143639134\"></p>\n<h3 id=\"445-databases-16\"><a class=\"markdownIt-Anchor\" href=\"#445-databases-16\">#</a> 4.4.5.  databases 16</h3>\n<p>设定库的数量 默认 16，默认数据库为 0，可以使用 SELECT <dbid>命令在连接上指定数据库 id</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730143726917.png\" alt=\"image-20220730143726917\"></p>\n<h2 id=\"5-security安全\"><a class=\"markdownIt-Anchor\" href=\"#5-security安全\">#</a> 5 -  SECURITY 安全</h2>\n<h3 id=\"551-设置密码\"><a class=\"markdownIt-Anchor\" href=\"#551-设置密码\">#</a> 5.5.1.  设置密码</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730144004826.png\" alt=\"image-20220730144004826\"></p>\n<p>访问密码的查看、设置和取消</p>\n<p>在命令中设置密码，只是临时的。重启 redis 服务器，密码就还原了。</p>\n<p>永久设置，需要再配置文件中进行设置。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730144237188.png\" alt=\"image-20220730144237188\"></p>\n<h2 id=\"6-limits限制\"><a class=\"markdownIt-Anchor\" href=\"#6-limits限制\">#</a> 6 - LIMITS 限制</h2>\n<h3 id=\"661-maxclients\"><a class=\"markdownIt-Anchor\" href=\"#661-maxclients\">#</a> 6.6.1.  maxclients</h3>\n<ul>\n<li>\n<p>设置 redis 同时可以与多少个客户端进行连接。</p>\n</li>\n<li>\n<p>默认情况下为 10000 个客户端。</p>\n</li>\n<li>\n<p>如果达到了此限制，redis 则会拒绝新的连接请求，并且向这些连接请求方发出 “max number of clients reached” 以作回应。</p>\n</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730144953788.png\" alt=\"image-20220730144953788\"></p>\n<h3 id=\"662-maxmemory\"><a class=\"markdownIt-Anchor\" href=\"#662-maxmemory\">#</a> 6.6.2.  maxmemory</h3>\n<ul>\n<li>\n<p>建议<strong>必须设置</strong>，否则，将内存占满，造成服务器宕机</p>\n</li>\n<li>\n<p>设置 redis 可以使用的内存量。一旦到达内存使用上限，redis 将会试图移除内部数据，移除规则可以通过<strong> maxmemory-policy</strong> 来指定。</p>\n</li>\n<li>\n<p>如果 redis 无法根据移除规则来移除内存中的数据，或者设置了 “不允许移除”，那么 redis 则会针对那些需要申请内存的指令返回错误信息，比如 SET、LPUSH 等。</p>\n</li>\n<li>\n<p>但是对于无内存申请的指令，仍然会正常响应，比如 GET 等。如果你的 redis 是主 redis（说明你的 redis 有从 redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在你设置的是 “不移除” 的情况下，才不用考虑这个因素。</p>\n</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145049188.png\" alt=\"image-20220730145049188\"></p>\n<h3 id=\"663-maxmemory-policy\"><a class=\"markdownIt-Anchor\" href=\"#663-maxmemory-policy\">#</a> 6.6.3.  maxmemory-policy</h3>\n<ul>\n<li>\n<p>volatile-lru：使用 LRU 算法移除 key，只对设置了<strong>过期时间</strong>的键；（最近最少使用）</p>\n</li>\n<li>\n<p>allkeys-lru：在所有集合 key 中，使用 LRU 算法移除 key</p>\n</li>\n<li>\n<p>volatile-random：在过期集合中移除随机的 key，只对设置了过期时间的键</p>\n</li>\n<li>\n<p>allkeys-random：在所有集合 key 中，移除随机的 key</p>\n</li>\n<li>\n<p>volatile-ttl：移除那些 TTL 值最小的 key，即那些最近要过期的 key</p>\n</li>\n<li>\n<p>noeviction：不进行移除。针对写操作，只是返回错误信息</p>\n</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145143860.png\" alt=\"image-20220730145143860\"></p>\n<h3 id=\"664-maxmemory-samples\"><a class=\"markdownIt-Anchor\" href=\"#664-maxmemory-samples\">#</a> 6.6.4.  maxmemory-samples</h3>\n<ul>\n<li>\n<p>设置样本数量，LRU 算法和最小 TTL 算法都并非是精确的算法，而是估算值，所以你可以设置样本的大小，redis 默认会检查这么多个 key 并选择其中 LRU 的那个。</p>\n</li>\n<li>\n<p>一般设置 3 到 7 的数字，数值越小样本越不准确，但性能消耗越小。</p>\n</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145234892.png\" alt=\"image-20220730145234892\"></p>\n<h1 id=\"五-redis的发布和订阅\"><a class=\"markdownIt-Anchor\" href=\"#五-redis的发布和订阅\">#</a> 五、Redis 的发布和订阅</h1>\n<h2 id=\"1-什么是发布和订阅\"><a class=\"markdownIt-Anchor\" href=\"#1-什么是发布和订阅\">#</a> 1- 什么是发布和订阅</h2>\n<p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p>\n<p>Redis 客户端可以订阅任意数量的频道。</p>\n<h2 id=\"2-redis的发布和订阅\"><a class=\"markdownIt-Anchor\" href=\"#2-redis的发布和订阅\">#</a> 2- Redis 的发布和订阅</h2>\n<p>1、客户端可以订阅频道如下图</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145408989.png\" alt=\"image-20220730145408989\"></p>\n<p>2、当给这个频道发布消息后，消息就会发送给订阅的客户端</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145420014.png\" alt=\"image-20220730145420014\"></p>\n<h2 id=\"3-发布订阅命令行实现\"><a class=\"markdownIt-Anchor\" href=\"#3-发布订阅命令行实现\">#</a> 3- 发布订阅命令行实现</h2>\n<p>1、\t打开一个客户端订阅 channel1<br>\nSUBSCRIBE channel1</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145530661.png\" alt=\"image-20220730145530661\"></p>\n<p>2、打开另一个客户端，给 channel1 发布消息 hello<br>\npublish channel1 hello</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145549967.png\" alt=\"image-20220730145549967\"></p>\n<p>返回的 1 是订阅者数量<br>\n 3、打开第一个客户端可以看到发送的消息</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145629320.png\" alt=\"image-20220730145629320\"></p>\n<p>注：发布的消息没有持久化，如果在订阅的客户端收不到 hello，只能收到订阅后发布的消息</p>\n<h1 id=\"六-redis新数据类型\"><a class=\"markdownIt-Anchor\" href=\"#六-redis新数据类型\">#</a> 六、Redis 新数据类型</h1>\n<h2 id=\"1-bitmaps\"><a class=\"markdownIt-Anchor\" href=\"#1-bitmaps\">#</a> 1- Bitmaps</h2>\n<h3 id=\"611简介\"><a class=\"markdownIt-Anchor\" href=\"#611简介\">#</a> 6.1.1.\t简介</h3>\n<p>现代计算机用二进制（位） 作为信息的基础单位， 1 个字节等于 8 位， 例如 “abc” 字符串是由 3 个字节组成， 但实际在计算机存储时将其用二进制表示， “abc” 分别对应的 ASCII 码分别是 97、 98、 99， 对应的二进制分别是 01100001、 01100010 和 01100011，如下图</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145703500.png\" alt=\"image-20220730145703500\"></p>\n<p>合理地使用操作位能够有效地提高内存使用率和开发效率。<br>\nRedis 提供了 Bitmaps 这个 “数据类型” 可以实现对位的操作：<br>\n（1）\tBitmaps 本身不是一种数据类型， 实际上它就是字符串（key-value） ， 但是它可以对字符串的位进行操作。<br>\n（2）\tBitmaps 单独提供了一套命令， 所以在 Redis 中使用 Bitmaps 和使用字符串的方法不太相同。 可以把 Bitmaps 想象成一个以位为单位的数组， 数组的每个单元只能存储 0 和 1， 数组的下标在 Bitmaps 中叫做偏移量。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145718081.png\" alt=\"image-20220730145718081\"></p>\n<h3 id=\"612命令\"><a class=\"markdownIt-Anchor\" href=\"#612命令\">#</a> 6.1.2.\t命令</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  （1）存：setbit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  （2）取：getbit</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  （3）统计：bitcount</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  （4）并/交/异或操作：bitop</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>详见下列很实例示范。</pre></td></tr></table></figure><p>1、 <code>setbit</code> <br>\n（1）格式<br>\n **setbit<key><offset><value>** 设置 Bitmaps 中某个偏移量的值（0 或 1）</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145758337.png\" alt=\"image-20220730145758337\"></p>\n<p><code>offset</code> ：偏移量从 0 开始</p>\n<p>（2）实例<br>\n每个独立用户是否访问过网站存放在 Bitmaps 中， 将访问的用户记做 1， 没有访问的用户记做 0， 用偏移量作为用户的 id。<br>\n设置键的第 offset 个位的值（从 0 算起） ， 假设现在有 20 个用户，userid=1， 6， 11， 15， 19 的用户对网站进行了访问， 那么当前 Bitmaps 初始化结果如图</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730145816388.png\" alt=\"image-20220730145816388\"></p>\n<p>unique:users:20201106 代表 2020-11-06 这天的独立访问用户的 Bitmaps</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730150000867.png\" alt=\"image-20220730150000867\"></p>\n<p>注：💡<br>\n很多应用的用户 id 以一个指定数字（例如 10000） 开头， 直接将用户 id 和 Bitmaps 的偏移量对应势必会造成一定的浪费， 通常的做法是每次做 setbit 操作时将用户 id 减去这个指定数字。<br>\n在第一次初始化 Bitmaps 时， 假如偏移量非常大， 那么整个初始化过程执行会比较慢， 可能会造成 Redis 的阻塞。</p>\n<p>2、 <code>getbit</code> <br>\n（1）格式<br>\n **getbit<key><offset>** 获取 Bitmaps 中某个偏移量的值</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730150357659.png\" alt=\"image-20220730150357659\"></p>\n<p>获取键的第 offset 位的值（从 0 开始算）</p>\n<p>（2）实例<br>\n获取 id=8 的用户是否在 2020-11-06 这天访问过， 返回 0 说明没有访问过：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730150425467.png\" alt=\"image-20220730150425467\"></p>\n<p>注：因为 100 根本不存在，所以也是返回 0</p>\n<p>3、 <code>bitcount</code> <br>\n<strong> 统计字符串</strong>被设置为 1 的 bit 数。一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。start 和 end 参数的设置，都可以使用负数值：比如 -1 表示最后一个位，而 -2 表示倒数第二个位，start、end 是指 bit 组的字节的<strong>下标数</strong>，二者皆包含。<br>\n（1）格式<br>\n<strong> bitcount<key>[start end]</strong> 统计字符串从 start 字节到 end 字节比特值为 1 的数量</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730150503473.png\" alt=\"image-20220730150503473\"></p>\n<p>（2）实例<br>\n计算 2022-11-06 这天的独立访问用户数量</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730150516584.png\" alt=\"image-20220730150516584\"></p>\n<p>start 和 end 代表起始和结束字节数， 下面操作计算用户 id 在第 1 个字节到第 3 个字节之间的独立访问用户数， 对应的用户 id 是 11， 15， 19。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220730150532060.png\" alt=\"image-20220730150532060\"></p>\n<p>举例：💡</p>\n<p>K1 【01000001 01000000  00000000 00100001】，对应【0，1，2，3】</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bitcount K1 <span class=\"token number\">1</span> <span class=\"token number\">2</span> ： 统计下标1、2字节组中bit<span class=\"token operator\">=</span><span class=\"token number\">1</span>的个数，即01000000  00000000 --》  bitcount K1 <span class=\"token number\">1</span> <span class=\"token number\">2</span>  --》  <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>bitcount K1 <span class=\"token number\">1</span> <span class=\"token number\">3</span>  ： 统计下标1、2字节组中bit<span class=\"token operator\">=</span><span class=\"token number\">1</span>的个数，即01000000  00000000 00100001  --》bitcount K1 <span class=\"token number\">1</span> <span class=\"token number\">3</span>  --》3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bitcount K1 <span class=\"token number\">0</span> <span class=\"token parameter variable\">-2</span>  ： 统计下标0到下标倒数第2，字节组中bit<span class=\"token operator\">=</span><span class=\"token number\">1</span>的个数，即01000001  01000000   00000000   --》bitcount K1 <span class=\"token number\">0</span> <span class=\"token parameter variable\">-2</span>   --》3</pre></td></tr></table></figure><p>注意：💡redis 的 setbit 设置或清除的是 bit 位置，而 bitcount 计算的是 byte 位置。bit（位）byte（字节）</p>\n<p>4、 <code>bitop</code> <br>\n (1) 格式<br>\n<strong> bitop  and (or/not/xor) <destkey> [key…]</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731112131913.png\" alt=\"image-20220731112131913\"></p>\n<p>bitop 是一个复合操作， 它可以做多个 Bitmaps 的 and（交集） 、 or（并集） 、 not（非） 、 xor（异或） 操作并将结果保存在 destkey 中。</p>\n<p>(2) 实例</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2020</span>-11-04 日访问网站的userid<span class=\"token operator\">=</span><span class=\"token number\">1,2</span>,5,9。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>setbit unique:users:20201104 <span class=\"token number\">1</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>setbit unique:users:20201104 <span class=\"token number\">2</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>setbit unique:users:20201104 <span class=\"token number\">5</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>setbit unique:users:20201104 <span class=\"token number\">9</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2020</span>-11-03 日访问网站的userid<span class=\"token operator\">=</span><span class=\"token number\">0,1</span>,4,9。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>setbit unique:users:20201103 <span class=\"token number\">0</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>setbit unique:users:20201103 <span class=\"token number\">1</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>setbit unique:users:20201103 <span class=\"token number\">4</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>setbit unique:users:20201103 <span class=\"token number\">9</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>计算出两天都访问过网站的用户数量</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bitop and unique:users:and:20201104_03</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> unique:users:20201103 unique:users:20201104</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731112424506.png\" alt=\"image-20220731112424506\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731112608764.png\" alt=\"image-20220731112608764\"></p>\n<p>计算出任意一天都访问过网站的用户数量（例如月活跃就是类似这种） ， 可以使用 or 求并集</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731112642593.png\" alt=\"image-20220731112642593\"></p>\n<h3 id=\"613bitmaps与set对比\"><a class=\"markdownIt-Anchor\" href=\"#613bitmaps与set对比\">#</a> 6.1.3.\tBitmaps 与 set 对比</h3>\n<p>假设网站有 1 亿用户， 每天独立访问的用户有 5 千万， 如果每天用集合类型和 Bitmaps 分别存储活跃用户可以得到表<br>\n<img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731112759996.png\" alt=\"image-20220731112759996\"></p>\n<p>很明显， 这种情况下使用 Bitmaps 能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731112933430.png\" alt=\"image-20220731112933430\"></p>\n<p>但 Bitmaps 并不是万金油， 假如该网站每天的独立访问用户很少， 例如只有 10 万（大量的僵尸用户） ， 那么两者的对比如下表所示， 很显然， 这时候使用 Bitmaps 就不太合适了， 因为基本上大部分位都是 0。<br>\n<img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731112959496.png\" alt=\"image-20220731112959496\"></p>\n<h2 id=\"2-hyperloglog\"><a class=\"markdownIt-Anchor\" href=\"#2-hyperloglog\">#</a> 2 - HyperLogLog</h2>\n<h3 id=\"621简介\"><a class=\"markdownIt-Anchor\" href=\"#621简介\">#</a> 6.2.1.\t简介</h3>\n<p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站 PV（PageView 页面访问量）, 可以使用 Redis 的 incr、incrby 轻松实现。</p>\n<p>但像 UV（UniqueVisitor，独立访客）、独立 IP 数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p>\n<p><strong>解决基数问题有很多种方案：</strong><br>\n（1）数据存储在 MySQL 表中，使用 distinct count 计算不重复个数<br>\n（2）使用 Redis 提供的 hash、set、bitmaps 等数据结构来处理</p>\n<p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。</p>\n<p>能否能够降低一定的精度来平衡存储空间？Redis 推出了 HyperLogLog</p>\n<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p>\n<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>\n<p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>\n<p>什么是基数？<br>\n 比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数 (不重复元素) 为 5。 基数估计就是在误差可接受的范围内，快速计算基数。</p>\n<h3 id=\"622命令\"><a class=\"markdownIt-Anchor\" href=\"#622命令\">#</a> 6.2.2.\t命令</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  （1）存：pfadd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  （2）去重统计（可并集）：pfcount</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  （3）取并集<span class=\"token punctuation\">(</span>生成新数据<span class=\"token punctuation\">)</span>：pfmerge</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>详见下列实例</pre></td></tr></table></figure><p>1、 <code>pfadd </code> <br>\n（1）格式<br>\n<strong> pfadd <key>&lt; element&gt; [element …]</strong>   添加指定元素到 HyperLogLog 中</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161114528.png\" alt=\"image-20220731161114528\"></p>\n<p>（2）实例</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161148573.png\" alt=\"image-20220731161148573\"></p>\n<p>将所有元素添加到指定 HyperLogLog 数据结构中。如果执行命令后 HLL 估计的近似基数发生变化，则返回 1，否则返回 0。</p>\n<p>2、 <code>pfcount</code> <br>\n（1）格式<br>\n<strong> pfcount<key> [key …]</strong> 计算 HLL 的近似基数，可以计算多个 HLL，比如用 HLL 存储每天的 UV，计算一周的 UV 可以使用 7 天的 UV 合并计算即可</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161256514.png\" alt=\"image-20220731161256514\"></p>\n<p>（2）实例</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161305107.png\" alt=\"image-20220731161305107\"></p>\n<p>3、 <code>pfmerge</code> <br>\n（1）格式<br>\n<strong> pfmerge<destkey><sourcekey> [sourcekey …]</strong>  将一个或多个 HLL 合并后的结果存储在另一个 HLL 中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161447288.png\" alt=\"image-20220731161447288\"></p>\n<p>（2）实例</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161510641.png\" alt=\"image-20220731161510641\"></p>\n<h2 id=\"3-geospatial\"><a class=\"markdownIt-Anchor\" href=\"#3-geospatial\">#</a> 3- Geospatial</h2>\n<h3 id=\"631简介\"><a class=\"markdownIt-Anchor\" href=\"#631简介\">#</a> 6.3.1.\t简介</h3>\n<p>Redis 3.2 中增加了对 GEO 类型的支持。GEO，Geographic，<strong>地理信息</strong>的缩写。该类型，就是元素的 2 维坐标，在地图上就是<strong>经纬度</strong>。redis 基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度 Hash 等常见操作。</p>\n<h3 id=\"632命令\"><a class=\"markdownIt-Anchor\" href=\"#632命令\">#</a> 6.3.2.\t命令</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   （1）存：geoadd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   （2）取：geopos</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   （3）直线距离：geodist</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   （4）指定中心、半径内的元素：georadius、</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>详见下列实例</pre></td></tr></table></figure><p>1、 <code>geoadd</code></p>\n<p>（1）格式<br>\n<strong> geoadd<key>&lt; longitude&gt;<latitude><member> [longitude latitude member…]</strong>   添加地理位置（经度，纬度，名称）</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161856254.png\" alt=\"image-20220731161856254\"></p>\n<p>（2）实例</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>geoadd china:city <span class=\"token number\">121.47</span> <span class=\"token number\">31.23</span> shanghai</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>geoadd china:city <span class=\"token number\">106.50</span> <span class=\"token number\">29.53</span> chongqing <span class=\"token number\">114.05</span> <span class=\"token number\">22.52</span> shenzhen <span class=\"token number\">116.38</span> <span class=\"token number\">39.90</span> beijing</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731161919961.png\" alt=\"image-20220731161919961\"></p>\n<p>两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p>\n<p><strong>有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</strong></p>\n<p>当坐标位置超出指定范围时，该命令将会返回一个错误。<br>\n已经添加的数据，是无法再次往里面添加的。</p>\n<p>2、 <code>geopos  </code></p>\n<p>（1）格式<br>\n<strong> geopos  <key><member> [member…]</strong>  获得指定地区的坐标值</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731162347572.png\" alt=\"image-20220731162347572\"></p>\n<p>（2）实例</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731162359258.png\" alt=\"image-20220731162359258\"></p>\n<p>3、 <code>geodist</code></p>\n<p>（1）格式<br>\n<strong> geodist<key><member1><member2>  [m|km|ft|mi ]</strong>  获取两个位置之间的直线距离</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731162423033.png\" alt=\"image-20220731162423033\"></p>\n<p>（2）实例<br>\n获取两个位置之间的直线距离</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731162458356.png\" alt=\"image-20220731162458356\"></p>\n<p>单位：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>m 表示单位为米<span class=\"token punctuation\">[</span>默认值<span class=\"token punctuation\">]</span>。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>km 表示单位为千米。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mi 表示单位为英里。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ft 表示单位为英尺。</pre></td></tr></table></figure><p>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</p>\n<p>4、 <code>georadius</code> <br>\n（1）格式<br>\n<strong> georadius<key>&lt; longitude&gt;<latitude>radius  m|km|ft|mi</strong>   以给定的经纬度为中心，找出某一半径内的元素</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731162604335.png\" alt=\"image-20220731162604335\"></p>\n<p>经度 纬度 距离 单位</p>\n<p>（2）实例</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731162630641.png\" alt=\"image-20220731162630641\"></p>\n<h1 id=\"七-redis_jedis_测试\"><a class=\"markdownIt-Anchor\" href=\"#七-redis_jedis_测试\">#</a> 七、Redis_Jedis_测试</h1>\n<h2 id=\"1-jedis所需要的jar包\"><a class=\"markdownIt-Anchor\" href=\"#1-jedis所需要的jar包\">#</a> 1 - Jedis 所需要的 jar 包</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>redis.clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jedis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"2-连接redis注意事项\"><a class=\"markdownIt-Anchor\" href=\"#2-连接redis注意事项\">#</a> 2 - 连接 Redis 注意事项</h2>\n<p>禁用 Linux 的防火墙：Linux (CentOS7) 里执行命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl stop/disable firewalld.service   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>redis.conf中注释掉bind <span class=\"token number\">127.0</span>.0.1 ,然后 protected-mode no</pre></td></tr></table></figure><h2 id=\"3-jedis常用操作\"><a class=\"markdownIt-Anchor\" href=\"#3-jedis常用操作\">#</a> 3 - Jedis 常用操作</h2>\n<h3 id=\"731创建动态的工程\"><a class=\"markdownIt-Anchor\" href=\"#731创建动态的工程\">#</a> 7.3.1.\t创建动态的工程</h3>\n<h3 id=\"732创建测试程序\"><a class=\"markdownIt-Anchor\" href=\"#732创建测试程序\">#</a> 7.3.2.\t创建测试程序</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>jedis</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Jedis</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.137.3\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">String</span> pong <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功：\"</span><span class=\"token operator\">+</span>pong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"4-测试相关数据类型\"><a class=\"markdownIt-Anchor\" href=\"#4-测试相关数据类型\">#</a> 4 - 测试相关数据类型</h2>\n<h3 id=\"741jedis-api-key\"><a class=\"markdownIt-Anchor\" href=\"#741jedis-api-key\">#</a> 7.4.1.\tJedis-API:    Key</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">ttl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"742jedis-api-string\"><a class=\"markdownIt-Anchor\" href=\"#742jedis-api-string\">#</a> 7.4.2.\tJedis-API:    String</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">mset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"v2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str3\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"v3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">mget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"743jedis-api-list\"><a class=\"markdownIt-Anchor\" href=\"#743jedis-api-list\">#</a> 7.4.3.\tJedis-API:    List</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">lrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mylist\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> element <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"744jedis-api-set\"><a class=\"markdownIt-Anchor\" href=\"#744jedis-api-set\">#</a> 7.4.4.\tJedis-API:    set</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order02\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order03\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order04\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> smembers <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">smembers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> order <span class=\"token operator\">:</span> smembers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">srem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orders\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"order02\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"745jedis-api-hash\"><a class=\"markdownIt-Anchor\" href=\"#745jedis-api-hash\">#</a> 7.4.5.\tJedis-API:    hash</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"userName\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"userName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"telphone\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"13810169999\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc@163.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hmset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash2\"</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hmget</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hash2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"telphone\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> element <span class=\"token operator\">:</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>7.4.6.\tJedis-API:    zset</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"l4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70d</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> zrange <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zrange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zset01\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> e <span class=\"token operator\">:</span> zrange<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"八-redis_jedis_实例\"><a class=\"markdownIt-Anchor\" href=\"#八-redis_jedis_实例\">#</a> 八、Redis_Jedis_实例</h1>\n<h2 id=\"1-完成一个手机验证码功能\"><a class=\"markdownIt-Anchor\" href=\"#1-完成一个手机验证码功能\">#</a> 1 - 完成一个手机验证码功能</h2>\n<p>要求：<br>\n1、输入手机号，点击发送后随机生成 6 位数字码，2 分钟有效<br>\n 2、输入验证码，点击验证，返回成功或失败<br>\n 3、每个手机号每天只能输入 3 次</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731164343801.png\" alt=\"image-20220731164343801\"></p>\n<p>实现见：<a href=\"http://blog.dabing.cool/cache/redis%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E9%AA%8C%E8%AF%81%E7%A0%81%E6%A0%A1%E9%AA%8C/\">http://blog.dabing.cool/cache/redis 实现手机验证码校验 /</a></p>\n<h1 id=\"九-redis与spring-boot整合\"><a class=\"markdownIt-Anchor\" href=\"#九-redis与spring-boot整合\">#</a> 九、Redis 与 Spring Boot 整合</h1>\n<p>Spring Boot 整合 Redis 非常简单，只需要按如下步骤整合即可</p>\n<h2 id=\"1-整合步骤\"><a class=\"markdownIt-Anchor\" href=\"#1-整合步骤\">#</a> 1 - 整合步骤</h2>\n<p>1、\t在 pom.xml 文件中引入 redis 相关依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- redis --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!-- spring2.X 集成 redis 所需 common-pool2--></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.commons<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>commons-pool2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.6.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2、\tapplication.properties 配置 redis 配置</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#Redis 服务器地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">spring.redis.host</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">192.168.140.136</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#Redis 服务器连接端口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">spring.redis.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">6379</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#Redis 数据库索引（默认为 0）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key attr-name\">spring.redis.database</span><span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#连接超时时间（毫秒）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key attr-name\">spring.redis.timeout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1800000</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#连接池最大连接数（使用负值表示没有限制）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key attr-name\">spring.redis.lettuce.pool.max-active</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">20</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#最大阻塞等待时间 (负数表示没限制)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key attr-name\">spring.redis.lettuce.pool.max-wait</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">-1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#连接池中的最大空闲连接</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key attr-name\">spring.redis.lettuce.pool.max-idle</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">5</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#连接池中的最小空闲连接</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key attr-name\">spring.redis.lettuce.pool.min-idle</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">0</span></pre></td></tr></table></figure><p>3、\t添加 redis 配置类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@EnableCaching</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CachingConfigurerSupport</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">RedisSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> redisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ObjectMapper</span> om <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        om<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyAccessor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ALL</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonAutoDetect<span class=\"token punctuation\">.</span>Visibility</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        om<span class=\"token punctuation\">.</span><span class=\"token function\">enableDefaultTyping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper<span class=\"token punctuation\">.</span>DefaultTyping</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NON_FINAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        jackson2JsonRedisSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">setObjectMapper</span><span class=\"token punctuation\">(</span>om<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//key 序列化方式</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span>redisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//value 序列化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//value hashmap 序列化</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashValueSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">CacheManager</span> <span class=\"token function\">cacheManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    \t<span class=\"token class-name\">RedisSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> redisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    \t<span class=\"token class-name\">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    \t<span class=\"token comment\">// 解决查询缓存转换异常的问题</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">ObjectMapper</span> om <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        om<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyAccessor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ALL</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonAutoDetect<span class=\"token punctuation\">.</span>Visibility</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        om<span class=\"token punctuation\">.</span><span class=\"token function\">enableDefaultTyping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper<span class=\"token punctuation\">.</span>DefaultTyping</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NON_FINAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        jackson2JsonRedisSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">setObjectMapper</span><span class=\"token punctuation\">(</span>om<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 配置序列化（解决乱码的问题）, 过期时间 600 秒</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">RedisCacheConfiguration</span> config <span class=\"token operator\">=</span> <span class=\"token class-name\">RedisCacheConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultCacheConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entryTtl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">serializeKeysWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializationContext<span class=\"token punctuation\">.</span>SerializationPair</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromSerializer</span><span class=\"token punctuation\">(</span>redisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">serializeValuesWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializationContext<span class=\"token punctuation\">.</span>SerializationPair</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disableCachingNullValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">RedisCacheManager</span> cacheManager <span class=\"token operator\">=</span> <span class=\"token class-name\">RedisCacheManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cacheDefaults</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> cacheManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>4、测试一下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">RedisTestController</span>中添加测试方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/redisTest\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisTestController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testRedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 设置值到 redis</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lucy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 从 redis 获取值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"十-redis_事务_锁机制_秒杀\"><a class=\"markdownIt-Anchor\" href=\"#十-redis_事务_锁机制_秒杀\">#</a> 十、Redis_事务_锁机制_秒杀</h1>\n<h2 id=\"1-redis的事务定义\"><a class=\"markdownIt-Anchor\" href=\"#1-redis的事务定义\">#</a> 1- Redis 的事务定义</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731165702195.png\" alt=\"image-20220731165702195\"></p>\n<p>Redis 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p>\n<p>Redis 事务的主要作用就是串联多个命令防止别的命令插队。</p>\n<h2 id=\"2-multi-exec-discard\"><a class=\"markdownIt-Anchor\" href=\"#2-multi-exec-discard\">#</a> 2 - Multi、Exec、discard</h2>\n<p>从输入 Multi 命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入 Exec 后，Redis 会将之前的命令队列中的命令依次执行。</p>\n<p>组队的过程中可以通过 discard 来放弃组队。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731165752989.png\" alt=\"image-20220731165752989\"></p>\n<p>案例：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731165812368.png\" alt=\"image-20220731165812368\"></p>\n<p>组队成功，提交成功</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731165825351.png\" alt=\"image-20220731165825351\"></p>\n<p>组队阶段报错，提交失败</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731165909910.png\" alt=\"image-20220731165909910\"></p>\n<p>组队成功，提交有成功有失败情况</p>\n<h2 id=\"3-事务的错误处理\"><a class=\"markdownIt-Anchor\" href=\"#3-事务的错误处理\">#</a> 3 - 事务的错误处理</h2>\n<p>组队中某个命令出现了报告错误，执行时整个的所有队列都会被取消。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731165948305.png\" alt=\"image-20220731165948305\"></p>\n<p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731170100577.png\" alt=\"image-20220731170100577\"></p>\n<h2 id=\"4-为什么要做成事务\"><a class=\"markdownIt-Anchor\" href=\"#4-为什么要做成事务\">#</a> 4 - 为什么要做成事务</h2>\n<p>想想一个场景：有很多人有你的账户，同时去参加双十一抢购</p>\n<h2 id=\"5-事务冲突的问题\"><a class=\"markdownIt-Anchor\" href=\"#5-事务冲突的问题\">#</a> 5 - 事务冲突的问题</h2>\n<h3 id=\"1051例子\"><a class=\"markdownIt-Anchor\" href=\"#1051例子\">#</a> 10.5.1.\t例子</h3>\n<p>一个请求想给金额减 8000<br>\n 一个请求想给金额减 5000<br>\n 一个请求想给金额减 1000</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731170212554.png\" alt=\"image-20220731170212554\"></p>\n<h3 id=\"1052悲观锁\"><a class=\"markdownIt-Anchor\" href=\"#1052悲观锁\">#</a> 10.5.2.\t悲观锁</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731170241787.png\" alt=\"image-20220731170241787\"></p>\n<p><code>悲观锁</code>  (Pessimistic Lock),  顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会 block 直到它拿到锁。</p>\n<p><strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如<strong>行锁，表锁等，读锁，写锁</strong>等，都是在做操作之前先上锁。</p>\n<h3 id=\"1053乐观锁\"><a class=\"markdownIt-Anchor\" href=\"#1053乐观锁\">#</a> 10.5.3.\t乐观锁</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731170516369.png\" alt=\"image-20220731170516369\"></p>\n<p><code>乐观锁</code>  (Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用 <code>版本号</code> 等机制。</p>\n<p>乐观锁适用于<strong>多读</strong>的应用类型，<strong>这样可以提高吞吐量</strong>。Redis 就是利用这种<strong> check-and-set 机制</strong>实现事务的。</p>\n<h3 id=\"1054watch-key-key\"><a class=\"markdownIt-Anchor\" href=\"#1054watch-key-key\">#</a> 10.5.4.\tWATCH key [key …]</h3>\n<p>在执行 multi 之前，先执行 watch key1 [key2], 可以监视一个 (或多个) key ，<strong>如果在事务执行之前这个 (或这些) key 被其他命令所改动，那么事务将被打断</strong>。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731170841894.png\" alt=\"image-20220731170841894\"></p>\n<h3 id=\"1055unwatch\"><a class=\"markdownIt-Anchor\" href=\"#1055unwatch\">#</a> 10.5.5.\tunwatch</h3>\n<p>取消 WATCH 命令对所有 key 的监视。</p>\n<p>如果在执行 WATCH 命令之后，EXEC 命令或 DISCARD 命令先被执行了的话，那么就不需要再执行 UNWATCH 了。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2RvYy5yZWRpc2ZhbnMuY29tL3RyYW5zYWN0aW9uL2V4ZWMuaHRtbA==\">http://doc.redisfans.com/transaction/exec.html</span></p>\n<h2 id=\"6-redis事务三特性\"><a class=\"markdownIt-Anchor\" href=\"#6-redis事务三特性\">#</a> 6 - Redis 事务三特性</h2>\n<ul>\n<li>单独的隔离操作\n<ul>\n<li>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>\n</ul>\n</li>\n<li>没有隔离级别的概念\n<ul>\n<li>队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</li>\n</ul>\n</li>\n<li>不保证原子性\n<ul>\n<li>事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"十一-redis_事务_秒杀案例\"><a class=\"markdownIt-Anchor\" href=\"#十一-redis_事务_秒杀案例\">#</a> 十一、Redis_事务_秒杀案例</h1>\n<h2 id=\"1-解决计数器和人员记录的事务操作\"><a class=\"markdownIt-Anchor\" href=\"#1-解决计数器和人员记录的事务操作\">#</a> 1 - 解决计数器和人员记录的事务操作</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731171148364.png\" alt=\"image-20220731171148364\"></p>\n<h2 id=\"2-redis事务秒杀并发模拟\"><a class=\"markdownIt-Anchor\" href=\"#2-redis事务秒杀并发模拟\">#</a> 2 - Redis 事务–秒杀并发模拟</h2>\n<p>使用工具 ab 模拟测试</p>\n<p>CentOS6 默认安装</p>\n<p>CentOS7 需要手动安装</p>\n<h3 id=\"1121联网yum-install-httpd-tools\"><a class=\"markdownIt-Anchor\" href=\"#1121联网yum-install-httpd-tools\">#</a> 11.2.1.\t联网：yum install httpd-tools</h3>\n<h3 id=\"1122无网络\"><a class=\"markdownIt-Anchor\" href=\"#1122无网络\">#</a> 11.2.2.\t无网络</h3>\n<p>（1） 进入 cd  /run/media/root/CentOS 7 x86_64/Packages（路径跟 centos6 不同）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span>  /run/media/root/CentOS <span class=\"token number\">7</span> x86_64/Packages</pre></td></tr></table></figure><p>（2） 顺序安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>apr-1.4.8-3.el7.x86_64.rpm</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>apr-util-1.5.2-6.el7.x86_64.rpm</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>httpd-tools-2.4.6-67.el7.centos.x86_64.rpm</pre></td></tr></table></figure><h3 id=\"1123测试及结果\"><a class=\"markdownIt-Anchor\" href=\"#1123测试及结果\">#</a> 11.2.3.\t测试及结果</h3>\n<p><strong>11.2.3.1.\t通过 ab 测试</strong><br>\n <code>vim postfile </code> 模拟表单提交参数，以 <code>&amp;</code>  符号结尾；存放当前目录。<br>\n** 内容：**prodid=0101&amp;</p>\n<p>ab -n 2000 -c 200  -p ~/postfile -T application/x-www-form-urlencoded <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMi4xMTU6ODA4MS9TZWNraWxsL2Rvc2Vja2lsbA==\">http://192.168.2.115:8081/Seckill/doseckill</span></p>\n<p>表示：- n 参数表示 2000 次请求，-c 参数表示并发请求 200 次，-p 是请求参数，写在当前文件夹的 postfile 文件中</p>\n<p><strong>11.2.3.2.\t超卖</strong><br>\n<img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731171742352.png\" alt=\"image-20220731171742352\"></p>\n<h2 id=\"3-超卖问题\"><a class=\"markdownIt-Anchor\" href=\"#3-超卖问题\">#</a> 3 - 超卖问题</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731171820876.png\" alt=\"image-20220731171820876\"></p>\n<h2 id=\"4-利用乐观锁淘汰用户解决超卖问题\"><a class=\"markdownIt-Anchor\" href=\"#4-利用乐观锁淘汰用户解决超卖问题\">#</a> 4 - 利用乐观锁淘汰用户，解决超卖问题。</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731171831377.png\" alt=\"image-20220731171831377\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 增加乐观锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>qtkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//3. 判断库存</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> qtkeystr <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>qtkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>qtkeystr<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>qtkeystr<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未初始化库存\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> qt <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>qtkeystr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>qt<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已经秒光\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 增加事务</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">Transaction</span> multi <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">multi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//4. 减少库存</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//jedis.decr(qtkey);</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>multi<span class=\"token punctuation\">.</span><span class=\"token function\">decr</span><span class=\"token punctuation\">(</span>qtkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//5. 加人</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//jedis.sadd(usrkey, uid);</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>multi<span class=\"token punctuation\">.</span><span class=\"token function\">sadd</span><span class=\"token punctuation\">(</span>usrkey<span class=\"token punctuation\">,</span> uid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 执行事务</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> multi<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 判断事务提交是否失败</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒杀失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"秒杀成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731172004110.png\" alt=\"image-20220731172004110\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731172018038.png\" alt=\"image-20220731172018038\"></p>\n<h2 id=\"5-继续增加并发测试\"><a class=\"markdownIt-Anchor\" href=\"#5-继续增加并发测试\">#</a> 5 - 继续增加并发测试</h2>\n<h3 id=\"1151连接有限制\"><a class=\"markdownIt-Anchor\" href=\"#1151连接有限制\">#</a> 11.5.1.\t连接有限制</h3>\n<p>ab -n 2000 -c 200 -k -p postfile -T ‘application/x-www-form-urlencoded’</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMTQwLjE6ODA4MC9zZWNraWxsL2Rvc2Vja2lsbA==\">http://192.168.140.1:8080/seckill/doseckill</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731172350447.png\" alt=\"image-20220731172350447\"></p>\n<p>增加 - r 参数，-r   Don’t exit on socket receive errors.</p>\n<p>ab -n 2000 -c 100 -r -p postfile -T ‘application/x-www-form-urlencoded’</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMTQwLjE6ODA4MC9zZWNraWxsL2Rvc2Vja2lsbA==\">http://192.168.140.1:8080/seckill/doseckill</span></p>\n<h3 id=\"1152已经秒光可是还有库存\"><a class=\"markdownIt-Anchor\" href=\"#1152已经秒光可是还有库存\">#</a> 11.5.2.\t已经秒光，可是还有库存</h3>\n<p>ab -n 2000 -c 100 -p postfile -T ‘application/x-www-form-urlencoded’</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMTM3LjE6ODA4MC9zZWNraWxsL2Rvc2Vja2lsbA==\">http://192.168.137.1:8080/seckill/doseckill</span></p>\n<p>已经秒光，可是还有库存。原因，就是<strong>乐观锁导致很多请求都失败</strong>。先点的没秒到，后点的可能秒到了。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731172717687.png\" alt=\"image-20220731172717687\"></p>\n<h3 id=\"1153连接超时通过连接池解决\"><a class=\"markdownIt-Anchor\" href=\"#1153连接超时通过连接池解决\">#</a> 11.5.3.\t连接超时，通过连接池解决</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731172732412.png\" alt=\"image-20220731172732412\"></p>\n<h3 id=\"1154连接池\"><a class=\"markdownIt-Anchor\" href=\"#1154连接池\">#</a> 11.5.4.\t连接池</h3>\n<p>节省每次连接 redis 服务带来的消耗，把连接好的实例反复利用。</p>\n<p>通过参数管理连接的行为</p>\n<p>代码见项目中</p>\n<ul>\n<li><strong>链接池参数</strong>\n<ul>\n<li><code>MaxTotal</code> ：控制一个 pool 可分配多少个 jedis 实例，通过 **pool.getResource ()** 来获取；如果赋值为 - 1，则表示不限制；如果 pool 已经分配了 MaxTotal 个 jedis 实例，则此时 pool 的状态为 exhausted 。</li>\n<li><code>maxIdle</code> ：控制一个 pool 最多有多少个状态为 idle (空闲) 的 jedis 实例；</li>\n<li><code>MaxWaitMillis</code> ：表示当 borrow 一个 jedis 实例时，最大的等待毫秒数，如果超过等待时间，则直接抛 JedisConnectionException；</li>\n<li><code>testOnBorrow</code> ：获得一个 jedis 实例的时候是否检查连接可用性（ping ()）；如果为 true，则得到的 jedis 实例均是可用的；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-解决库存遗留问题\"><a class=\"markdownIt-Anchor\" href=\"#6-解决库存遗留问题\">#</a> 6 - 解决库存遗留问题</h2>\n<p>** 问题描述：** 由于乐观锁造成的库存遗留问题</p>\n<p>假设现在有 500 个商品要出售，版本号是 1.0，有 2000 个人同时秒杀，其中有 1 个人购买成功并且修改库存为 499，版本号 1.1，那其他的 1999 人都不能成功购买，即有预存但是无法购买，造成的库存预留问题。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220804125018740.png\" alt=\"image-20220804125018740\"></p>\n<p>** 解决：** 用 LUA 脚本，脚本可见 11.7.5 代码</p>\n<h3 id=\"1161lua脚本\"><a class=\"markdownIt-Anchor\" href=\"#1161lua脚本\">#</a> 11.6.1.\tLUA 脚本</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731173040454.png\" alt=\"image-20220731173040454\"></p>\n<p>Lua 是一个小巧的<strong>脚本语言</strong>，Lua 脚本可以很容易的被 C/C++ 代码调用，也可以反过来调用 C/C++ 的函数，Lua 并没有提供强大的库，一个完整的 Lua 解释器不过 200k，所以 Lua 不适合作为开发独立应用程序的语言，而是作为<strong>嵌入式脚本语言</strong>。</p>\n<p>很多应用程序、游戏使用 LUA 作为自己的嵌入式脚本语言，以此来实现可配置性、可扩展性。</p>\n<p>这其中包括魔兽争霸地图、魔兽世界、博德之门、愤怒的小鸟等众多游戏插件或外挂。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzNjc2Nob29sLmNuL2x1YS8=\">https://www.w3cschool.cn/lua/</span></p>\n<h3 id=\"1162lua脚本在redis中的优势\"><a class=\"markdownIt-Anchor\" href=\"#1162lua脚本在redis中的优势\">#</a> 11.6.2.\tLUA 脚本在 Redis 中的优势</h3>\n<p>将复杂的或者多步的 redis 操作，写为一个脚本，一次提交给 redis 执行，减少反复连接 redis 的次数。提升性能。</p>\n<p><strong>LUA 脚本是类似 redis 事务，有一定的原子性，不会被其他命令插队，可以完成一些 redis 事务性的操作。</strong></p>\n<p>但是注意 redis 的 lua 脚本功能，只有在 Redis 2.6 以上的版本才可以使用。<br>\n利用 lua 脚本淘汰用户，解决<strong>超卖问题</strong>。</p>\n<p>redis 2.6 版本以后，通过 lua 脚本解决<strong>争抢问题</strong>，实际上是<strong> redis 利用其单线程的特性，用任务队列的方式解决多任务并发问题</strong>。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731173328775.png\" alt=\"image-20220731173328775\"></p>\n<h2 id=\"7-redis_事务_秒杀案例_代码\"><a class=\"markdownIt-Anchor\" href=\"#7-redis_事务_秒杀案例_代码\">#</a> 7 - Redis_事务_秒杀案例_代码</h2>\n<h3 id=\"1171项目结构\"><a class=\"markdownIt-Anchor\" href=\"#1171项目结构\">#</a> 11.7.1.\t项目结构</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731173358460.png\" alt=\"image-20220731173358460\"></p>\n<h3 id=\"1172第一版简单版\"><a class=\"markdownIt-Anchor\" href=\"#1172第一版简单版\">#</a> 11.7.2.\t第一版：简单版</h3>\n<p>老师点 10 次，正常秒杀</p>\n<p>同学一起点试一试，秒杀也是正常的。这是因为还达不到并发的效果。</p>\n<p>使用<strong>工具 ab</strong> 模拟并发测试，会出现超卖情况。查看库存会出现<strong>负数</strong>。</p>\n<h3 id=\"1173第二版加事务-乐观锁解决超卖但出现遗留库存和连接超时\"><a class=\"markdownIt-Anchor\" href=\"#1173第二版加事务-乐观锁解决超卖但出现遗留库存和连接超时\">#</a> 11.7.3.\t第二版：加事务 - 乐观锁 (解决超卖), 但出现遗留库存和连接超时</h3>\n<h3 id=\"1174第三版连接池解决超时问题\"><a class=\"markdownIt-Anchor\" href=\"#1174第三版连接池解决超时问题\">#</a> 11.7.4.\t第三版：连接池解决超时问题</h3>\n<h3 id=\"1175第四版解决库存遗留问题lua脚本\"><a class=\"markdownIt-Anchor\" href=\"#1175第四版解决库存遗留问题lua脚本\">#</a> 11.7.5.\t第四版：解决库存遗留问题，LUA 脚本</h3>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> userid<span class=\"token operator\">=</span>KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> prodid<span class=\"token operator\">=</span>KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">local</span> qtkey<span class=\"token operator\">=</span><span class=\"token string\">\"sk:\"</span><span class=\"token operator\">..</span>prodid<span class=\"token operator\">..</span><span class=\"token string\">\":qt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">local</span> usersKey<span class=\"token operator\">=</span><span class=\"token string\">\"sk:\"</span><span class=\"token operator\">..</span>prodid<span class=\"token punctuation\">.</span>\"<span class=\"token punctuation\">:</span>usr'<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">local</span> userExists<span class=\"token operator\">=</span>redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sismember\"</span><span class=\"token punctuation\">,</span>usersKey<span class=\"token punctuation\">,</span>userid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token function\">tonumber</span><span class=\"token punctuation\">(</span>userExists<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token keyword\">then</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">local</span> num<span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span> <span class=\"token punctuation\">,</span>qtkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token function\">tonumber</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span> <span class=\"token keyword\">then</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">else</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decr\"</span><span class=\"token punctuation\">,</span>qtkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sadd\"</span><span class=\"token punctuation\">,</span>usersKey<span class=\"token punctuation\">,</span>userid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"十二-redis持久化之rdb\"><a class=\"markdownIt-Anchor\" href=\"#十二-redis持久化之rdb\">#</a> 十二、Redis 持久化之 RDB</h1>\n<h2 id=\"1-总体介绍\"><a class=\"markdownIt-Anchor\" href=\"#1-总体介绍\">#</a> 1 - 总体介绍</h2>\n<p>官网介绍：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5yZWRpcy5pbw==\">http://www.redis.io</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731173617123.png\" alt=\"image-20220731173617123\"></p>\n<p>Redis 提供了 2 个不同形式的持久化方式。</p>\n<ul>\n<li>RDB（Redis DataBase）</li>\n<li>AOF（Append Of File）</li>\n</ul>\n<h2 id=\"2-rdbredis-database\"><a class=\"markdownIt-Anchor\" href=\"#2-rdbredis-database\">#</a> 2 - RDB（Redis DataBase）</h2>\n<h3 id=\"1221官网介绍\"><a class=\"markdownIt-Anchor\" href=\"#1221官网介绍\">#</a> 12.2.1.\t官网介绍</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731173702411.png\" alt=\"image-20220731173702411\"></p>\n<h3 id=\"1222是什么\"><a class=\"markdownIt-Anchor\" href=\"#1222是什么\">#</a> 12.2.2.\t是什么</h3>\n<p>在指定的<strong>时间间隔</strong>内将内存中的数据集<strong>快照</strong>写入磁盘， 也就是行话讲的 Snapshot 快照，它恢复时是将快照文件直接读到内存里</p>\n<h3 id=\"1223备份是如何执行的\"><a class=\"markdownIt-Anchor\" href=\"#1223备份是如何执行的\">#</a> 12.2.3.\t备份是如何执行的</h3>\n<p>Redis 会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个<strong>临时文件</strong>中，待持久化过程都结束了，再用这个<strong>临时文件替换上次持久化好的文件</strong>。 整个过程中，主进程是不进行任何 IO 操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。</p>\n<p><strong>RDB 的缺点是最后一次持久化后的数据可能丢失</strong>。</p>\n<h3 id=\"1224fork\"><a class=\"markdownIt-Anchor\" href=\"#1224fork\">#</a> 12.2.4.\tFork</h3>\n<ul>\n<li>Fork 的作用是<strong>复制</strong>一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并<strong>作为原进程的子进程</strong></li>\n<li>在 Linux 程序中，fork () 会产生一个和父进程完全相同的子进程，但子进程在此后多会 exec 系统调用，出于效率考虑，Linux 中引入了 “<strong>写时复制技术</strong>”</li>\n<li><strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</li>\n</ul>\n<h3 id=\"1225rdb持久化流程\"><a class=\"markdownIt-Anchor\" href=\"#1225rdb持久化流程\">#</a> 12.2.5.\tRDB 持久化流程</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731174221520.png\" alt=\"image-20220731174221520\"></p>\n<h3 id=\"1226dumprdb文件\"><a class=\"markdownIt-Anchor\" href=\"#1226dumprdb文件\">#</a> 12.2.6.\tdump.rdb 文件</h3>\n<p>在 redis.conf 中配置文件名称，默认为 dump.rdb</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731174310211.png\" alt=\"image-20220731174310211\"></p>\n<h3 id=\"1227配置位置\"><a class=\"markdownIt-Anchor\" href=\"#1227配置位置\">#</a> 12.2.7.\t配置位置</h3>\n<p>rdb 文件的保存路径，也可以修改。默认为 Redis 启动时命令行所在的目录下<br>\n dir “/myredis/”</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731174540479.png\" alt=\"image-20220731174540479\"></p>\n<h3 id=\"1228如何触发rdb快照保持策略\"><a class=\"markdownIt-Anchor\" href=\"#1228如何触发rdb快照保持策略\">#</a> 12.2.8.\t如何触发 RDB 快照；保持策略</h3>\n<p><strong>12.2.8.1.\t配置文件中默认的快照配置</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731174621350.png\" alt=\"image-20220731174621350\"></p>\n<p><strong>12.2.8.2.\t命令 save VS bgsave</strong></p>\n<p><code>save</code>  ：save 时只管保存，其它不管，全部阻塞。手动保存。不建议。</p>\n<p><code>bgsave</code> ：Redis 会在后台异步进行快照操作， <strong>快照同时还可以响应客户端请求。</strong></p>\n<p>可以通过 lastsave 命令获取最后一次成功执行快照的时间</p>\n<p><strong>12.2.8.3.\tflushall 命令</strong></p>\n<p>执行 flushall 命令，也会产生 dump.rdb 文件，但里面是空的，无意义</p>\n<p><strong>12.2.8.4.\t###SNAPSHOTTING 快照 ###</strong></p>\n<p><strong>12.2.8.5.\tSave</strong></p>\n<p>格式：save 秒钟 写操作次数</p>\n<p>RDB 是整个内存的压缩过的 Snapshot，RDB 的数据结构，可以配置复合的快照触发条件，</p>\n<p><strong>默认是 1 分钟内改了 1 万次，或 5 分钟内改了 10 次，或 15 分钟内改了 1 次。</strong></p>\n<p><strong>禁用：不设置 save 指令，或者给 save 传入空字符串</strong></p>\n<p><strong>12.2.8.6.\tstop-writes-on-bgsave-error</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731175145278.png\" alt=\"image-20220731175145278\"></p>\n<p>当 Redis 无法写入磁盘的话，直接关掉 Redis 的写操作。推荐 yes.</p>\n<p><strong>12.2.8.7.\trdbcompression 压缩文件</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731175201409.png\" alt=\"image-20220731175201409\"></p>\n<p>对于存储到磁盘中的快照，可以设置是否进行压缩存储。如果是的话，redis 会采用 <code>LZF算法</code> 进行压缩。</p>\n<p>如果你不想消耗 CPU 来进行压缩的话，可以设置为关闭此功能。推荐 yes.</p>\n<p><strong>12.2.8.8.\trdbchecksum 检查完整性</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731175342119.png\" alt=\"image-20220731175342119\"></p>\n<p>在存储快照后，还可以让 redis 使用 <code>CRC64算法</code> 来进行数据校验，</p>\n<p>但是这样做会增加大约 10% 的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能 。推荐 yes.</p>\n<p><strong>12.2.8.9.\trdb 的备份</strong></p>\n<p>先通过 config get dir  查询 rdb 文件的目录</p>\n<p>将 *.rdb 的文件拷贝到别的地方</p>\n<p>rdb 的恢复</p>\n<ul>\n<li>关闭 Redis</li>\n<li>先把备份的文件拷贝到工作目录下  <code>cp dump2.rdb dump.rdb</code></li>\n<li>启动 Redis, 备份数据会直接加载</li>\n</ul>\n<h3 id=\"1229优势\"><a class=\"markdownIt-Anchor\" href=\"#1229优势\">#</a> 12.2.9.\t优势</h3>\n<ul>\n<li>适合大规模的数据恢复</li>\n<li>对数据完整性和一致性要求不高更适合使用</li>\n<li>节省磁盘空间</li>\n<li>恢复速度快</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731175646400.png\" alt=\"image-20220731175646400\"></p>\n<h3 id=\"12210劣势\"><a class=\"markdownIt-Anchor\" href=\"#12210劣势\">#</a> 12.2.10.\t劣势</h3>\n<ul>\n<li>\n<p>Fork 的时候，内存中的数据被克隆了一份，大致 2 倍的膨胀性需要考虑</p>\n</li>\n<li>\n<p>虽然 Redis 在 fork 时使用了<strong>写时拷贝技术</strong>，但是如果数据庞大时还是比较消耗性能</p>\n</li>\n<li>\n<p><strong>在备份周期在一定间隔时间做一次备份，所以如果 Redis 意外 down 掉的话，就会丢失最后一次快照后的所有修改</strong>。</p>\n</li>\n</ul>\n<h3 id=\"12211如何停止\"><a class=\"markdownIt-Anchor\" href=\"#12211如何停止\">#</a> 12.2.11.\t如何停止</h3>\n<p>动态停止 RDB： <code>redis-cli config set save &quot;&quot; </code>  #save 后给空值，表示禁用保存策略</p>\n<h3 id=\"12212小总结\"><a class=\"markdownIt-Anchor\" href=\"#12212小总结\">#</a> 12.2.12.\t小总结</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731175756853.png\" alt=\"image-20220731175756853\"></p>\n<h1 id=\"十三-redis持久化之aof\"><a class=\"markdownIt-Anchor\" href=\"#十三-redis持久化之aof\">#</a> 十三、Redis 持久化之 AOF</h1>\n<h2 id=\"1-aofappend-only-file\"><a class=\"markdownIt-Anchor\" href=\"#1-aofappend-only-file\">#</a> 1 - AOF（Append Only File）</h2>\n<h3 id=\"1311是什么\"><a class=\"markdownIt-Anchor\" href=\"#1311是什么\">#</a> 13.1.1.\t是什么</h3>\n<p>以<strong>日志的形式来记录每个写操作（增量保存）</strong>，将 Redis 执行过的所有写指令记录下来 (<strong>读操作不记录</strong>)， <strong>只许追加文件但不可以改写文件</strong>，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将<strong>写指令</strong>从前到后执行一次以完成数据的恢复工作</p>\n<h3 id=\"1312aof持久化流程\"><a class=\"markdownIt-Anchor\" href=\"#1312aof持久化流程\">#</a> 13.1.2.\tAOF 持久化流程</h3>\n<p>（1）客户端的请求写命令会被 append 追加到 AOF 缓冲区内；</p>\n<p>（2）AOF 缓冲区根据 AOF 持久化策略 [always,everysec,no] 将操作 sync 同步到磁盘的 AOF 文件中；</p>\n<p>（3）AOF 文件大小超过重写策略或手动重写时，会对 AOF 文件 rewrite 重写，压缩 AOF 文件容量；</p>\n<p>（4）Redis 服务重启时，会重新 load 加载 AOF 文件中的写操作达到数据恢复的目的；</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731180326215.png\" alt=\"image-20220731180326215\"></p>\n<h3 id=\"1313aof默认不开启\"><a class=\"markdownIt-Anchor\" href=\"#1313aof默认不开启\">#</a> 13.1.3.\tAOF 默认不开启</h3>\n<p>可以在 redis.conf 中配置文件名称，默认为  <code>appendonly.aof</code></p>\n<p>AOF 文件的保存路径，同 RDB 的路径一致。</p>\n<h3 id=\"1314aof和rdb同时开启redis听谁的\"><a class=\"markdownIt-Anchor\" href=\"#1314aof和rdb同时开启redis听谁的\">#</a> 13.1.4.\tAOF 和 RDB 同时开启，redis 听谁的？</h3>\n<p>AOF 和 RDB 同时开启，系统默认取 AOF 的数据（数据不会存在丢失）</p>\n<h3 id=\"1315aof启动修复恢复\"><a class=\"markdownIt-Anchor\" href=\"#1315aof启动修复恢复\">#</a> 13.1.5.\tAOF 启动 / 修复 / 恢复</h3>\n<ul>\n<li>\n<p>AOF 的备份机制和性能虽然和 RDB 不同，但是备份和恢复的操作同 RDB 一样，都是拷贝备份文件，需要恢复时再拷贝到 Redis 工作目录下，启动系统即加载。</p>\n</li>\n<li>\n<p>正常恢复</p>\n<ul>\n<li>修改默认的 appendonly no，改为 yes</li>\n<li>将有数据的 aof 文件复制一份保存到对应目录 (查看目录：config get dir)</li>\n<li>恢复：重启 redis 然后重新加载</li>\n</ul>\n</li>\n<li>\n<p>异常恢复</p>\n<ul>\n<li>修改默认的 appendonly no，改为 yes</li>\n<li>如遇到<strong> AOF 文件损坏</strong>，通过 /<strong>usr/local/bin/redis-check-aof–fix appendonly.aof</strong> 进行恢复</li>\n<li>备份被写坏的 AOF 文件</li>\n<li>恢复：重启 redis，然后重新加载</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1316aof同步频率设置\"><a class=\"markdownIt-Anchor\" href=\"#1316aof同步频率设置\">#</a> 13.1.6.\tAOF 同步频率设置</h3>\n<p><code>appendfsync always</code> <br>\n 始终同步，每次 Redis 的写入都会立刻记入日志；性能较差但数据完整性比较好<br>\n <code>appendfsync everysec</code> <br>\n 每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。<br>\n <code>appendfsync no</code> <br>\nredis 不主动进行同步，把同步时机交给操作系统。</p>\n<h3 id=\"1317rewrite压缩\"><a class=\"markdownIt-Anchor\" href=\"#1317rewrite压缩\">#</a> 13.1.7.\tRewrite 压缩</h3>\n<ol>\n<li>\n<p>是什么：<br>\nAOF 采用<strong>文件追加</strong>方式，文件会越来越大为避免出现此种情况，新增了<strong>重写机制</strong>，当 AOF 文件的大小超过所设定的阈值时，Redis 就会启动 AOF 文件的<strong>内容压缩</strong>， 只保留可以恢复数据的<strong>最小指令集</strong>。可以使用命令 <code>bgrewriteaof</code></p>\n</li>\n<li>\n<p>重写原理，如何实现重写<br>\n AOF 文件持续增长而过大时，会 fork 出一条新进程来将文件重写 (也是先写临时文件最后再 rename)，<strong>redis4.0 版本后的重写，是指上就是把 rdb 的快照，以二级制的形式附在新的 aof 头部，作为已有的历史数据，替换掉原来的流水账操作</strong>。</p>\n<p><code>no-appendfsync-on-rewrite</code> ：<br>\n如果 no-appendfsync-on-rewrite=yes , 不写入 aof 文件只写入 <code>缓存</code> ，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（<strong>降低数据安全性，提高性能</strong>）</p>\n<p>​\t如果 no-appendfsync-on-rewrite=no,  还是会把数据往 <code>磁盘</code> 里刷，但是遇到重写操作，可能会发生阻塞。（<strong>数据安全，但是性能降低</strong>）</p>\n<p>触发机制，何时重写</p>\n<p>Redis 会记录上次重写时的 AOF 大小，默认配置是当 AOF 文件大小是上次 rewrite 后大小的一倍且文件大于 64M 时触发</p>\n<p>重写虽然可以节约大量磁盘空间，减少恢复时间。但是每次重写还是有一定的负担的，因此设定 Redis 要满足一定条件才会进行重写。</p>\n<p><code>auto-aof-rewrite-percentage</code> ：设置重写的基准值，文件达到 100% 时开始重写（文件是原来重写后文件的 2 倍时触发）</p>\n<p><code>auto-aof-rewrite-min-size</code> ：设置重写的基准值，最小文件 64MB。达到这个值开始重写。</p>\n<p>** 例如：** 文件达到 70MB 开始重写，降到 50MB，下次什么时候开始重写？100MB</p>\n<p>系统载入时或者上次重写完毕时，Redis 会记录此时 AOF 大小，设为 base_size,</p>\n<p>如果 Redis 的 AOF 当前大小 &gt;= base_size +base_size*100% (默认) 且当前大小 &gt;=64mb (默认) 的情况下，Redis 会对 AOF 进行重写。</p>\n</li>\n<li>\n<p>重写流程<br>\n（1）bgrewriteaof 触发重写，判断是否当前有 bgsave 或 bgrewriteaof 在运行，如果有，则等待该命令结束后再继续执行。</p>\n<p>（2）主进程 fork 出子进程执行重写操作，保证主进程不会阻塞。</p>\n<p>（3）子进程遍历 redis 内存中数据到临时文件，客户端的写请求同时写入 aof_buf 缓冲区和 aof_rewrite_buf 重写缓冲区保证原 AOF 文件完整以及新 AOF 文件生成期间的新的数据修改动作不会丢失。</p>\n<p>（4）1). 子进程写完新的 AOF 文件后，向主进程发信号，父进程更新统计信息。2). 主进程把 aof_rewrite_buf 中的数据写入到新的 AOF 文件。</p>\n<p>（5）使用新的 AOF 文件覆盖旧的 AOF 文件，完成 AOF 重写。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731213215703.png\" alt=\"image-20220731213215703\"></p>\n</li>\n</ol>\n<h3 id=\"1318优势\"><a class=\"markdownIt-Anchor\" href=\"#1318优势\">#</a> 13.1.8.\t优势</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731213229824.png\" alt=\"image-20220731213229824\"></p>\n<ul>\n<li>\n<p>备份机制更稳健，丢失数据概率更低。</p>\n</li>\n<li>\n<p>可读的日志文本，通过操作 AOF 稳健，可以处理误操作。</p>\n</li>\n</ul>\n<h3 id=\"1319劣势\"><a class=\"markdownIt-Anchor\" href=\"#1319劣势\">#</a> 13.1.9.\t劣势</h3>\n<ul>\n<li>比起 RDB 占用更多的磁盘空间。</li>\n<li>恢复备份速度要慢。</li>\n<li>每次读写都同步的话，有一定的性能压力。</li>\n<li>存在个别 Bug，造成恢复不能。</li>\n</ul>\n<h3 id=\"13110-小总结\"><a class=\"markdownIt-Anchor\" href=\"#13110-小总结\">#</a> 13.1.10.\t  小总结</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731213332159.png\" alt=\"image-20220731213332159\"></p>\n<h2 id=\"2-总结which-one\"><a class=\"markdownIt-Anchor\" href=\"#2-总结which-one\">#</a> 2 - 总结 (Which one)</h2>\n<h3 id=\"1321用哪个好\"><a class=\"markdownIt-Anchor\" href=\"#1321用哪个好\">#</a> 13.2.1.\t用哪个好</h3>\n<p>官方推荐两个都启用。</p>\n<p>如果对数据不敏感，可以选单独用 RDB。</p>\n<p>不建议单独用 AOF，因为可能会出现 Bug。</p>\n<p>如果只是做纯内存缓存，可以都不用。</p>\n<h3 id=\"1322官网建议\"><a class=\"markdownIt-Anchor\" href=\"#1322官网建议\">#</a> 13.2.2.\t官网建议</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731213526710.png\" alt=\"image-20220731213526710\"></p>\n<ul>\n<li>RDB 持久化方式能够在指定的时间间隔能对你的数据进行快照存储</li>\n<li>AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF 命令以 redis 协议追加保存每次写的操作到文件末尾.</li>\n<li>Redis 还能对 AOF 文件进行后台重写，使得 AOF 文件的体积不至于过大</li>\n<li>只做缓存：如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化方式.</li>\n<li>同时开启两种持久化方式</li>\n<li>在这种情况下，当 redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整.</li>\n<li>RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件。那要不要只使用 AOF 呢？</li>\n<li>建议不要，因为 RDB 更适合用于备份数据库 (AOF 在不断变化不好备份)， 快速重启，而且不会有 AOF 可能潜在的 bug，留着作为一个万一的手段。</li>\n<li>性能建议</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731213730871.png\" alt=\"image-20220731213730871\"></p>\n<h1 id=\"十四-redis_主从复制\"><a class=\"markdownIt-Anchor\" href=\"#十四-redis_主从复制\">#</a> 十四、Redis_主从复制</h1>\n<h2 id=\"1-是什么\"><a class=\"markdownIt-Anchor\" href=\"#1-是什么\">#</a> 1 - 是什么</h2>\n<p>主机数据更新后根据配置和策略， 自动同步到备机的<strong> master/slaver 机制，Master 以写为主，Slave 以读为主</strong></p>\n<h2 id=\"2-能干嘛\"><a class=\"markdownIt-Anchor\" href=\"#2-能干嘛\">#</a> 2 - 能干嘛</h2>\n<ul>\n<li>读写分离，性能扩展</li>\n<li>容灾快速恢复</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731213848099.png\" alt=\"image-20220731213848099\"></p>\n<h2 id=\"3-怎么玩主从复制\"><a class=\"markdownIt-Anchor\" href=\"#3-怎么玩主从复制\">#</a> 3 - 怎么玩：主从复制</h2>\n<ol>\n<li>\n<p>拷贝多个 redis.conf 文件 include (写绝对路径)</p>\n</li>\n<li>\n<p>开启 daemonize yes</p>\n</li>\n<li>\n<p>Pid 文件名字 pidfile</p>\n</li>\n<li>\n<p>指定端口 port</p>\n</li>\n<li>\n<p>Log 文件名字</p>\n</li>\n<li>\n<p>dump.rdb 名字 dbfilename</p>\n</li>\n<li>\n<p>Appendonly 关掉或者换名字</p>\n</li>\n</ol>\n<h3 id=\"1431新建redis6379conf填写以下内容\"><a class=\"markdownIt-Anchor\" href=\"#1431新建redis6379conf填写以下内容\">#</a> 14.3.1.\t新建 redis6379.conf，填写以下内容</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>include /myredis/redis.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pidfile /var/run/redis_6379.pid</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>port <span class=\"token number\">6379</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dbfilename dump6379.rdb</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731214026263.png\" alt=\"image-20220731214026263\"></p>\n<h3 id=\"1432新建redis6380conf填写以下内容\"><a class=\"markdownIt-Anchor\" href=\"#1432新建redis6380conf填写以下内容\">#</a> 14.3.2.\t新建 redis6380.conf，填写以下内容</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731214039132.png\" alt=\"image-20220731214039132\"></p>\n<h3 id=\"1433新建redis6381conf填写以下内容\"><a class=\"markdownIt-Anchor\" href=\"#1433新建redis6381conf填写以下内容\">#</a> 14.3.3.\t新建 redis6381.conf，填写以下内容</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731214050893.png\" alt=\"image-20220731214050893\"></p>\n<p><strong>slave-priority 10</strong></p>\n<p><strong>设置从机的优先级，值越小，优先级越高，用于选举主机时使用。默认 100</strong></p>\n<h3 id=\"1434启动三台redis服务器\"><a class=\"markdownIt-Anchor\" href=\"#1434启动三台redis服务器\">#</a> 14.3.4.\t启动三台 redis 服务器</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731233845060.png\" alt=\"image-20220731233845060\"></p>\n<h3 id=\"1435查看系统进程看看三台服务器是否启动\"><a class=\"markdownIt-Anchor\" href=\"#1435查看系统进程看看三台服务器是否启动\">#</a> 14.3.5.\t查看系统进程，看看三台服务器是否启动</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731233859352.png\" alt=\"image-20220731233859352\"></p>\n<h3 id=\"1436查看三台主机运行情况\"><a class=\"markdownIt-Anchor\" href=\"#1436查看三台主机运行情况\">#</a> 14.3.6.\t查看三台主机运行情况</h3>\n<p><code>info replication</code> <br>\n 打印主从复制的相关信息</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731233920372.png\" alt=\"image-20220731233920372\"></p>\n<h3 id=\"1437配从库不配主库\"><a class=\"markdownIt-Anchor\" href=\"#1437配从库不配主库\">#</a> 14.3.7.\t配从 (库) 不配主 (库)</h3>\n<p><code>slaveof  &lt;ip&gt;&lt;port&gt;</code></p>\n<p>成为某个实例的从服务器</p>\n<p>1、在 6380 和 6381 上执行 :  slaveof 127.0.0.1 6379</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731233955771.png\" alt=\"image-20220731233955771\"></p>\n<p>2、在主机上写，在从机上可以读取数据</p>\n<p>在从机上写数据报错</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731234014747.png\" alt=\"image-20220731234014747\"></p>\n<p>3、主机挂掉，重启就行，一切如初</p>\n<p>4、从机重启需重设：slaveof 127.0.0.1 6379</p>\n<p>可以将配置增加到文件中。永久生效。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220731234028351.png\" alt=\"image-20220731234028351\"></p>\n<h2 id=\"4-常用3招\"><a class=\"markdownIt-Anchor\" href=\"#4-常用3招\">#</a> 4 - 常用 3 招</h2>\n<h3 id=\"1441一主二仆\"><a class=\"markdownIt-Anchor\" href=\"#1441一主二仆\">#</a> 14.4.1.\t一主二仆</h3>\n<p>切入点问题？slave1、slave2 是从头开始复制还是从切入点开始复制？比如从 k4 进来，那之前的 k1,k2,k3 是否也可以复制？</p>\n<p>从机是否可以写？set 可否？</p>\n<p>主机 shutdown 后情况如何？从机是上位还是原地待命？</p>\n<p>主机又回来了后，主机新增记录，从机还能否顺利复制？</p>\n<p>其中一台从机 down 后情况如何？依照原有它能跟上大部队吗？</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801105448121.png\" alt=\"image-20220801105448121\"></p>\n<h3 id=\"1442薪火相传\"><a class=\"markdownIt-Anchor\" href=\"#1442薪火相传\">#</a> 14.4.2.\t薪火相传</h3>\n<p>上一个 Slave 可以是下一个 slave 的 Master，Slave 同样可以接收其他 slaves 的连接和同步请求，那么该 slave 作为了链条中下一个的 master, 可以有效减轻 master 的写压力，去中心化降低风险。</p>\n<p>用 <code> slaveof  &lt;ip&gt;&lt;port&gt;</code> <br>\n 中途变更转向：会清除之前的数据，重新建立拷贝最新的</p>\n<p>风险是一旦某个 slave 宕机，后面的 slave 都没法备份</p>\n<p>主机挂了，从机还是从机，无法写数据了</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801105607960.png\" alt=\"image-20220801105607960\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801105732231.png\" alt=\"image-20220801105732231\"></p>\n<h3 id=\"1443反客为主\"><a class=\"markdownIt-Anchor\" href=\"#1443反客为主\">#</a> 14.4.3.\t反客为主</h3>\n<p>当一个 master 宕机后，后面的 slave 可以立刻升为 master，其后面的 slave 不用做任何修改。(手动)</p>\n<p>用  <code>slaveof no one</code>   将从机变为主机。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801105740685.png\" alt=\"image-20220801105740685\"></p>\n<h2 id=\"5-复制原理\"><a class=\"markdownIt-Anchor\" href=\"#5-复制原理\">#</a> 5 - 复制原理</h2>\n<ul>\n<li>Slave 启动成功连接到 master 后会发送一个 sync 命令</li>\n<li>Master 接到命令启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令， 在后台进程执行完毕之后，master 将传送整个数据文件到 slave, 以完成一次完全同步</li>\n<li>全量复制：而 slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。</li>\n<li>增量复制：Master 继续将新的所有收集到的修改命令依次传给 slave, 完成同步</li>\n<li>但是只要是重新连接 master, 一次完全同步（全量复制) 将被自动执行</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801105844173.png\" alt=\"image-20220801105844173\"></p>\n<h2 id=\"6-哨兵模式sentinel\"><a class=\"markdownIt-Anchor\" href=\"#6-哨兵模式sentinel\">#</a> 6 - 哨兵模式 (sentinel)</h2>\n<h3 id=\"1461是什么\"><a class=\"markdownIt-Anchor\" href=\"#1461是什么\">#</a> 14.6.1.\t是什么</h3>\n<p><strong>反客为主的自动版</strong>，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801110018170.png\" alt=\"image-20220801110018170\"></p>\n<h3 id=\"1462怎么玩使用步骤\"><a class=\"markdownIt-Anchor\" href=\"#1462怎么玩使用步骤\">#</a> 14.6.2.\t怎么玩 (使用步骤)</h3>\n<p><strong>14.6.2.1.\t调整为一主二仆模式，6379 带着 6380、6381</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801110034320.png\" alt=\"image-20220801110034320\"></p>\n<p><strong>14.6.2.2.\t自定义的 /myredis 目录下新建 sentinel.conf 文件，名字绝不能错</strong></p>\n<p><strong>14.6.2.3.\t配置哨兵，填写内容</strong></p>\n<p>sentinel monitor mymaster 127.0.0.1 6379 1</p>\n<p>其中 mymaster 为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。</p>\n<p><strong>14.6.2.4.\t启动哨兵</strong></p>\n<p>/usr/local/bin</p>\n<p>redis 做压测可以用自带的<strong> redis-benchmark</strong> 工具</p>\n<p>执行<strong> redis-sentinel  /myredis/sentinel.conf</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801110305367.png\" alt=\"image-20220801110305367\"></p>\n<p><strong>14.6.2.5.\t当主机挂掉，从机选举中产生新的主机</strong></p>\n<p>(大概 10 秒左右可以看到哨兵窗口日志，切换了新的主机)</p>\n<p>哪个从机会被选举为主机呢？根据优先级别： <code>replica-priority </code></p>\n<p><strong>原主机重启后会变为从机。</strong></p>\n<p><strong>14.6.2.6.\t复制延时</strong></p>\n<p>由于所有的<strong>写操作</strong>都是先在 Master 上操作，然后同步更新到 Slave 上，所以从 Master 同步到 Slave 机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave 机器数量的增加也会使这个问题更加严重。</p>\n<h3 id=\"1463故障恢复\"><a class=\"markdownIt-Anchor\" href=\"#1463故障恢复\">#</a> 14.6.3.\t故障恢复</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801110846257.png\" alt=\"image-20220801110846257\"></p>\n<p><code>优先级</code> 在 redis.conf 中默认：replica-priority 100，值越小优先级越高</p>\n<p><code>偏移量</code> 是指获得原主机数据最全的</p>\n<p>每个 redis 实例启动后都会随机生成一个 40 位的 <code>runid</code></p>\n<h3 id=\"1464主从复制\"><a class=\"markdownIt-Anchor\" href=\"#1464主从复制\">#</a> 14.6.4.\t主从复制</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">JedisSentinelPool</span> jedisSentinelPool<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span>  <span class=\"token class-name\">Jedis</span> <span class=\"token function\">getJedisFromSentinel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>jedisSentinelPool<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sentinelSet<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        sentinelSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.11.103:26379\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">JedisPoolConfig</span> jedisPoolConfig <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        jedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大可用连接数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> \t\tjedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大闲置连接数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tjedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMinIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最小闲置连接数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tjedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setBlockWhenExhausted</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 连接耗尽是否等待</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tjedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxWaitMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等待时间</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tjedisPoolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setTestOnBorrow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 取连接的时候进行一下测试 ping pong</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tjedisSentinelPool<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisSentinelPool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mymaster\"</span><span class=\"token punctuation\">,</span>sentinelSet<span class=\"token punctuation\">,</span>jedisPoolConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> jedisSentinelPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> jedisSentinelPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"十五-redis集群\"><a class=\"markdownIt-Anchor\" href=\"#十五-redis集群\">#</a> 十五、Redis 集群</h1>\n<h2 id=\"1-问题\"><a class=\"markdownIt-Anchor\" href=\"#1-问题\">#</a> 1 - 问题</h2>\n<p>容量不够，redis 如何进行扩容？</p>\n<p>并发写操作， redis 如何分摊？</p>\n<p><strong>另外，主从模式，薪火相传模式，主机宕机，导致 ip 地址发生变化，应用程序中配置需要修改对应的主机地址、端口等信息。</strong></p>\n<p>之前通过代理主机来解决，但是 redis3.0 中提供了解决方案。就是无中心化集群配置。</p>\n<h2 id=\"2-什么是集群\"><a class=\"markdownIt-Anchor\" href=\"#2-什么是集群\">#</a> 2 - 什么是集群</h2>\n<p>Redis 集群实现了对 Redis 的水平扩容，即启动 N 个 redis 节点，将整个数据库分布存储在这 N 个节点中，每个节点存储总数据的 1/N。</p>\n<p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p>\n<h2 id=\"3-删除持久化数据\"><a class=\"markdownIt-Anchor\" href=\"#3-删除持久化数据\">#</a> 3 - 删除持久化数据</h2>\n<p>将 rdb,aof 文件都删除掉。</p>\n<h2 id=\"4-制作6个实例637963806381638963906391\"><a class=\"markdownIt-Anchor\" href=\"#4-制作6个实例637963806381638963906391\">#</a> 4 - 制作 6 个实例，6379,6380,6381,6389,6390,6391</h2>\n<h3 id=\"1541配置基本信息\"><a class=\"markdownIt-Anchor\" href=\"#1541配置基本信息\">#</a> 15.4.1.\t配置基本信息</h3>\n<blockquote>\n<ol>\n<li>开启 daemonize yes</li>\n<li>Pid 文件名字</li>\n<li>指定端口</li>\n<li>Log 文件名字</li>\n<li>Dump.rdb 名字</li>\n<li>Appendonly 关掉或者换名字</li>\n</ol>\n</blockquote>\n<h3 id=\"1542redis-cluster配置修改\"><a class=\"markdownIt-Anchor\" href=\"#1542redis-cluster配置修改\">#</a> 15.4.2.\tredis cluster 配置修改</h3>\n<blockquote>\n<ol>\n<li>cluster-enabled yes    打开集群模式</li>\n<li>cluster-config-file nodes-6379.conf  设定节点配置文件名</li>\n<li>cluster-node-timeout 15000   设定节点失联时间，超过该时间（毫秒），集群自动进行主从切换。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>include /home/bigdata/redis.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>port <span class=\"token number\">6379</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pidfile <span class=\"token string\">\"/var/run/redis_6379.pid\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dbfilename <span class=\"token string\">\"dump6379.rdb\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">dir</span> <span class=\"token string\">\"/home/bigdata/redis_cluster\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>logfile <span class=\"token string\">\"/home/bigdata/redis_cluster/redis_err_6379.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>clu - ster-enabled <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cluster-config-file nodes-6379.conf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cluster-node-timeout <span class=\"token number\">15000</span></pre></td></tr></table></figure><h3 id=\"1543修改好redis6379conf文件拷贝多个redisconf文件\"><a class=\"markdownIt-Anchor\" href=\"#1543修改好redis6379conf文件拷贝多个redisconf文件\">#</a> 15.4.3.\t修改好 redis6379.conf 文件，拷贝多个 redis.conf 文件</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801113056666.png\" alt=\"image-20220801113056666\"></p>\n<h3 id=\"1544使用查找替换修改另外5个文件\"><a class=\"markdownIt-Anchor\" href=\"#1544使用查找替换修改另外5个文件\">#</a> 15.4.4.\t使用查找替换修改另外 5 个文件</h3>\n<p>例如：:% s/6379/6380</p>\n<h3 id=\"1545启动6个redis服务\"><a class=\"markdownIt-Anchor\" href=\"#1545启动6个redis服务\">#</a> 15.4.5.\t启动 6 个 redis 服务</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801113121076.png\" alt=\"image-20220801113121076\"></p>\n<h2 id=\"5-将六个节点合成一个集群\"><a class=\"markdownIt-Anchor\" href=\"#5-将六个节点合成一个集群\">#</a> 5 - 将六个节点合成一个集群</h2>\n<p>组合之前，请确保所有 redis 实例启动后，nodes-xxxx.conf 文件都生成正常。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801113311052.png\" alt=\"image-20220801113311052\"></p>\n<ul>\n<li>合体：</li>\n</ul>\n<p>cd  /opt/redis-6.2.1/src</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>redis-cli <span class=\"token parameter variable\">--cluster</span> create --cluster-replicas <span class=\"token number\">1</span> <span class=\"token number\">192.168</span>.11.101:6379 <span class=\"token number\">192.168</span>.11.101:6380 <span class=\"token number\">192.168</span>.11.101:6381 <span class=\"token number\">192.168</span>.11.101:6389 <span class=\"token number\">192.168</span>.11.101:6390 <span class=\"token number\">192.168</span>.11.101:6391</pre></td></tr></table></figure><p>此处不要用 127.0.0.1， 请用真实 IP 地址<br>\n–replicas 1 采用最简单的方式配置集群，一台主机，一台从机，正好三组。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801113349156.png\" alt=\"image-20220801113349156\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801113414617.png\" alt=\"image-20220801113414617\"></p>\n<ul>\n<li>普通方式登录<br>\n可能直接进入读主机，存储数据时，会出现 MOVED 重定向操作。所以，应该以集群方式登录。</li>\n</ul>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801113425849.png\" alt=\"image-20220801113425849\"></p>\n<h2 id=\"6-c-采用集群策略连接设置数据会自动切换到相应的写主机\"><a class=\"markdownIt-Anchor\" href=\"#6-c-采用集群策略连接设置数据会自动切换到相应的写主机\">#</a> 6 - -c 采用集群策略连接，设置数据会自动切换到相应的写主机</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801113550736.png\" alt=\"image-20220801113550736\"></p>\n<h2 id=\"7-通过-cluster-nodes-命令查看集群信息\"><a class=\"markdownIt-Anchor\" href=\"#7-通过-cluster-nodes-命令查看集群信息\">#</a> 7-  通过 cluster nodes 命令查看集群信息</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801123052282.png\" alt=\"image-20220801123052282\"></p>\n<h2 id=\"8-redis-cluster-如何分配这六个节点\"><a class=\"markdownIt-Anchor\" href=\"#8-redis-cluster-如何分配这六个节点\">#</a> 8 - redis cluster 如何分配这六个节点？</h2>\n<p>一个集群至少要有<strong>三个主节点</strong>。</p>\n<p>选项 --cluster-replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。</p>\n<p>分配原则尽量保证每个主数据库运行在不同的 IP 地址，每个从库和主库不在一个 IP 地址上。</p>\n<h2 id=\"9-什么是slots\"><a class=\"markdownIt-Anchor\" href=\"#9-什么是slots\">#</a> 9 - 什么是 slots</h2>\n<p><strong>[OK] All nodes agree about slots configuration.</strong></p>\n<p><strong>&gt;&gt;&gt; Check for open slots…</strong></p>\n<p><strong>&gt;&gt;&gt; Check slots coverage…</strong></p>\n<p><strong>[OK] All 16384 slots covered.</strong></p>\n<p>一个 Redis 集群包含 <code>16384</code>  个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个， 集群使用公式  <code>CRC16(key) % 16384</code>  来计算键 key 属于哪个槽， 其中 CRC16 (key) 语句用于计算键 key 的 CRC16 校验和 。</p>\n<p>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点， 其中：</p>\n<blockquote>\n<p>节点 A 负责处理 0 号至 5460 号插槽。<br>\n节点 B 负责处理 5461 号至 10922 号插槽。<br>\n节点 C 负责处理 10923 号至 16383 号插槽。</p>\n</blockquote>\n<h2 id=\"10-在集群中录入值\"><a class=\"markdownIt-Anchor\" href=\"#10-在集群中录入值\">#</a> 10 - 在集群中录入值</h2>\n<p>在 redis-cli 每次录入、查询键值，redis 都会计算出该 key 应该送往的插槽，如果不是该客户端对应服务器的插槽，redis 会报错，并告知应前往的 redis 实例地址和端口。</p>\n<p>redis-cli 客户端提供了  <code>–c</code>  参数实现自动重定向。</p>\n<p>如  <code>redis-cli  -c –p 6379</code>  登入后，再录入、查询键值对可以自动重定向。</p>\n<p>不在一个 slot 下的键值，是不能使用 mget,mset 等多键操作。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801123630199.png\" alt=\"image-20220801123630199\"></p>\n<p>可以通过 {} 来定义组的概念，从而使 key 中 {} 内相同内容的键值对放到一个 slot 中去。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801123644949.png\" alt=\"image-20220801123644949\"></p>\n<h2 id=\"11-查询集群中的值\"><a class=\"markdownIt-Anchor\" href=\"#11-查询集群中的值\">#</a> 11 - 查询集群中的值</h2>\n<p><strong>CLUSTER GETKEYSINSLOT <slot><count></strong>  返回 count 个 slot 槽中的键。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801123657501.png\" alt=\"image-20220801123657501\"></p>\n<h2 id=\"12-故障恢复\"><a class=\"markdownIt-Anchor\" href=\"#12-故障恢复\">#</a> 12 -  故障恢复</h2>\n<p>如果主节点下线？从节点能否自动升为主节点？注意：<strong>15 秒超时</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801123757512.png\" alt=\"image-20220801123757512\"></p>\n<p>主节点恢复后，主从关系会如何？<strong>主节点回来变成从机</strong>。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801123820814.png\" alt=\"image-20220801123820814\"></p>\n<p>如果所有某一段插槽的主从节点都宕掉，redis 服务是否还能继续？</p>\n<p>如果某一段插槽的主从都挂掉，而 cluster-require-full-coverage 为 yes ，那么 ，整个集群都挂掉</p>\n<p>如果某一段插槽的主从都挂掉，而 cluster-require-full-coverage 为 no ，那么，该插槽数据全都不能使用，也无法存储。</p>\n<p>redis.conf 中的参数  cluster-require-full-coverage</p>\n<h2 id=\"13-集群的jedis开发\"><a class=\"markdownIt-Anchor\" href=\"#13-集群的jedis开发\">#</a> 13 - 集群的 Jedis 开发</h2>\n<p>即使连接的不是主机，集群会自动切换主机存储。主机写，从机读。</p>\n<p>无中心化主从集群。无论从哪台主机写的数据，其他主机上都能读到数据。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JedisClusterTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HostAndPort</span><span class=\"token punctuation\">></span></span>set <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HostAndPort</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HostAndPort</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.31.211\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token class-name\">JedisCluster</span> jedisCluster<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisCluster</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     jedisCluster<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedisCluster<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"14-redis-集群提供了以下好处\"><a class=\"markdownIt-Anchor\" href=\"#14-redis-集群提供了以下好处\">#</a> 14 - Redis 集群提供了以下好处</h2>\n<ol>\n<li>实现扩容</li>\n<li>分摊压力</li>\n<li>无中心配置相对简单</li>\n</ol>\n<h2 id=\"15-redis-集群的不足\"><a class=\"markdownIt-Anchor\" href=\"#15-redis-集群的不足\">#</a> 15 - Redis 集群的不足</h2>\n<ol>\n<li>\n<p>多键操作是不被支持的</p>\n</li>\n<li>\n<p>多键的 Redis 事务是不被支持的。lua 脚本不被支持</p>\n</li>\n<li>\n<p>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至 redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</p>\n</li>\n</ol>\n<h1 id=\"十六-redis应用问题解决\"><a class=\"markdownIt-Anchor\" href=\"#十六-redis应用问题解决\">#</a> 十六、Redis 应用问题解决</h1>\n<h2 id=\"1-缓存穿透\"><a class=\"markdownIt-Anchor\" href=\"#1-缓存穿透\">#</a> 1- 缓存穿透</h2>\n<h3 id=\"1611问题描述\"><a class=\"markdownIt-Anchor\" href=\"#1611问题描述\">#</a> 16.1.1.\t问题描述</h3>\n<p>key 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801124314744.png\" alt=\"image-20220801124314744\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220808134718629.png\" alt=\"image-20220808134718629\"></p>\n<h3 id=\"1612解决方案\"><a class=\"markdownIt-Anchor\" href=\"#1612解决方案\">#</a> 16.1.2.\t解决方案</h3>\n<p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p>\n<p><strong>解决方案：</strong><br>\n（1）\t** 对空值缓存：** 如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟</p>\n<p>（2）\t<strong>设置可访问的名单（白名单）</strong>：<br>\n使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmap 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问。</p>\n<p>（3）\t<strong>采用布隆过滤器：</strong>(布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的 <code>二进制向量</code>  (位图) 和一系列随机 <code>映射函数</code> （哈希函数）。</p>\n<p>布隆过滤器可以用于<strong>检索一个元素是否在一个集合中</strong>。它的<strong>优点</strong>是空间效率和查询时间都远远超过一般的算法，<strong>缺点</strong>是有一定的误识别率和删除困难。)</p>\n<p>将所有可能存在的数据哈希到一个足够大的 bitmaps 中，一个一定不存在的数据会被 这个 bitmaps 拦截掉，从而避免了对底层存储系统的查询压力。</p>\n<p>（4）\t<strong>进行实时监控</strong>：当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p>\n<h2 id=\"2-缓存击穿\"><a class=\"markdownIt-Anchor\" href=\"#2-缓存击穿\">#</a> 2 - 缓存击穿</h2>\n<h3 id=\"1621问题描述\"><a class=\"markdownIt-Anchor\" href=\"#1621问题描述\">#</a> 16.2.1.\t问题描述</h3>\n<p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 DB 压垮。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801124751949.png\" alt=\"image-20220801124751949\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220808135145459.png\" alt=\"image-20220808135145459\"></p>\n<h3 id=\"1622解决方案\"><a class=\"markdownIt-Anchor\" href=\"#1622解决方案\">#</a> 16.2.2.\t解决方案</h3>\n<p>key 可能会在某些时间点被超高并发地访问，是一种非常 “热点” 的数据。这个时候，需要考虑一个问题：缓存被 “击穿” 的问题。</p>\n<p><strong>解决问题：</strong></p>\n<p>（1）<strong>预先设置热门数据</strong>：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长</p>\n<p>（2）<strong>实时调整</strong>：现场监控哪些数据热门，实时调整 key 的过期时长</p>\n<p>（3）<strong>使用锁</strong>：</p>\n<ol>\n<li>就是在缓存失效的时候（判断拿出来的值为空），不是立即去 load db。</li>\n<li>先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key</li>\n<li>当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key；</li>\n<li>当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试整个 get 缓存的方法。</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801125032132.png\" alt=\"image-20220801125032132\"></p>\n<h2 id=\"3-缓存雪崩\"><a class=\"markdownIt-Anchor\" href=\"#3-缓存雪崩\">#</a> 3 - 缓存雪崩</h2>\n<h3 id=\"1631问题描述\"><a class=\"markdownIt-Anchor\" href=\"#1631问题描述\">#</a> 16.3.1.\t问题描述</h3>\n<p>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端 DB 加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端 DB 压垮。</p>\n<p>缓存雪崩与缓存击穿的区别在于<strong>这里针对很多 key 缓存，前者则是某一个 key</strong></p>\n<p>正常访问⬇</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801125120331.png\" alt=\"image-20220801125120331\"></p>\n<p>缓存失效瞬间⬇</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801125130104.png\" alt=\"image-20220801125130104\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220808140122025.png\" alt=\"image-20220808140122025\"></p>\n<h3 id=\"1632解决方案\"><a class=\"markdownIt-Anchor\" href=\"#1632解决方案\">#</a> 16.3.2.\t解决方案</h3>\n<p>缓存失效时的雪崩效应对底层系统的冲击非常可怕！</p>\n<p><strong>解决方案：</strong><br>\n（1）\t** 构建多级缓存架构：**nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）</p>\n<p>（2）\t<strong>使用锁或队列：</strong><br>\n用 <code>加锁</code> 或者 <code>队列</code> 的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况</p>\n<p>（3）\t<strong>设置过期标志更新缓存</strong>：<br>\n记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存。</p>\n<p>（4）\t<strong>将缓存失效时间分散开</strong>：<br>\n比如我们可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>\n<h2 id=\"4-分布式锁\"><a class=\"markdownIt-Anchor\" href=\"#4-分布式锁\">#</a> 4 - 分布式锁</h2>\n<h3 id=\"1641问题描述\"><a class=\"markdownIt-Anchor\" href=\"#1641问题描述\">#</a> 16.4.1.\t问题描述</h3>\n<p>随着业务发展的需要，<strong>原单体单机部署</strong>的系统被演化成<strong>分布式集群系统</strong>后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就<strong>需要一种跨 JVM 的互斥机制来控制共享资源的访问</strong>，这就是分布式锁要解决的问题！</p>\n<p><strong>分布式锁主流的实现方案</strong>：</p>\n<ol>\n<li>基于数据库实现分布式锁</li>\n<li>基于缓存（Redis 等）</li>\n<li>基于 Zookeeper<br>\n 每一种分布式锁解决方案都有各自的优缺点：</li>\n<li>性能：redis 最高</li>\n<li>可靠性：zookeeper 最高<br>\n这里，我们就基于 redis 实现分布式锁。</li>\n</ol>\n<h3 id=\"1642解决方案使用redis实现分布式锁\"><a class=\"markdownIt-Anchor\" href=\"#1642解决方案使用redis实现分布式锁\">#</a> 16.4.2.\t解决方案：使用 redis 实现分布式锁</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>redis命令 ： </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">set</span> sku:1:info “OK” NX PX <span class=\"token number\">10000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>EX second：设置键的过期时间为 second 秒。 SET key value EX second 效果等同于 SETEX key second value</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>PX millisecond：设置键的过期时间为 millisecond 毫秒。 SET key value PX millisecond 效果等同于 PSETEX key millisecond value </pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>NX ：只在键不存在时，才对键进行设置操作。 SET key value NX 效果等同于 SETNX key value </pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>XX ：只在键已经存在时，才对键进行设置操作。</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801152803095.png\" alt=\"image-20220801152803095\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220808141133285.png\" alt=\"image-20220808141133285\"></p>\n<ol>\n<li>多个客户端同时获取锁（setnx）</li>\n<li>获取成功，执行业务逻辑 {从 db 获取数据，放入缓存}，执行完成释放锁（del）</li>\n<li>其他客户端等待重试</li>\n</ol>\n<h3 id=\"1643编写代码\"><a class=\"markdownIt-Anchor\" href=\"#1643编写代码\">#</a> 16.4.3.\t编写代码</h3>\n<p>Redis: set num 0</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testLock\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//1 获取锁，setne</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Boolean</span> lock <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//2 获取锁成功、查询 num 的值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//2.1 判断 num 为空 return</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//2.2 有值就转成成 int</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//2.3 把 redis 的 num 加 1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//2.4 释放锁，del</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//3 获取锁失败、每隔 0.1 秒再获取</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">testLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>重启，服务集群，通过网关压力测试：<br>\nab -n 1000 -c 100 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMTQwLjE6ODA4MC90ZXN0L3Rlc3RMb2Nr\">http://192.168.140.1:8080/test/testLock</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801153313835.png\" alt=\"image-20220801153313835\"></p>\n<p>查看 redis 中 num 的值 ：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801153341490.png\" alt=\"image-20220801153341490\"></p>\n<p>但是还会有一些问题，见下，问题及相关解决方案。</p>\n<h3 id=\"1644优化之设置锁的过期时间\"><a class=\"markdownIt-Anchor\" href=\"#1644优化之设置锁的过期时间\">#</a> 16.4.4.\t优化之设置锁的过期时间</h3>\n<p>** 问题：**setnx 刚好获取到锁，业务逻辑出现异常，导致锁无法释放</p>\n<p>** 解决：** 设置过期时间，自动释放锁。</p>\n<p>设置过期时间有<strong>两种方式：</strong></p>\n<ol>\n<li>首先想到通过 <code>expire</code>  设置过期时间（缺乏原子性：如果在 setnx 和 expire 之间出现异常，锁也无法释放）</li>\n<li>在 set 时指定过期时间（推荐）</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801153615051.png\" alt=\"image-20220801153615051\"></p>\n<p>设置过期时间：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220801153652058.png\" alt=\"image-20220801153652058\"></p>\n<p>压力测试肯定也没有问题。自行测试</p>\n<h3 id=\"1645优化之uuid防误删\"><a class=\"markdownIt-Anchor\" href=\"#1645优化之uuid防误删\">#</a> 16.4.5.\t优化之 UUID 防误删</h3>\n<p>** 问题：** 可能会释放其他服务器的锁。</p>\n<p>** 场景：** 如果业务逻辑的执行时间是 7s。执行流程如下</p>\n<ol>\n<li>index1 业务逻辑没执行完，3 秒后锁被自动释放。</li>\n<li>index2 获取到锁，执行业务逻辑，3 秒后锁被自动释放。</li>\n<li>index3 获取到锁，执行业务逻辑</li>\n<li>index1 业务逻辑执行完成，开始调用 del 释放锁，这时释放的是 index3 的锁，导致 index3 的业务只执行 1s 就被别人释放。<br>\n最终等于没锁的情况。</li>\n</ol>\n<p>** 解决：**setnx 获取锁时，设置一个指定的唯一值（例如：uuid）；释放前获取这个值，判断是否自己的锁</p>\n<p><strong>图片分析：</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220808142646549.png\" alt=\"image-20220808142646549\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802091705477.png\" alt=\"image-20220802091705477\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802091817746.png\" alt=\"image-20220802091817746\"></p>\n<h3 id=\"1646优化之lua脚本保证删除的原子性\"><a class=\"markdownIt-Anchor\" href=\"#1646优化之lua脚本保证删除的原子性\">#</a> 16.4.6.\t优化之 LUA 脚本保证删除的原子性</h3>\n<p>** 问题：** 删除操作缺乏原子性。</p>\n<p><strong>图片分析：</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220808143635697.png\" alt=\"image-20220808143635697\"></p>\n<p><strong>场景：</strong></p>\n<ol>\n<li>index1 执行删除时，查询到的 lock 值确实和 uuid 相等</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>uuid<span class=\"token operator\">=</span>v1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">,</span>uuid<span class=\"token punctuation\">)</span>；</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802091921511.png\" alt=\"image-20220802091921511\"></p>\n<ol start=\"2\">\n<li>index1 执行删除前，lock 刚好过期时间已到，被 redis 自动释放<br>\n在 redis 中没有了 lock，没有了锁。</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802091953632.png\" alt=\"image-20220802091953632\"></p>\n<ol start=\"3\">\n<li>index2 获取了 lock<br>\nindex2 线程获取到了 cpu 的资源，开始执行方法</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>uuid<span class=\"token operator\">=</span>v2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">,</span>uuid<span class=\"token punctuation\">)</span>；</pre></td></tr></table></figure><ol start=\"4\">\n<li>index1 执行删除，此时会把 index2 的 lock 删除<br>\n index1 因为已经在方法中了，所以不需要重新上锁。index1 有执行的权限。index1 已经比较完成了，这个时候，开始执行</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802092126594.png\" alt=\"image-20220802092126594\"></p>\n<p>删除的 index2 的锁！</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testLockLua\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLockLua</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//1 声明一个 uuid , 将做为一个 value 放入我们的 key 所对应的值中</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> uuid <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//2 定义一个锁：lua 脚本可以使用同一把锁，来实现删除！</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">String</span> skuId <span class=\"token operator\">=</span> <span class=\"token string\">\"25\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问 skuId 为 25 号的商品 100008348542</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">String</span> locKey <span class=\"token operator\">=</span> <span class=\"token string\">\"lock:\"</span> <span class=\"token operator\">+</span> skuId<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 锁住的是每个商品的数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 3 获取锁</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">Boolean</span> lock <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span>locKey<span class=\"token punctuation\">,</span> uuid<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 第一种： lock 与过期时间中间不写任何的代码。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">//redisTemplate.expire (\"lock\",10, TimeUnit.SECONDS);// 设置过期时间</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 如果 true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 执行的业务逻辑开始</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 获取缓存中的 num 数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Object</span> value <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 如果是空直接返回</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 不是空 如果说在这出现了异常！ 那么 delete 就删除失败！ 也就是说锁永远存在！</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 使 num 每次 + 1 放入缓存</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/* 使用 lua 脚本来锁 */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 定义 lua 脚本</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">String</span> script <span class=\"token operator\">=</span> <span class=\"token string\">\"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 使用 redis 执行 lua 执行</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> redisScript <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        redisScript<span class=\"token punctuation\">.</span><span class=\"token function\">setScriptText</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 设置一下返回值类型 为 Long</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 因为删除判断的时候，返回的 0, 给其封装为数据类型。如果不封装那么默认返回 String 类型，</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 那么返回字符串与 0 会有发生错误。</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        redisScript<span class=\"token punctuation\">.</span><span class=\"token function\">setResultType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 第一个要是 script 脚本 ，第二个需要判断的 key，第三个就是 key 所对应的值。</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>redisScript<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>locKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> uuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 其他线程等待</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 睡眠</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">// 睡醒了之后，调用方法。</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token function\">testLockLua</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Lua 脚本详解：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802092521165.png\" alt=\"image-20220802092521165\"></p>\n<p>项目中正确使用：</p>\n<p>定义 key，key 应该是为每个 sku 定义的，也就是每个 sku 有一把锁。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> locKey <span class=\"token operator\">=</span><span class=\"token string\">\"lock:\"</span><span class=\"token operator\">+</span>skuId<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 锁住的是每个商品的数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Boolean</span> lock <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span>locKey<span class=\"token punctuation\">,</span> uuid<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802092834206.png\" alt=\"image-20220802092834206\"></p>\n<h3 id=\"1647总结\"><a class=\"markdownIt-Anchor\" href=\"#1647总结\">#</a> 16.4.7.\t总结</h3>\n<p>1、加锁</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 从 redis 中获取锁，set k1 v1 px 20000 nx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> uuid <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Boolean</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock\"</span><span class=\"token punctuation\">,</span> uuid<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>2、使用 lua 释放锁</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 2. 释放锁 del</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> script <span class=\"token operator\">=</span> <span class=\"token string\">\"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 设置 lua 脚本返回的数据类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> redisScript <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 设置 lua 脚本返回类型为 Long</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>redisScript<span class=\"token punctuation\">.</span><span class=\"token function\">setResultType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>redisScript<span class=\"token punctuation\">.</span><span class=\"token function\">setScriptText</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>redisScript<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>uuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>3、重试</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">testLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>为了确保分布式锁可用，我们至少要确保锁的实现同时<strong>满足以下四个条件</strong>：</p>\n<ul>\n<li>互斥性。在任意时刻，只有一个客户端能持有锁。</li>\n<li>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</li>\n<li>解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</li>\n<li>加锁和解锁必须具有原子性。</li>\n</ul>\n<h1 id=\"十七-redis60新功能\"><a class=\"markdownIt-Anchor\" href=\"#十七-redis60新功能\">#</a> 十七、Redis6.0 新功能</h1>\n<h2 id=\"1-acl\"><a class=\"markdownIt-Anchor\" href=\"#1-acl\">#</a> 1 - ACL</h2>\n<h3 id=\"1711简介\"><a class=\"markdownIt-Anchor\" href=\"#1711简介\">#</a> 17.1.1.\t简介</h3>\n<p>Redis  <code>ACL</code>  是 <code>Access Control List</code> （访问控制列表）的缩写，该功能允许根据<strong>可以执行的命令</strong>和<strong>可以访问的键</strong>来限制某些连接。</p>\n<p>在 Redis 5 版本之前，Redis 安全规则只有密码控制 还有通过 rename 来调整高危命令比如 flushdb ， KEYS* ， shutdown 等。Redis 6 则提供 ACL 的功能对用户进行更细粒度的权限控制 ：</p>\n<p>（1）接入权限：用户名和密码<br>\n（2）可以执行的命令<br>\n（3）可以操作的 KEY</p>\n<p>参考官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWRpcy5pby90b3BpY3MvYWNs\">https://redis.io/topics/acl</span></p>\n<h3 id=\"1712命令\"><a class=\"markdownIt-Anchor\" href=\"#1712命令\">#</a> 17.1.2.\t命令</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t（1）查看权限列表：acl list</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t（2）查看权限类别：acl <span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t（3）查看当前用户：acl <span class=\"token function\">whoami</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t（4）创建和编辑用户：acl setuser</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>具体使用见下：</pre></td></tr></table></figure><p>1、使用 acl list 命令展现用户权限列表<br>\n（1）数据说明</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802093424775.png\" alt=\"image-20220802093424775\"></p>\n<p>2、使用 acl cat 命令<br>\n（1）查看添加权限指令类别</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802093544283.png\" alt=\"image-20220802093544283\"></p>\n<p>（2）加参数类型名可以查看类型下具体命令</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802093606610.png\" alt=\"image-20220802093606610\"></p>\n<p>3、使用 acl whoami 命令查看当前用户</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802093652694.png\" alt=\"image-20220802093652694\"></p>\n<p>4、使用 aclsetuser 命令创建和编辑用户 ACL</p>\n<p>（1）ACL 规则<br>\n下面是有效 ACL 规则的列表。某些规则只是用于激活或删除标志，或对用户 ACL 执行给定更改的单个单词。其他规则是字符前缀，它们与命令或类别名称、键模式等连接在一起。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802094003527.png\" alt=\"image-20220802094003527\"></p>\n<p>（2）通过命令创建新用户默认权限<br>\n <code>acl setuser user1</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802094158447.png\" alt=\"image-20220802094158447\"></p>\n<p>在上面的示例中，我根本没有指定任何规则。如果用户不存在，这将使用 just created 的默认属性来创建用户。如果用户已经存在，则上面的命令将不执行任何操作。</p>\n<p>（3）设置有用户名、密码、ACL 权限、并启用的用户<br>\n <code>acl setuser user2 on &gt;password ~cached:* +get</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802094428400.png\" alt=\"image-20220802094428400\"></p>\n<p>(4) 切换用户，验证权限</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802094549151.png\" alt=\"image-20220802094549151\"></p>\n<h2 id=\"2-io多线程\"><a class=\"markdownIt-Anchor\" href=\"#2-io多线程\">#</a> 2 - IO 多线程</h2>\n<h3 id=\"1721简介\"><a class=\"markdownIt-Anchor\" href=\"#1721简介\">#</a> 17.2.1.\t简介</h3>\n<p>Redis6 终于支撑多线程了，告别单线程了吗？</p>\n<p>IO 多线程其实指<strong>客户端交互部分的网络 IO 交互处理模块多线程</strong>，而非执行命令多线程。Redis6 执行命令依然是单线程。</p>\n<h3 id=\"1722原理架构\"><a class=\"markdownIt-Anchor\" href=\"#1722原理架构\">#</a> 17.2.2.\t原理架构</h3>\n<p>Redis 6 加入多线程，但跟 Memcached 这种从 IO 处理到数据访问多线程的实现模式有些差异。Redis 的多线程部分只是用来<strong>处理网络数据的读写和协议解析</strong>，执行命令仍然是单线程。之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH/LPOP 等等的并发问题。整体的设计大体如下:</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802094700691.png\" alt=\"image-20220802094700691\"></p>\n<p>另外，多线程 IO 默认也是不开启的，需要再配置文件中配置</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>io-threads-do-reads  <span class=\"token function\">yes</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>io-threads <span class=\"token number\">4</span></pre></td></tr></table></figure><h2 id=\"3-工具支持-cluster\"><a class=\"markdownIt-Anchor\" href=\"#3-工具支持-cluster\">#</a> 3 - 工具支持 Cluster</h2>\n<p>之前老版 Redis 想要搭集群需要单独安装 ruby 环境，Redis 5 将 redis-trib.rb 的功能集成到 redis-cli 。</p>\n<p>另外官方 redis-benchmark 工具开始支持  <code>cluster</code>  模式了，通过多线程的方式对多个分片进行压测。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220802095313745.png\" alt=\"image-20220802095313745\"></p>\n<h2 id=\"4-redis新功能持续关注\"><a class=\"markdownIt-Anchor\" href=\"#4-redis新功能持续关注\">#</a> 4 - Redis 新功能持续关注</h2>\n<p>Redis6 新功能还有：</p>\n<p>1、RESP3 新的 Redis 通信协议：优化服务端与客户端之间通信</p>\n<p>2、Client side caching 客户端缓存：基于 RESP3 协议实现的客户端缓存功能。为了进一步提升缓存的性能，将客户端经常访问的数据 cache 到客户端。减少 TCP 网络交互。</p>\n<p>3、Proxy 集群代理模式：Proxy 功能，让 Cluster 拥有像单实例一样的接入方式，降低大家使用 cluster 的门槛。不过需要注意的是代理不改变 Cluster 的功能限制，不支持的命令还是不会支持，比如跨 slot 的多 Key 操作。</p>\n<p>4、Modules API<br>\nRedis 6 中模块 API 开发进展非常大，因为 Redis Labs 为了开发复杂的功能，从一开始就用上 Redis 模块。Redis 可以变成一个框架，利用 Modules 来构建不同系统，而不需要从头开始写然后还要 BSD 许可。Redis 一开始就是一个向编写各种系统开放的平台。</p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://blog.dabing.cool/hexo/hexo/",
            "url": "https://blog.dabing.cool/hexo/hexo/",
            "title": "Hexo",
            "date_published": "2022-04-30T14:46:25.000Z",
            "content_html": "<p>作者：dabing（王甜甜）<br>\n官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv\">https://hexo.io/zh-cn/docs/</span></p>\n<p>shoka 主题：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUv\">https://shoka.lostyu.me/</span></p>\n<p>我的博客：<a href=\"http://blog.dabing.cool/\">http://blog.dabing.cool/</a></p>\n<h1 id=\"一-安装\"><a class=\"markdownIt-Anchor\" href=\"#一-安装\">#</a> 一、安装</h1>\n<blockquote>\n<ol>\n<li><strong>安装 node.js 和 git</strong></li>\n<li><strong>下载 Hexo</strong></li>\n</ol>\n</blockquote>\n<ol>\n<li><strong>安装 node.js 和 git</strong></li>\n</ol>\n<p>首先确定自己的 node.js 和 git 是否已经安装了。用一下命令检测，未安装百度一下安装即可。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">node</span> <span class=\"token parameter variable\">-v</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token parameter variable\">-v</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token parameter variable\">--version</span></pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1655611139963-dc325d6a-9b1c-4640-ae84-8461ea8f701f.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li><strong>下载 Hexo</strong></li>\n</ol>\n<p>看官网：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo-cli</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo <span class=\"token parameter variable\">-v</span></pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1655611288375-8e0f843f-044e-499c-ba34-a5c50ab129f6.png\" alt=\"img\"></p>\n<h1 id=\"二-建站\"><a class=\"markdownIt-Anchor\" href=\"#二-建站\">#</a> 二、建站</h1>\n<blockquote>\n<ol>\n<li><strong>初始化项目 hexo init</strong></li>\n<li><strong>启动服务器 hexo server</strong></li>\n</ol>\n</blockquote>\n<ol>\n<li><strong>初始化项目</strong></li>\n</ol>\n<p>先创建一个文件夹，myblog，进入终端</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1655625935077-a5d6fb99-bcf1-441a-88b2-8ad6d7c895b3.png\" alt=\"img\"></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo init  <span class=\"token comment\">#初始化 hexo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 没有实现创建文件夹可以用下面的命令</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hexo init myblog</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1655626228031-9a0f6f80-5b57-428a-8fc4-9b8ff9714251.png\" alt=\"img\"></p>\n<p>虽然有报错，但是看大概意思是一开始链接失败，后面重置了成功了。新建了 hexo 项目的文件目录长这样：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1655626435990-f5a5e9f8-c207-4efc-a76a-3c6074218ef3.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li><strong>启动服务器</strong></li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token comment\"># 其实不知道这个是安装什么依赖</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span>   <span class=\"token comment\"># 安装部署插件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo server  <span class=\"token comment\"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/。</span></pre></td></tr></table></figure><p>这里可以不用安装依赖和插件，直接启动服务器也是可以的。</p>\n<p>启动了服务器了，访问下地址：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==\">http://localhost:4000/</span></p>\n<p>长这样，感觉不咋好看。到时候得换成那个少女粉的主题嘻嘻</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1655628264610-bb5eeb7f-b07b-4563-8683-574ebc239b7b.png\" alt=\"img\"></p>\n<h1 id=\"三-部署到github\"><a class=\"markdownIt-Anchor\" href=\"#三-部署到github\">#</a> 三、部署到 GitHub</h1>\n<blockquote>\n<ol>\n<li><strong>创建个仓库 <span class=\"exturl\" data-url=\"aHR0cDovL2RhYmluZzg1LmdpdGh1Yi5pbw==\">dabing85.github.io</span></strong></li>\n<li><strong>安装 hexo-deployer-git 部署插件</strong></li>\n<li><strong>修改_config.yml 文件</strong></li>\n<li><strong>代码部署到 git 并授权</strong></li>\n<li><strong>访问：</strong> <code>dabing85.github.io</code></li>\n</ol>\n</blockquote>\n<p>先部署到 github 吧，后面等备案了部署到自己的服务器上去嘻嘻。应该就是修改一下配置文件就可以了。</p>\n<ol>\n<li>\n<p><strong>创建个仓库 <span class=\"exturl\" data-url=\"aHR0cDovL2RhYmluZzg1LmdpdGh1Yi5pbw==\">dabing85.github.io</span></strong>  - 这个 dabing85 要跟你的 github 账户名一致</p>\n</li>\n<li>\n<p><strong>安装 hexo-deployer-git 部署插件</strong></p>\n</li>\n</ol>\n<p>刚刚就安装过了，就是这个命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span>   <span class=\"token comment\"># 安装插件</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>修改_config.yml 文件</strong></li>\n</ol>\n<p>部署推荐用 ssh 密钥的方式快一些。怎么生成公钥，可参考：<a href=\"https://blog.dabing.cool/java/git/\">https://blog.dabing.cool/java/git/</a></p>\n<p>配过本机公钥就不用管了。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> git@github.com<span class=\"token punctuation\">:</span>dabing85/dabing85.github.io.git</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> main</pre></td></tr></table></figure><ol start=\"4\">\n<li><strong>运行下面几个命令</strong></li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 三连，每次发布新文章的时候都要三连一下</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo clean</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo g\t<span class=\"token comment\"># 生成静态文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hexo d\t<span class=\"token comment\"># 部署代码到 GitHub 上，之后会跳出 github 授权的框</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><strong>访问：</strong> <code>dabing85.github.io</code></li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1655634264764-ab55bdc2-2bdd-449b-b403-4ede4675abad.png\" alt=\"img\"></p>\n<h1 id=\"四-美化博客\"><a class=\"markdownIt-Anchor\" href=\"#四-美化博客\">#</a> 四、美化博客</h1>\n<blockquote>\n<ol>\n<li>安装需要的依赖插件</li>\n<li>下载主题</li>\n<li>修改 /_config.yml 配置切换主题</li>\n<li>重新编译发布 hexo clean &amp; hexo deploy</li>\n<li>访问 <code>dabing85.github.io</code></li>\n<li>修改对应的配置文件</li>\n</ol>\n</blockquote>\n<p>看上这个少女粉的主题了，橙总介绍的：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">shoka.lostyu.me</span></p>\n<p>文档说明：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/</span></p>\n<p>基本配置: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/config/</span></p>\n<p>页面配置: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kaXNwbGF5Lw==\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/display/</span></p>\n<p>依赖插件: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kZXBlbmRlbnRzLw==\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/dependents/</span></p>\n<p>为了可视化，我直接用 idea 打开 mybolg 在 idea 的终止执行命令。也可以看看都添加了些什么文件。</p>\n<h2 id=\"1-依赖插件安装\"><a class=\"markdownIt-Anchor\" href=\"#1-依赖插件安装\">#</a> 1- 依赖插件安装</h2>\n<p>参考上方链接。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i hexo-renderer-multi-markdown-it <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">npm</span> i hexo-autoprefixer <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token function\">npm</span> i hexo-algolia <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token function\">npm</span> i hexo-algoliasearch <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token function\">npm</span> i hexo-symbols-count-time <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token function\">npm</span> i hexo-feed <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1655638217584-b2acf7bc-eb29-430c-a973-7e0d6ec57d4c.png\" alt=\"img\"></p>\n<p>对应的依赖配置直接复制博主文档里的内容到  <code>themes/shoka/_config.yml</code>  主题配置文件中。这个路径现在还没有，等会下载完主题就有了。</p>\n<h2 id=\"2-下载主题\"><a class=\"markdownIt-Anchor\" href=\"#2-下载主题\">#</a> 2- 下载主题</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1655638649685-7d6daada-158c-4edd-a372-969fb5b5d19a.png\" alt=\"img\"></p>\n<p>下载完毕多了这么个文件夹。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1655638710668-09f2449a-d66b-4a1e-80a7-cedf1426eb1a.png\" alt=\"img\"></p>\n<p>让这个主题起效：<br>\n修改站点配置文件  <code>/_config.yml </code> ，把主题改为 shoka</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> shoka</pre></td></tr></table></figure><p>重新编译部署：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo clean</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo g</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo d</pre></td></tr></table></figure><p>访问一下 <code>https://dabing85.github.io/</code>  呐，长这样：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1655640206227-f6aef02a-bf45-4b1d-bbd5-dcf3451a4fc9.png\" alt=\"img\"></p>\n<h2 id=\"3-修改主题配置文件shoka_configyml\"><a class=\"markdownIt-Anchor\" href=\"#3-修改主题配置文件shoka_configyml\">#</a> 3- 修改主题配置文件 /shoka/_config.yml</h2>\n<p>参考主题：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/config/</span></p>\n<p>全局搜索 algolia 的配置参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1MjM0NTEwL2FydGljbGUvZGV0YWlscy8xMTY4ODU3OTI=\">https://blog.csdn.net/m0_45234510/article/details/116885792</span> 和</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NDc5NDY4L2FydGljbGUvZGV0YWlscy8xMDczMzU2NjM=\">https://blog.csdn.net/qq_35479468/article/details/107335663</span></p>\n<p>无后端评论系统 valine 的配置参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92YWxpbmUuanMub3JnL3F1aWNrc3RhcnQuaHRtbA==\">https://valine.js.org/quickstart.html</span></p>\n<p>要修改一些图片如头像，可以在 <code>\\themes\\shoka\\source\\images</code>  路径下修改，直接替换，要<strong>同名</strong>！！！</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1655787225138-f0cda8bc-74af-40c4-9a1c-e7dc66c4a735.png\" alt=\"img\"></p>\n<p>下面是我的配置文件给大家参考一些，也可能不够完善：其实就是改了一些你需要的效果，加上刚刚的插件配置</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Alternate site name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">alternate</span><span class=\"token punctuation\">:</span> Dabing</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">open_graph</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#twitter_id:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#google_plus:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#fb_admins:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#fb_app_id:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># Assets</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">statics</span><span class=\"token punctuation\">:</span> / <span class=\"token comment\">#/ #//cdn.jsdelivr.net/gh/username/RepositoryName@latest/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span> css</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span> js</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key atrule\">images</span><span class=\"token punctuation\">:</span> images</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># themes/shoka/source/images/***</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key atrule\">favicon</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">apple_touch_icon</span><span class=\"token punctuation\">:</span> /apple<span class=\"token punctuation\">-</span>touch<span class=\"token punctuation\">-</span>icon.png</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">#safari_pinned_tab: /logo.svg</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">#android_manifest: /manifest.json</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">#ms_browserconfig: /browserconfig.xml</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># Dark Mode</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># By default, the page judges whether to turn on the dark mode according to the device settings or user selection</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># if `true`, the page will be displayed directly as Dark Mode, unless the user makes another choice</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 夜间模式</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key atrule\">darkmode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># By default the page will automatically scroll to the last viewed position</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># if `false`, automatic positioning will be turned off</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 自动定位 自动定位到上次浏览的位置</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token key atrule\">auto_scroll</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># Whether to show the loading cat</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># 是否显示页面加载动漫 就是每次都看到的那个猫猫</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token key atrule\">loader</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token key atrule\">start</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># When entering the page</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token key atrule\">switch</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># When switching to another page</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># click with Firework</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># 页面特效 单击页面的烟花效果</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key atrule\">fireworks</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token key atrule\">color</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token comment\"># - \"rgba(255,182,185,.9)\"</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\"># - \"rgba(250,227,217,.9)\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\"># - \"rgba(187,222,214,.9)\"</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\"># - \"rgba(138,198,209,.9)\"</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># 加载谷歌字体</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token key atrule\">font</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token comment\"># Font options:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token comment\"># `external: true` will load this font family from `host` above.</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token comment\"># `family: Times New Roman`. Without any quotes.</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token comment\"># Global font settings used for all elements inside &lt;body>.</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token key atrule\">global</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Mulish</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token comment\"># Font settings for alternate title.</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token comment\"># 备用字体</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token key atrule\">logo</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Fredericka the Great</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3.5</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token comment\"># Font settings for site title.</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token comment\"># 站点字体</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Noto Serif JP</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2.5</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token comment\"># Font settings for headlines (&lt;h1> to &lt;h6>).</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token key atrule\">headings</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Noto Serif SC</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token comment\"># Font settings for posts.</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token key atrule\">posts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token comment\"># Font settings for &lt;code> and code blocks.</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token key atrule\">codes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Inconsolata</pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\"># project of https://www.iconfont.cn/</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\"># //at.alicdn.com/t/font_1832207_c8i9n1ulxlt.css => 1832207_c8i9n1ulxlt</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token key atrule\">iconfont</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1832207_igi8uaupcus\"</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token comment\"># 菜单</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token key atrule\">首页</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> home</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token key atrule\">关于</span><span class=\"token punctuation\">:</span> /about/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> user</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token key atrule\">文章</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> feather</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token key atrule\">归档</span><span class=\"token punctuation\">:</span> /archives/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> list<span class=\"token punctuation\">-</span>alt</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token key atrule\">分类</span><span class=\"token punctuation\">:</span> /categories/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> th</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token key atrule\">标签</span><span class=\"token punctuation\">:</span> /tags/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> tags</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token key atrule\">友链</span><span class=\"token punctuation\">:</span> /friends/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> heart</pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\">#  links: /links/ || magic</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token comment\"># Social Links</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token comment\"># Usage: `Key: permalink || icon || color`</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token comment\"># Key is the link label showing to end users.</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token comment\"># Value before `||` delimiter is the target permalink,</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\"># secend value is the name of Font icon.</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token key atrule\">social</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token key atrule\">github</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/dabing85 <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> github <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#191717\"</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  <span class=\"token comment\">#google: https://plus.google.com/yourname || google</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  <span class=\"token comment\">#twitter: https://twitter.com/yourname || twitter || \"#00aff0\"</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  <span class=\"token comment\">#zhihu: https://www.zhihu.com/people/yourname || zhihu || \"#1e88e5\"</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  <span class=\"token comment\">#music: https://music.163.com/#/user/home?id=yourid || cloud-music || \"#e60026\"</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>  <span class=\"token comment\">#weibo: https://weibo.com/yourname || weibo || \"#ea716e\"</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  <span class=\"token comment\">#about: https://about.me/yourname || address-card || \"#3b5998\"</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token comment\">#email: mailto:yourname@mail.com || envelope || \"#55acd5\"</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  <span class=\"token comment\">#facebook: https://www.facebook.com/yourname || facebook</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token comment\">#stackoverflow: https://stackoverflow.com/yourname || stack-overflow</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token comment\">#youtube: https://youtube.com/yourname || youtube</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token comment\">#instagram: https://instagram.com/yourname || instagram</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token comment\">#skype: skype:yourname?call|chat || skype</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token comment\">#douban: https://www.douban.com/people/yourname/ || douban</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token key atrule\">sidebar</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token comment\"># Sidebar Position.</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  <span class=\"token comment\"># position: left</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token key atrule\">position</span><span class=\"token punctuation\">:</span> right</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token comment\"># Replace the default avatar image and set the url here.</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token key atrule\">avatar</span><span class=\"token punctuation\">:</span> avatar.jpg</pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token key atrule\">widgets</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  <span class=\"token comment\"># if true, will show random posts</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>  <span class=\"token comment\"># 显示随机文章</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>  <span class=\"token key atrule\">random_posts</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>  <span class=\"token comment\"># if true, will show recent comments</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>  <span class=\"token comment\"># 显示最近评论</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>  <span class=\"token key atrule\">recent_comments</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token key atrule\">footer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  <span class=\"token comment\"># Specify the date when the site was setup. If not defined, current year will be used.</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  <span class=\"token comment\"># 页尾全站统计局</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>  <span class=\"token key atrule\">since</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2010</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>  <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> sakura rotate</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token comment\"># Change the color of icon, using Hex Code.</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token key atrule\">color</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"#ffc0cb\"</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>  <span class=\"token comment\"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>  <span class=\"token key atrule\">count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  <span class=\"token key atrule\">powered</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token comment\"># 文章界面统计</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token key atrule\">post</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>  <span class=\"token comment\"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>  <span class=\"token key atrule\">count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token comment\"># 奖励 </span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre><span class=\"token comment\"># Reward (Donate)</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre><span class=\"token key atrule\">reward</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>  <span class=\"token comment\"># If true, reward will be displayed in every article by default.</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>  <span class=\"token key atrule\">account</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token key atrule\">wechatpay</span><span class=\"token punctuation\">:</span> /wechatpay.png</pre></td></tr><tr><td data-num=\"170\"></td><td><pre><span class=\"token comment\">#    alipay: /alipay.png</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre><span class=\"token comment\">#    paypal: /paypal.png</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre></pre></td></tr><tr><td data-num=\"173\"></td><td><pre><span class=\"token comment\"># TagCloud settings for tags page.</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre><span class=\"token key atrule\">tagcloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>  <span class=\"token comment\"># All values below are same as default, change them by yourself.</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>  <span class=\"token key atrule\">min</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16</span> <span class=\"token comment\"># Minimun font size in px</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>  <span class=\"token key atrule\">max</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span> <span class=\"token comment\"># Maxium font size in px</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>  <span class=\"token key atrule\">start</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"#72cecf\"</span> <span class=\"token comment\"># Start color (hex, rgba, hsla or color keywords)</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>  <span class=\"token key atrule\">end</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"#ffbac3\"</span> <span class=\"token comment\"># End color (hex, rgba, hsla or color keywords)</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>  <span class=\"token key atrule\">amount</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> <span class=\"token comment\"># Amount of tags, change it if you have more than 200 tags</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre><span class=\"token comment\"># Third Party Plugins &amp; Services Settings</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre></pre></td></tr><tr><td data-num=\"187\"></td><td><pre><span class=\"token comment\"># Creative Commons 4.0 International License.</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre><span class=\"token comment\"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token comment\"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre><span class=\"token comment\"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre><span class=\"token comment\"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre><span class=\"token key atrule\">creative_commons</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>  <span class=\"token key atrule\">license</span><span class=\"token punctuation\">:</span> by<span class=\"token punctuation\">-</span>nc<span class=\"token punctuation\">-</span>sa</pre></td></tr><tr><td data-num=\"194\"></td><td><pre>  <span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN  <span class=\"token comment\"># deed.zh</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre></pre></td></tr><tr><td data-num=\"196\"></td><td><pre><span class=\"token comment\"># Comments</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre><span class=\"token comment\"># Valine</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre><span class=\"token comment\"># For more information: https://github.com/amehime/MiniValine</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre><span class=\"token comment\"># 无后端评论系统 valine 的配置参考：https://valine.js.org/quickstart.html</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre><span class=\"token key atrule\">valine</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 配置你的 appId</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>  <span class=\"token key atrule\">appKey</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 配置你的 appKey</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>  <span class=\"token key atrule\">placeholder</span><span class=\"token punctuation\">:</span> ヽ(○´∀`)ﾉ♪ <span class=\"token comment\"># Comment box placeholder</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>  <span class=\"token key atrule\">avatar</span><span class=\"token punctuation\">:</span> retro <span class=\"token comment\"># Gravatar style : mp, identicon, monsterid, wavatar, robohash, retro</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>  <span class=\"token key atrule\">pageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token comment\"># Pagination size</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>  <span class=\"token key atrule\">lang</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN</pre></td></tr><tr><td data-num=\"207\"></td><td><pre>  <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># Article reading statistic 文章阅读量统计</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>  <span class=\"token key atrule\">NoRecordIP</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># Whether to record the commenter IP</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>  <span class=\"token key atrule\">serverURLs</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>  <span class=\"token key atrule\">powerMode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>  <span class=\"token key atrule\">tagMeta</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>    <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> 新朋友</pre></td></tr><tr><td data-num=\"213\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span> 博客作者</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span> 小伙伴</pre></td></tr><tr><td data-num=\"215\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span> 金主粑粑</pre></td></tr><tr><td data-num=\"216\"></td><td><pre>  <span class=\"token key atrule\">tagColor</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"var(--color-orange)\"</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"var(--color-aqua)\"</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"var(--color-pink)\"</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>  <span class=\"token key atrule\">tagMember</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>      <span class=\"token punctuation\">-</span> 0fcd1a19626a9a93e8eca7dc65c375fb </pre></td></tr><tr><td data-num=\"223\"></td><td><pre>      <span class=\"token comment\">#(这是博主的 md5 值，别人评论之后可以在 leanCloud 看到邮箱 MD5 值)</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>    <span class=\"token comment\"># - hash of master@email.com</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>    <span class=\"token comment\"># - hash of master2@email.com</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>    <span class=\"token comment\"># - hash of friend1@email.com</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>    <span class=\"token comment\"># - hash of investor1@email.com</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre></pre></td></tr><tr><td data-num=\"231\"></td><td><pre><span class=\"token comment\"># bgm 背景音乐</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 列表1</pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>      <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2943811283</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>      <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2297706586</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 列表2</pre></td></tr><tr><td data-num=\"238\"></td><td><pre>    <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>      <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2031842656</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre></pre></td></tr><tr><td data-num=\"241\"></td><td><pre><span class=\"token comment\"># random image api</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre><span class=\"token comment\"># 随机图库</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre><span class=\"token key atrule\">image_server</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># \"https://acg.xydwz.cn/api/api.php\"</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre></pre></td></tr><tr><td data-num=\"245\"></td><td><pre><span class=\"token comment\"># Algolia Search</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre><span class=\"token comment\"># For more information: https://www.algolia.com</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre><span class=\"token key atrule\">search</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>  <span class=\"token key atrule\">hits</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>    <span class=\"token key atrule\">per_page</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre></pre></td></tr><tr><td data-num=\"251\"></td><td><pre><span class=\"token comment\"># Dependencies: https://github.com/amehime/hexo-renderer-multi-markdown-it</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre><span class=\"token key atrule\">pangu</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre></pre></td></tr><tr><td data-num=\"254\"></td><td><pre><span class=\"token comment\"># Quicklink Support</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre><span class=\"token comment\"># For more information: https://github.com/GoogleChromeLabs/quicklink</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre><span class=\"token key atrule\">quicklink</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>  <span class=\"token comment\"># Custom a time in milliseconds by which the browser must execute prefetching.</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>  <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>  <span class=\"token comment\"># Default (true) will attempt to use the fetch() API if supported (rather than link[rel=prefetch]).</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>  <span class=\"token key atrule\">priority</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>  <span class=\"token comment\"># For more flexibility you can add some patterns (RegExp, Function, or Array) to ignores.</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>  <span class=\"token comment\"># See: https://github.com/GoogleChromeLabs/quicklink#custom-ignore-patterns</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>  <span class=\"token key atrule\">ignores</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre></pre></td></tr><tr><td data-num=\"266\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre><span class=\"token comment\"># analytics &amp; SEO Settings</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre><span class=\"token key atrule\">baidu_analytics</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># &lt;app_id></span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre></pre></td></tr><tr><td data-num=\"271\"></td><td><pre><span class=\"token comment\"># Disable Baidu transformation on mobile devices.</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre><span class=\"token key atrule\">disable_baidu_transformation</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre></pre></td></tr><tr><td data-num=\"274\"></td><td><pre><span class=\"token comment\"># Automatically add external URL with Base64 encrypt &amp; decrypt.</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre><span class=\"token key atrule\">exturl</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre></pre></td></tr><tr><td data-num=\"277\"></td><td><pre><span class=\"token comment\"># Google Webmaster tools verification.</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre><span class=\"token comment\"># See: https://www.google.com/webmasters</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre><span class=\"token key atrule\">google_site_verification</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre></pre></td></tr><tr><td data-num=\"281\"></td><td><pre><span class=\"token comment\"># Bing Webmaster tools verification.</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre><span class=\"token comment\"># See: https://www.bing.com/webmaster</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre><span class=\"token key atrule\">bing_site_verification</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre></pre></td></tr><tr><td data-num=\"285\"></td><td><pre><span class=\"token comment\"># Yandex Webmaster tools verification.</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre><span class=\"token comment\"># See: https://webmaster.yandex.ru</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre><span class=\"token key atrule\">yandex_site_verification</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre></pre></td></tr><tr><td data-num=\"289\"></td><td><pre><span class=\"token comment\"># Baidu Webmaster tools verification.</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre><span class=\"token comment\"># See: https://ziyuan.baidu.com/site</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre><span class=\"token key atrule\">baidu_site_verification</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre></pre></td></tr><tr><td data-num=\"293\"></td><td><pre><span class=\"token comment\"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO.</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre><span class=\"token key atrule\">baidu_push</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre></pre></td></tr><tr><td data-num=\"296\"></td><td><pre><span class=\"token comment\"># 渲染 md 文件</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre><span class=\"token key atrule\">markdown</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>  <span class=\"token key atrule\">render</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 渲染器设置</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>    <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 过滤 HTML 标签</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>    <span class=\"token key atrule\">xhtmlOut</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 使用 '/' 来闭合单标签 （比如 &lt;br />）。</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>    <span class=\"token key atrule\">breaks</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 转换段落里的 '\\n' 到 &lt;br>。</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>    <span class=\"token key atrule\">linkify</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 将类似 URL 的文本自动转换为链接。</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>    <span class=\"token key atrule\">typographer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>    <span class=\"token key atrule\">quotes</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'“”‘’'</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>  <span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># markdown-it 插件设置</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>toc<span class=\"token punctuation\">-</span>and<span class=\"token punctuation\">-</span>anchor</pre></td></tr><tr><td data-num=\"308\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>          <span class=\"token key atrule\">tocClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'toc'</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>          <span class=\"token key atrule\">anchorClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'anchor'</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>multimd<span class=\"token punctuation\">-</span>table</pre></td></tr><tr><td data-num=\"314\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>          <span class=\"token key atrule\">multiline</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>          <span class=\"token key atrule\">rowspan</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre>          <span class=\"token key atrule\">headerless</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>furigana</pre></td></tr><tr><td data-num=\"321\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre>          <span class=\"token key atrule\">fallbackParens</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"()\"</span></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>spoiler</pre></td></tr><tr><td data-num=\"326\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"328\"></td><td><pre>          <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"你知道得太多了\"</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre></pre></td></tr><tr><td data-num=\"330\"></td><td><pre><span class=\"token comment\"># minify 配置，压缩 css/js/html</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre><span class=\"token key atrule\">minify</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre>  <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 排除 hexo-feed 用到的模板文件</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/json.ejs'</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/atom.ejs'</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/rss.ejs'</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>  <span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.css'</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>  <span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre>    <span class=\"token key atrule\">mangle</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>      <span class=\"token key atrule\">toplevel</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"346\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre>    <span class=\"token key atrule\">compress</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.js'</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre></pre></td></tr><tr><td data-num=\"351\"></td><td><pre><span class=\"token comment\"># 代码高亮</span></pre></td></tr><tr><td data-num=\"352\"></td><td><pre><span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"354\"></td><td><pre></pre></td></tr><tr><td data-num=\"355\"></td><td><pre><span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"356\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"357\"></td><td><pre></pre></td></tr><tr><td data-num=\"358\"></td><td><pre></pre></td></tr><tr><td data-num=\"359\"></td><td><pre></pre></td></tr><tr><td data-num=\"360\"></td><td><pre><span class=\"token key atrule\">autoprefixer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">'*.min.css'</span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre></pre></td></tr><tr><td data-num=\"364\"></td><td><pre></pre></td></tr><tr><td data-num=\"365\"></td><td><pre></pre></td></tr><tr><td data-num=\"366\"></td><td><pre><span class=\"token key atrule\">keywords</span><span class=\"token punctuation\">:</span> java<span class=\"token punctuation\">,</span>git<span class=\"token punctuation\">,</span>springcloud <span class=\"token comment\">#站点关键词，用 “,” 分隔</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre></pre></td></tr><tr><td data-num=\"368\"></td><td><pre><span class=\"token key atrule\">feed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre>  <span class=\"token key atrule\">limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>  <span class=\"token key atrule\">order_by</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"-date\"</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>  <span class=\"token key atrule\">tag_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>  <span class=\"token key atrule\">category_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>  <span class=\"token key atrule\">rss</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"374\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"375\"></td><td><pre>    <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/rss.ejs\"</span></pre></td></tr><tr><td data-num=\"376\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"rss.xml\"</span></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>  <span class=\"token key atrule\">atom</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"378\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"379\"></td><td><pre>    <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/atom.ejs\"</span></pre></td></tr><tr><td data-num=\"380\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"atom.xml\"</span></pre></td></tr><tr><td data-num=\"381\"></td><td><pre>  <span class=\"token key atrule\">jsonFeed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"382\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"383\"></td><td><pre>    <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/json.ejs\"</span></pre></td></tr><tr><td data-num=\"384\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"feed.json\"</span></pre></td></tr><tr><td data-num=\"385\"></td><td><pre></pre></td></tr><tr><td data-num=\"386\"></td><td><pre></pre></td></tr><tr><td data-num=\"387\"></td><td><pre><span class=\"token comment\">#! ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"388\"></td><td><pre><span class=\"token comment\">#! DO NOT EDIT THE FOLLOWING `vendors` SETTINGS</span></pre></td></tr><tr><td data-num=\"389\"></td><td><pre><span class=\"token comment\">#! UNLESS YOU KNOW WHAT YOU ARE DOING</span></pre></td></tr><tr><td data-num=\"390\"></td><td><pre><span class=\"token comment\">#! Script dependencies will be combined with jsDelivr (cdn.jsdelivr.net)</span></pre></td></tr><tr><td data-num=\"391\"></td><td><pre><span class=\"token comment\">#! ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"392\"></td><td><pre><span class=\"token key atrule\">vendors</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"393\"></td><td><pre>  <span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"394\"></td><td><pre>    <span class=\"token key atrule\">katex</span><span class=\"token punctuation\">:</span> npm/katex@0.12.0/dist/katex.min.css</pre></td></tr><tr><td data-num=\"395\"></td><td><pre>    <span class=\"token key atrule\">comment</span><span class=\"token punctuation\">:</span> css/comment.css</pre></td></tr><tr><td data-num=\"396\"></td><td><pre>    <span class=\"token key atrule\">fancybox</span><span class=\"token punctuation\">:</span> combine/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css<span class=\"token punctuation\">,</span>npm/justifiedGallery@3.8.1/dist/css/justifiedGallery.min.css</pre></td></tr><tr><td data-num=\"397\"></td><td><pre>  <span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"398\"></td><td><pre>    <span class=\"token key atrule\">pace</span><span class=\"token punctuation\">:</span> npm/pace<span class=\"token punctuation\">-</span>js@1.0.2/pace.min.js</pre></td></tr><tr><td data-num=\"399\"></td><td><pre>    <span class=\"token key atrule\">pjax</span><span class=\"token punctuation\">:</span> npm/pjax@0.2.8/pjax.min.js</pre></td></tr><tr><td data-num=\"400\"></td><td><pre>    <span class=\"token key atrule\">fetch</span><span class=\"token punctuation\">:</span> npm/whatwg<span class=\"token punctuation\">-</span>fetch@3.4.0/dist/fetch.umd.min.js</pre></td></tr><tr><td data-num=\"401\"></td><td><pre>    <span class=\"token key atrule\">anime</span><span class=\"token punctuation\">:</span> npm/animejs@3.2.0/lib/anime.min.js</pre></td></tr><tr><td data-num=\"402\"></td><td><pre>    <span class=\"token key atrule\">algolia</span><span class=\"token punctuation\">:</span> npm/algoliasearch@4/dist/algoliasearch<span class=\"token punctuation\">-</span>lite.umd.js</pre></td></tr><tr><td data-num=\"403\"></td><td><pre>    <span class=\"token key atrule\">instantsearch</span><span class=\"token punctuation\">:</span> npm/instantsearch.js@4/dist/instantsearch.production.min.js</pre></td></tr><tr><td data-num=\"404\"></td><td><pre>    <span class=\"token key atrule\">lazyload</span><span class=\"token punctuation\">:</span> npm/lozad@1/dist/lozad.min.js</pre></td></tr><tr><td data-num=\"405\"></td><td><pre>    <span class=\"token key atrule\">quicklink</span><span class=\"token punctuation\">:</span> npm/quicklink@2/dist/quicklink.umd.js</pre></td></tr><tr><td data-num=\"406\"></td><td><pre>    <span class=\"token key atrule\">fancybox</span><span class=\"token punctuation\">:</span> combine/npm/jquery@3.5.1/dist/jquery.min.js<span class=\"token punctuation\">,</span>npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js<span class=\"token punctuation\">,</span>npm/justifiedGallery@3.8.1/dist/js/jquery.justifiedGallery.min.js</pre></td></tr><tr><td data-num=\"407\"></td><td><pre>    <span class=\"token key atrule\">valine</span><span class=\"token punctuation\">:</span> gh/amehime/MiniValine@4.2.2<span class=\"token punctuation\">-</span>beta10/dist/MiniValine.min.js</pre></td></tr><tr><td data-num=\"408\"></td><td><pre>    <span class=\"token key atrule\">copy_tex</span><span class=\"token punctuation\">:</span> npm/katex@0.12.0/dist/contrib/copy<span class=\"token punctuation\">-</span>tex.min.js</pre></td></tr><tr><td data-num=\"409\"></td><td><pre>    <span class=\"token key atrule\">chart</span><span class=\"token punctuation\">:</span> npm/frappe<span class=\"token punctuation\">-</span>charts@1.5.0/dist/frappe<span class=\"token punctuation\">-</span>charts.min.iife.min.js</pre></td></tr></table></figure><h2 id=\"4-修改全局配置文件-_configyml\"><a class=\"markdownIt-Anchor\" href=\"#4-修改全局配置文件-_configyml\">#</a> 4 - 修改全局配置文件 _config.yml</h2>\n<p>参考官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29uZmlndXJhdGlvbg==\">https://hexo.io/zh-cn/docs/configuration</span></p>\n<p>要说明一下的分类和标签的配置：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1655788779816-0938393b-2931-4d4a-94e3-9bad58aef34a.png\" alt=\"img\"></p>\n<p>基本照着官网来就好，没啥要改的。我的给参考一下。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Hexo Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/configuration.html</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">## Source: https://github.com/hexojs/hexo/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># Site</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">subtitle</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'不在能知，乃在能行'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'欢迎来到大冰的笔记空间~这里主要会记录编程学习笔记🌸'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">keywords</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> Dabing<span class=\"token punctuation\">-</span>He</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">timezone</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># URL</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//blog.dabing.cool/</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key atrule\">permalink</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title/  <span class=\"token comment\">#:year/:month/:day/:title/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key atrule\">permalink_defaults</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key atrule\">pretty_urls</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token key atrule\">trailing_index</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># Set to false to remove trailing 'index.html' from permalinks</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">trailing_html</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># Set to false to remove trailing '.html' from permalinks</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># Directory</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key atrule\">source_dir</span><span class=\"token punctuation\">:</span> source</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token key atrule\">public_dir</span><span class=\"token punctuation\">:</span> public</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key atrule\">tag_dir</span><span class=\"token punctuation\">:</span> tags</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key atrule\">archive_dir</span><span class=\"token punctuation\">:</span> archives</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token key atrule\">category_dir</span><span class=\"token punctuation\">:</span> categories</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token key atrule\">code_dir</span><span class=\"token punctuation\">:</span> downloads/code</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token key atrule\">i18n_dir</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>lang</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token key atrule\">skip_render</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"># Writing</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token key atrule\">new_post_name</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title.md <span class=\"token comment\"># File name of new posts</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token key atrule\">default_layout</span><span class=\"token punctuation\">:</span> post</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token key atrule\">titlecase</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># Transform title into titlecase</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token key atrule\">external_link</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># Open external links in new tab</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token key atrule\">field</span><span class=\"token punctuation\">:</span> site <span class=\"token comment\"># Apply to the whole site</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token key atrule\">filename_case</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key atrule\">render_drafts</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token key atrule\">post_asset_folder</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token key atrule\">relative_link</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token key atrule\">future</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token key atrule\">auto_detect</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token key atrule\">wrap</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token key atrule\">hljs</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token key atrule\">preprocess</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\"># Home page setting</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\"># path: Root path for your blogs index page. (default = '')</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\"># per_page: Posts displayed per page. (0 = disable pagination)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\"># order_by: Posts order. (Order by date descending by default)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token key atrule\">index_generator</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token key atrule\">per_page</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token key atrule\">order_by</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">-</span>date</pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\"># Category &amp; Tag</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\"># 这里配置分类和标签</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token key atrule\">default_category</span><span class=\"token punctuation\">:</span> uncategorized</pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token key atrule\">category_map</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token key atrule\">Java</span><span class=\"token punctuation\">:</span> java</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token key atrule\">Hexo</span><span class=\"token punctuation\">:</span> hexo</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token key atrule\">进阶</span><span class=\"token punctuation\">:</span> javamore</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token key atrule\">缓存</span><span class=\"token punctuation\">:</span> cache</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token key atrule\">微服务</span><span class=\"token punctuation\">:</span> springcloud</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token key atrule\">算法</span><span class=\"token punctuation\">:</span> algorithm</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token key atrule\">算法-新手</span><span class=\"token punctuation\">:</span> algorithm1</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token key atrule\">算法-基础</span><span class=\"token punctuation\">:</span> algorithm2</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token key atrule\">随便记</span><span class=\"token punctuation\">:</span> diary</pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token key atrule\">tag_map</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\"># Metadata elements</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token comment\">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token key atrule\">meta_generator</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token comment\"># Date / Time format</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\">## Hexo uses Moment.js to parse and display date</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">## You can customize the date format as defined in</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">## http://momentjs.com/docs/#/displaying/format/</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token key atrule\">date_format</span><span class=\"token punctuation\">:</span> YYYY<span class=\"token punctuation\">-</span>MM<span class=\"token punctuation\">-</span>DD</pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token key atrule\">time_format</span><span class=\"token punctuation\">:</span> HH<span class=\"token punctuation\">:</span>mm<span class=\"token punctuation\">:</span>ss</pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token comment\">## updated_option supports 'mtime', 'date', 'empty'</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token key atrule\">updated_option</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mtime'</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token comment\"># Pagination</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token comment\">## Set per_page to 0 to disable pagination</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token key atrule\">per_page</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token key atrule\">pagination_dir</span><span class=\"token punctuation\">:</span> page</pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token comment\"># Include / Exclude file(s)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token comment\">## include:/exclude: options only apply to the 'source/' folder</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token key atrule\">ignore</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token comment\"># 全局搜索</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token key atrule\">algolia</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your appId</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token key atrule\">apiKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your apiKey</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token key atrule\">adminApiKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#Your adminApiKey</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token key atrule\">chunkSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token key atrule\">indexName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"dabing\"</span> <span class=\"token comment\">#\"shoka\"</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token key atrule\">fields</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">-</span> title</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token punctuation\">-</span> path</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">-</span> categories</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">-</span> content<span class=\"token punctuation\">:</span>strip<span class=\"token punctuation\">:</span>truncate<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token punctuation\">-</span> gallery</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">-</span> photos</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token punctuation\">-</span> tags</pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token comment\"># Extensions</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token comment\">## Plugins: https://hexo.io/plugins/</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token comment\">## Themes: https://hexo.io/themes/</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> shoka</pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> git@github.com<span class=\"token punctuation\">:</span>dabing85/dabing85.github.io.git</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> main</pre></td></tr></table></figure><p>再来一遍三连 hexo clean 、hexo generate、hexo deploy 即可</p>\n<h1 id=\"五-其他\"><a class=\"markdownIt-Anchor\" href=\"#五-其他\">#</a> 五、其他</h1>\n<h2 id=\"1-要写一篇文章\"><a class=\"markdownIt-Anchor\" href=\"#1-要写一篇文章\">#</a> 1- 要写一篇文章：</h2>\n<p>如我要写一篇文章，我就这么写：写在 <code>/source/_post/</code>  目录下，可以按照分类，如我 hexo 分类，就写在 <code>/source/_post/hexo/</code>  目录下即可</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token front-matter yaml language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 前缀和<span class=\"token punctuation\">-</span>新手</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2022-09-01 10:00:00</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">-</span> <span class=\"token punctuation\">[</span>算法<span class=\"token punctuation\">,</span> 算法<span class=\"token punctuation\">-</span>新手<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">-</span> 算法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">---</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>这里开始正文。。。。。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token list punctuation\">-</span> [算法, 算法-新手]  表示算法下的子目录，算法-新手</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token list punctuation\">-</span> Java java分类下</pre></td></tr></table></figure><h2 id=\"2-分类\"><a class=\"markdownIt-Anchor\" href=\"#2-分类\">#</a> 2 - 分类</h2>\n<p>在你的根目录 <code>/source/_post/hexo/</code>  下放一张该分类的封面图，它就会自动在首页显示这个分类了。</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221021113905502.png\" alt=\"image-20221021113905502\"></p>\n<h2 id=\"3-jsdelivr-被墙\"><a class=\"markdownIt-Anchor\" href=\"#3-jsdelivr-被墙\">#</a> 3-  jsdelivr 被墙</h2>\n<p>我在 shoka 评论区找到的，评论内容如下：</p>\n<p>您好，我这边大概去了解了一下，这个问题应该是与 jsdelivr 被墙有关，可参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYS9pc3N1ZXMvNjU=\">关于 jsdeliver 在国内的 ICP 许可证被吊销 #65</span> 里的讨论，以及 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmxpcTIuY29tL2FydGljbGUvNzY4Yjc0YTI=\">jsDelivr 静态文件 CDN 加速失效之后解决方案</span> 这一博客的评论区。我目前采取的解决方案是：</p>\n<ul>\n<li>修改 \\themes\\shoka\\source\\js_app 路径下的 utils.js 文件：将 <span class=\"exturl\" data-url=\"aHR0cDovL2Nkbi5qc2RlbGl2ci5uZXQ=\">cdn.jsdelivr.net</span> 替换成 <span class=\"exturl\" data-url=\"aHR0cDovL2Zhc3RseS5qc2RlbGl2ci5uZXQ=\">fastly.jsdelivr.net</span></li>\n<li>修改 \\themes\\shoka\\scripts\\helpers 路径下的 asset.js 文件：将 <span class=\"exturl\" data-url=\"aHR0cDovL2Nkbi5qc2RlbGl2ci5uZXQ=\">cdn.jsdelivr.net</span> 替换成 <span class=\"exturl\" data-url=\"aHR0cDovL2Zhc3RseS5qc2RlbGl2ci5uZXQ=\">fastly.jsdelivr.net</span></li>\n<li>修改 shoka 主题 _config.yml 文件（如果没有在博客根目录新增 _config.shoka.yml 文件的话）中的 statics 设置，输入完整的 fastly.jsdelivr 静态文件网址，即，设置为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9mYXN0bHkuanNkZWxpdnIubmV0L2doLyVFNCVCRCVBMCVFNyU5QSU4NGdpdGh1YiVFNyU5NCVBOCVFNiU4OCVCNyVFNSU5MCU4RC8lRTUlOEQlOUElRTUlQUUlQTIlRTUlQUYlQjklRTUlQkElOTQlRTclOUElODQlRTQlQkIlOTMlRTUlQkElOTMlRTUlOTAlOERAbGF0ZXN0Lw==\">https://fastly.jsdelivr.net/gh/ 你的 github 用户名 / 博客对应的仓库名 @latest/</span> ，例如我的设置：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mYXN0bHkuanNkZWxpdnIubmV0L2doL2ppYW5reWNoZW4vamlhbmt5Y2hlbi5naXRodWIuaW9AbGF0ZXN0Lw==\">https://fastly.jsdelivr.net/gh/jiankychen/jiankychen.github.io@latest/</span> （注：我不太确定 \\themes\\shoka\\source\\js_app 路径下 global.js 文件中的 var statics = CONFIG.statics.indexOf (‘//‘) &gt; 0 ? CONFIG.statics : CONFIG.root 这一行代码的逻辑，为了确保我们在 _config.yml 中设置的 statics 能够奏效，所以我在设置 _config.yml 的 statics 时加上了 https: 这一前缀，以确保 CONFIG.statics.indexOf (‘//‘) &gt; 0 为 true ）</li>\n<li>如果您配置了 valine 评论系统，则还需要将 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9mYXN0bHkuanNkZWxpdnIubmV0L2doL2FtZWhpbWUvTWluaVZhbGluZUA0LjIuMi1iZXRhMTAvZGlzdC8=\">https://fastly.jsdelivr.net/gh/amehime/MiniValine@4.2.2-beta10/dist/</span> 中的 MiniValine.min.js 下载到本地并做一定的修改，同时修改 shoka 主题 _config.yml 文件的 valine: js/MiniValine.min.js 这一项设置，这一部分工作我暂时也还没能解决（目前我的 valine 评论系统仍需翻墙才能加载出来），所以无法为您提供更详细的修改建议。</li>\n</ul>\n<p>附注：jsdelivr 缓存刷新较慢，据说可能要 24 小时左右，所以，按照上述操作进行修改后，可能需耐心等待 jsdelivr 缓存刷新后才能 正常访问博客 ，或者也可以查找有关 刷新 jsdelivr 缓存 的资料进一步解决。</p>\n<h1 id=\"六-域名解析github-page\"><a class=\"markdownIt-Anchor\" href=\"#六-域名解析github-page\">#</a> 六、域名解析 github page</h1>\n<blockquote>\n<ol>\n<li>买域名        ✔</li>\n<li>域名备案    ✔</li>\n<li>解析域名     见下</li>\n<li>到 github page 设置自定义域名   见下</li>\n</ol>\n</blockquote>\n<p>** 第三步，域名解析：** 记录类型 CNAME，记录值写：<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1naXRodWItb245aW0zM2F1MjRmLmdpdGh1Yi5pbw==\">你的 github 名.github.io</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1656126371608-7c89ca76-dddd-46a4-a6d5-8a1843af2388.png\" alt=\"img\"></p>\n<p>** 第四步：** 到 github 找到 <code>你的github名.github.io</code>  仓库，setting，找到 github pages，添加上你的域名即可。</p>\n<p>等个十几分钟就去访问下你的博客看看咯。我的 <a href=\"https://blog.dabing.cool\">blog.dabing.cool</a></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1656126177215-71010ed0-7373-4947-806a-fcefe95094ea.png\" alt=\"img\"></p>\n<h1 id=\"七-使用github-action自动部署hexo到github-pages\"><a class=\"markdownIt-Anchor\" href=\"#七-使用github-action自动部署hexo到github-pages\">#</a> 七、使用 Github Action 自动部署 hexo 到 GitHub pages</h1>\n<p>这里默认你把上面的都做好了～</p>\n<blockquote>\n<p>1、github 创建一个私人仓库，用于存放 hexo 的源代码  –  配置私钥</p>\n<p>2、github 上的 youname.github.io 是存放 hexo 的静态网页文件  – 配置公钥</p>\n<p>3、配置工作流：.github/workflows/deploy.yml</p>\n</blockquote>\n<p>我踩太多坑了，可以参考这个做：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3JlYWQvY3YxMDAxNjA2Mi8=\">利用 GitHub Actions 自动部署 Hexo 博客 全自动运行</span></p>\n<p>我的配置文件这里贴一下：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Action 的名字</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Hexo Auto Deploy</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\"># 触发条件 1：main 分支收到 push 后执行任务。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">-</span> main</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\"># 触发条件 2：手动按钮</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">workflow_dispatch</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 这里放环境变量，需要替换成你自己的</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\"># Hexo 编译后使用此 git 用户部署到 github 仓库</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">GIT_USER</span><span class=\"token punctuation\">:</span> dabing85</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\"># Hexo 编译后使用此 git 邮箱部署到 github 仓库</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">GIT_EMAIL</span><span class=\"token punctuation\">:</span> 2261617090@qq.com</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\"># Hexo 编译后要部署的 github 仓库</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token key atrule\">GIT_DEPLOY_REPO</span><span class=\"token punctuation\">:</span> dabing85/dabing85.github.io</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\"># Hexo 编译后要部署到的分支</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">GIT_DEPLOY_BRANCH</span><span class=\"token punctuation\">:</span> main</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#  # Hexo 编译后使用此 gitee 用户部署到 gitee 仓库</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#  GITEE_USER: wbsu2003</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#  # Hexo 编译后要部署的 gitee 仓库</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#  GITEE_DEPLOY_REPO: wbsu2003/wbsu2003</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#  # Hexo 编译后要部署到的分支</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#  GITEE_DEPLOY_BRANCH: master</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\"># 注意替换为你的 GitHub 源仓库地址</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token key atrule\">GIT_SOURCE_REPO</span><span class=\"token punctuation\">:</span> git@github.com<span class=\"token punctuation\">:</span>dabing85/dabing85.github.io.git</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\"># 注意替换为你的 Gitee 目标仓库地址</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#  GITEE_DESTINATION_REPO: git@gitee.com:wbsu2003/wbsu2003.git</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build on node $&lt;<span class=\"token tag\">!--swig</span>￼0<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span> and $&lt;<span class=\"token tag\">!--swig</span>￼1<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span><span class=\"token scalar string\"></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    runs-on: ubuntu-latest</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    if: github.event.repository.owner.id == github.event.sender.id</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    strategy:</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      matrix:</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        os: [ubuntu-18.04]</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        node_version: [12.x]</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout deploy repo</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>          <span class=\"token key atrule\">repository</span><span class=\"token punctuation\">:</span> $&lt;<span class=\"token tag\">!--swig</span>￼2<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span><span class=\"token scalar string\"></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>          ref: $</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>          path: .deploy_git</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Use Node.js $&lt;<span class=\"token tag\">!--swig</span>￼4<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span><span class=\"token scalar string\"></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        uses: actions/setup-node@v1</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        with:</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>          node-version: $</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Configuration environment</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>          <span class=\"token key atrule\">HEXO_DEPLOY_KEY</span><span class=\"token punctuation\">:</span> $&lt;<span class=\"token tag\">!--swig</span>￼6<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span><span class=\"token scalar string\"></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        run: |</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>          sudo timedatectl set-timezone \"Asia/Shanghai\"</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>          mkdir -p ~/.ssh/</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>          echo \"$HEXO_DEPLOY_KEY\" > ~/.ssh/id_rsa</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>          chmod 600 ~/.ssh/id_rsa</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>          git config --global user.name \"$GIT_USER\"</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>          git config --global user.email \"$GIT_EMAIL\"</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install dependencies</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\"></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>          npm install hexo-cli -g</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>          npm install</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\"># 根据你安装的组件进行安装</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token comment\">#          npm i hexo-renderer-multi-markdown-it --save</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">#          npm i hexo-autoprefixer --save</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">#          npm i  hexo-algolia --save</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token comment\">#          npm i hexo-algoliasearch --save</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">#          npm i hexo-symbols-count-time --save</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">#          npm i hexo-feed --save --egacy-peer-deps</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token comment\">#          hexo-deployer-git --save</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\"># 复制中文语言包，解决菜单英文的问题</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token comment\">#               cp zh-CN.yml node_modules/hexo-theme-next/languages/</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy hexo</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\"></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>          hexo clean</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>          hexo generate</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>          hexo deploy</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      <span class=\"token comment\"># 以下为发布到 gitee</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\">#      - name: Sync to Gitee</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token comment\">#        uses: wearerequired/git-mirror-action@master</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token comment\">#        env:</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token comment\">#          # 直接使用了 HEXO_DEPLOY_PRI</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">#          SSH_PRIVATE_KEY: $</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token comment\">#        with:</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token comment\">#          # GitHub 源仓库地址</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token comment\">#          source-repo: $</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token comment\">#          # Gitee 目标仓库地址</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token comment\">#          destination-repo: $</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token comment\">#      - name: Build Gitee Pages</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token comment\">#        uses: yanglbme/gitee-pages-action@main</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\">#        with:</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token comment\">#          # 你的 Gitee 用户名</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token comment\">#          gitee-username: $</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token comment\">#          # 注意在 Settings->Secrets 配置 GITEE_PASSWORD</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token comment\">#          gitee-password: $</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token comment\">#          # 你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">#          gitee-repo: $</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token comment\">#          # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token comment\">#          branch: $</span></pre></td></tr></table></figure><h1 id=\"八-一些坑不全\"><a class=\"markdownIt-Anchor\" href=\"#八-一些坑不全\">#</a> 八、一些坑（不全）</h1>\n<p>遇到的坑也没全填平，这里总结一下一些坑：</p>\n<ol>\n<li><strong>问题： Hexo 使用 Github Actions 自动发布至 Github Pages 时，生成的 html 页面空白，没有 css/js 等文件。</strong></li>\n</ol>\n<p><strong>原因:</strong> 由于主题是 git clone 下来的，主题目录下生成了 .git 目录，导致和 hexo 根目录下 .git 冲突了，commit 时没有把主题 push 上去导致的。</p>\n<p><strong>解决办法：</strong> 删掉主题下的.git 文件夹，重新提交，目的是把 next 主题文件夹提交上去（删掉.git 文件夹后 git commit 依然没有提交上，需要把 next 文件夹剪切出来后 git add&amp;&amp;git commit &amp;&amp;git push 后，再把 next 文件夹拷贝回来，再 git add&amp;&amp;git commit &amp;&amp;git push 就可以提交成功了）</p>\n<p>注：这里如果用 idea 的可视化按键不行（反正我的不行）。就在 idea 终端打命令。按着上面的来就行。我这里做一下记录。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> status  <span class=\"token comment\"># 查看有没有未添加的文件夹，</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> themes/shoka/   <span class=\"token comment\"># shoka 是我的主题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"shoka主题内容\"</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@github.com:dabing85/hexoBlog.git  <span class=\"token comment\"># 我是重新搭建的，这里才关联远程仓库，origin 是远程仓库名字</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-M</span> main</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin main</pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>问题：</strong> 安装插件依赖失败，说啥解析失败，<strong>npm ERR! code ERESOLVE</strong></li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1656218291887-127df319-fc78-4827-b3d9-922043b5623e.png\" alt=\"img\"></p>\n<p><strong>解决:</strong> 后面添加 --egacy-peer-deps</p>\n<p><strong>参考链接:</strong> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxOTY5MzMwL2FydGljbGUvZGV0YWlscy8xMTkxODY0MTY=\">https://blog.csdn.net/m0_51969330/article/details/119186416</span></p>\n<ol start=\"3\">\n<li><strong>问题：</strong><a href=\"https://stackoverflow.com/questions/49475492/npm-install-error-code-ebadplatform\"><strong>npm install error (code EBADPLATFORM)</strong></a> <strong>表示没有平台支持安装 fsevents</strong></li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1656225231856-d5d9bb3c-cb36-4d0f-adf7-528317c44f06.png\" alt=\"img\"></p>\n<p><strong>解决：</strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDk0NzU0OTIvbnBtLWluc3RhbGwtZXJyb3ItY29kZS1lYmFkcGxhdGZvcm0=\">npm install error (code EBADPLATFORM)</span></p>\n<p>这里我是只删除了 package-lock.json 就行了，但是还是做了警告。</p>\n<ol start=\"4\">\n<li><strong>问题：自动部署后，github pages 上的自定义域名也会被抹掉.</strong></li>\n</ol>\n<p><strong>解决:</strong> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zha2VfaHlkcmEvYXJ0aWNsZS9kZXRhaWxzLzgyNDE0OTY1\">https://blog.csdn.net/fake_hydra/article/details/82414965</span></p>\n<p>即：在 source 目录下建一个 CNAME 文件，没有后缀，里面写你的域名即可。</p>\n<h1 id=\"九-部署到服务器\"><a class=\"markdownIt-Anchor\" href=\"#九-部署到服务器\">#</a> 九、部署到服务器</h1>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njc5ODgxL2FydGljbGUvZGV0YWlscy8xMjI3MzAwNjU=\">将 Hexo 搭建到自己的服务器上</span></p>\n<p>服务器（Linux）我是全按照上面的博客来的，没啥问题。</p>\n<p>到客户端（Windows）我是新建了一个 hexoBlog 文件夹，但是内容全部复制以前 github 的源码，所以 github 上的还是起效的。</p>\n<p>直接复制有些要注意的是：</p>\n<ol>\n<li>\n<p>最好删除.git 文件（这里的.git 是原来 github 远程仓库的）</p>\n</li>\n<li>\n<p>.idea 文件夹的内容有些文件需要改，因为里面记的是原来项目的模块</p>\n<p>下面几个文件内容的项目名改成现在的，不放心可以每个都看一下替换一下。</p>\n</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220813201936397.png\" alt=\"image-20220813201936397\"></p>\n<h1 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\">#</a> 参考</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC80MjQ1M2FmMDg1M2Q=\">GitHub Actions 部署 Hexo 小结</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dic3UyMDA0L2FydGljbGUvZGV0YWlscy8xMjI2NjExMTY=\">用 GitHub Actions 自动部署 Hexo</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3JlYWQvY3YxMDAxNjA2Mi8=\">利用 GitHub Actions 自动部署 Hexo 博客 全自动运行</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njc5ODgxL2FydGljbGUvZGV0YWlscy8xMjI3MzAwNjU=\">将 Hexo 搭建到自己的服务器上</span></p>\n",
            "tags": [
                "Hexo"
            ]
        },
        {
            "id": "https://blog.dabing.cool/springcloud/springcloud/",
            "url": "https://blog.dabing.cool/springcloud/springcloud/",
            "title": "SpringCloud",
            "date_published": "2022-04-30T12:46:25.000Z",
            "content_html": "<p>作者：dabing（王甜甜）</p>\n<p>视频：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMThFNDExeDdlVD9wPTE=\">尚硅谷 2020 周阳 SpringCloud（H 版 &amp; alibaba）</span></p>\n<p>代码参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTAzMjYxL2FydGljbGUvZGV0YWlscy8xMDY1NTExMjA=\">https://blog.csdn.net/qq_36903261/article/details/106551120</span></p>\n<p>这个同学的笔记是真的完整得很！！！推荐大家一定要去给他点个赞哈哈哈哈。我只是为了给自己好复习，也做一份罢了。</p>\n<p>github 上代码地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RhYmluZzg1L3NwcmluZ2Nsb3VkMjAyMA==\">https://github.com/dabing85/springcloud2020</span></p>\n<p>gitee 上代码地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vaGVkYWJpbmcvc3ByaW5nY2xvdWQyMDIw\">https://gitee.com/hedabing/springcloud2020</span></p>\n<h1 id=\"一-springcloud简介\"><a class=\"markdownIt-Anchor\" href=\"#一-springcloud简介\">#</a> 一、SpringCloud 简介</h1>\n<p>Spring Cloud 官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC5zcHJpbmcuaW8vc3ByaW5nLWNsb3VkLXN0YXRpYy9Ib3h0b24uU1I1L3JlZmVyZW5jZS9odG1sc2luZ2xlLw==\">https://cloud.spring.io/spring-cloud-static/Hoxton.SR5/reference/htmlsingle/</span></p>\n<p>springcloud 中文文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3ByaW5nY2xvdWQuY2Mv\">https://www.springcloud.cc/</span></p>\n<p>springcloud 中国社区文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYm9va3N0YWNrLmNuL3JlYWQvc3ByaW5nLWNsb3VkLWRvY3MvZG9jcy1pbmRleC5tZA==\">https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md</span></p>\n<p>Spring Cloud 是一系列框架的有序集合。它利用 Spring Boot 的开发便利性巧妙地简化了分布式系统基础设施的开发。如服务注册发现、配置中心、消息总线、负载均衡、断路器、数据监控等等。都可以用 Spring Boot 的开发风格做到一键启动和部署。</p>\n<p>Spring Cloud 并没有重复造轮子，它知识将各家公司开发的比较成熟的、经得住实际考研的服务框架结合起来，通过 Spring Boot 风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p>\n<p>Spring Cloud 专注于为典型的用例和扩展机制提供良好的开箱即用体验，以涵盖其他情况。</p>\n<p><strong>Spring Cloud = 分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称全家桶。</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651589111001-8f8eb9d4-24a4-4b1f-8671-730a4762c7c4.png\" alt=\"img\"></p>\n<p>那这个 SpringCloud 全家桶到底有多少技术呢？看看官网的截图：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651589391868-2d5dad76-0865-4311-ab1b-6424c4fc83d9.png\" alt=\"img\"></p>\n<p>我们看看一些大厂的项目架构：</p>\n<p>京东的促销节架构：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651590026117-dddc2303-6ed8-462d-b80f-42f37240b803.png\" alt=\"img\"></p>\n<p>阿里的架构：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651590033301-0f82d685-1357-44b8-b31f-c447dc73592b.png\" alt=\"img\"></p>\n<p>京东物流的架构：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651590100019-619dc4b8-e8e1-4363-9035-64b21df80c63.png\" alt=\"img\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651590123444-30d405a3-8ceb-45a8-abb1-f61f35165698.png\" alt=\"img\"></p>\n<p>各种技术栈功能介绍:</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651590148549-848f829b-ed03-42d1-9b8c-5079e421660e.png\" alt=\"img\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651590170387-597eb9fc-af8c-4461-8862-c9cdf2d2078f.png\" alt=\"img\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651590180237-5f58ac77-4e97-484c-881a-a2b740812ab9.png\" alt=\"img\"></p>\n<p>先差不多脸熟一下上面的技术栈</p>\n<h1 id=\"二-关于版本的说明\"><a class=\"markdownIt-Anchor\" href=\"#二-关于版本的说明\">#</a> 二、关于版本的说明</h1>\n<ol>\n<li><strong>Spring Boot 的版本：</strong></li>\n</ol>\n<p>Spring Boot 的 git 源码地址：https:github.com/spring-projects/spring-boot/releases/</p>\n<p>Spring Boot 的文档说明官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWJvb3Q=\">https://spring.io/projects/spring-boot</span></p>\n<p>截至 2022/5/3 的最新版本：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651591042538-4336fc57-c06b-4ae5-a6c9-73b5b89b5275.png\" alt=\"img\"></p>\n<ol>\n<li><strong>Spring Cloud 的版本：</strong></li>\n</ol>\n<p>Spring Cloud 的 git 源码地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1jbG91ZC9zcHJpbmctY2xvdWQtcmVsZWFzZS93aWtp\">https://github.com/spring-cloud/spring-cloud-release/wiki</span></p>\n<p>Spring Cloud 的官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3Vk\">https://spring.io/projects/spring-cloud</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651591437509-17fcd643-07a8-4f61-862d-4770c6058198.png\" alt=\"img\"></p>\n<p>Spring Cloud 是以字母做为版本声明的，现在都已经到 K 版本了，周阳课程里所用的是 H 版本。为了避免一些坑，之后的练习也会先使用 H 版本来进行练习入门。🐸</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651591907468-2f7cb825-0c17-403b-9cda-dc9b5b952d2a.png\" alt=\"img\"></p>\n<ol>\n<li><strong>Spring Cloud 和 Spring Boot 之间的版本依赖：</strong></li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651591881328-99fbb0e6-9383-45bd-a8f9-004a27319138.png\" alt=\"img\"></p>\n<p>前面那串英文鸡肠的意思就是说，以你当前使用的 Spring Cloud 版本来决定你使用的 Spring boot 版本。🦤</p>\n<p>更详细的说明：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8vYWN0dWF0b3IvaW5mbw==\">https://start.spring.io/actuator/info</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651593583399-9a46b176-fd01-4e64-9d6f-d450ad4531b5.png\" alt=\"img\"></p>\n<p>一大串的，能看懂的也是个神仙了，可以用 json 串转换工具：<span class=\"exturl\" data-url=\"aHR0cDovL3Rvb2wubHU=\">tool.lu</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651594018282-92ee65c2-b91f-425a-9606-594aa6749328.png\" alt=\"img\"></p>\n<p>如 2022.0.0-M2 版本的 SpringCloud 对应的 SpringBoot 版本要在 3.0.0-M2 和 3.1.0-M1 之间</p>\n<ol>\n<li><strong>阳哥练习版本：</strong></li>\n</ol>\n<p>cloud - Hoxton.SR1</p>\n<p>boot - 2.2.RELEASE</p>\n<p>cloud - alibaba 2.1.0.RELEASE</p>\n<p>java - Java8</p>\n<p>maven - 3.5 及以上</p>\n<h1 id=\"三-关于cloud各种组件的停更升级替换\"><a class=\"markdownIt-Anchor\" href=\"#三-关于cloud各种组件的停更升级替换\">#</a> 三、关于 Cloud 各种组件的停更 / 升级 / 替换</h1>\n<p>截至 2020 年：重点学习框出来的技术</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651594917880-6d39a7ce-e4aa-43c9-9745-41639491396c.png\" alt=\"img\"></p>\n<h1 id=\"四-微服务架构编码-构建\"><a class=\"markdownIt-Anchor\" href=\"#四-微服务架构编码-构建\">#</a> 四、微服务架构编码 构建</h1>\n<p>这个就跟 spring boot 一样的啦就是搭一个架子出来先，你后面增加啥服务就一样增加，服务多了注册，多了集群，有啥异常的话有相应处理等等啊，然后给调用方调用你这些服务。巴拉巴拉的～～</p>\n<p><strong>约定 &gt; 配置 &gt; 编码</strong></p>\n<p>因此一定要把一些选型定好，把配置配好，能通再进行编码</p>\n<p>这里先创建一个父工程，把该调好的都调好，后面的练习都在这个父工程下建 module</p>\n<p><strong>父工程步骤：</strong></p>\n<blockquote>\n<ol>\n<li>New Project</li>\n<li>聚合总父工程名字</li>\n<li>Maven 选版本</li>\n<li>工程名字</li>\n<li>字符编码</li>\n<li>注解生效激活</li>\n<li>java 编译版本选 8</li>\n<li>File Type 过滤</li>\n</ol>\n</blockquote>\n<p>可以通过目录选择性的跳过～～～</p>\n<h2 id=\"1-创建父工程\"><a class=\"markdownIt-Anchor\" href=\"#1-创建父工程\">#</a> 1 - 创建父工程</h2>\n<ol>\n<li>新建一个父工程：</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651828528424-415c3741-77ac-4333-b725-f3b029f1791b.png\" alt=\"img\"></p>\n<ol>\n<li>给他起个名字：</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651828577715-12621dd6-bbad-4929-a79d-ce2ef5ad08bc.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li>选择对应的 maven 版本和本地的仓库设置</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651828630291-601361a2-b76b-4ccd-a1f3-603a4a0093f6.png\" alt=\"img\"></p>\n<ol start=\"3\">\n<li>修改编码格式</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651828941509-92458d20-4863-4248-b4a5-71a85f9b482b.png\" alt=\"img\"></p>\n<ol start=\"4\">\n<li>开启支持注解</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651828956043-e6ed4362-c3b1-4424-8ea4-96bee13241ab.png\" alt=\"img\"></p>\n<ol start=\"5\">\n<li>File Types 过滤，把.deal 文件过滤掉</li>\n</ol>\n<p>加上之后主页就看不到.idea 文件了，看着确实清爽一些</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651829142515-df411f14-f5ec-4b31-ade6-c6556d7b82a1.png\" alt=\"img\"></p>\n<ol start=\"6\">\n<li>把用不上的文件删掉，父工程不写代码，删掉 src</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651829254991-a73066ce-a3d2-4209-a34a-3b94f5d48bdd.png\" alt=\"img\"></p>\n<ol start=\"7\">\n<li>改 pom</li>\n</ol>\n<p>将父工程打包成 pom 类型</p>\n<p>至于为啥，可以参考下这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2Vuc2VuaC9wLzE1MTI2NzE1Lmh0bWw=\">https://www.cnblogs.com/sensenh/p/15126715.html</span></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651829398943-f6a46865-c101-4323-a8a4-688b0b1a1b64.png\" alt=\"img\"></p>\n<p>后面那堆没啥用的可以删掉，换成我们自己需要的依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 统一管理 jar 包版本 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.source</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>maven.compiler.target</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>junit.version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>junit.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>lombok.version</span><span class=\"token punctuation\">></span></span>1.18.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>lombok.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>log4j.version</span><span class=\"token punctuation\">></span></span>1.2.17<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>log4j.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mysql.version</span><span class=\"token punctuation\">></span></span>8.0.18<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mysql.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>druid.version</span><span class=\"token punctuation\">></span></span>1.1.20<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>druid.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mybatis.spring.boot.version</span><span class=\"token punctuation\">></span></span>1.3.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mybatis.spring.boot.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 子模块继承之后，提供作用：锁定版本 + 子 module 不用写 groupId 和 version--></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token comment\">&lt;!--spring boot 2.2.2--></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.2.2.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token comment\">&lt;!--spring cloud Hoxton.SR1--></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>Hoxton.SR1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">&lt;!--spring cloud alibaba--></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-alibaba-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1.0.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token comment\">&lt;!--mysql--></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;mysql.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token comment\">&lt;!-- druid--></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;druid.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token comment\">&lt;!--mybatis--></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis.spring.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;mybatis.spring.boot.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token comment\">&lt;!--junit--></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;junit.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token comment\">&lt;!--log4j--></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>log4j<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;log4j.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fork</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fork</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>addResources</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>addResources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这里：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651829729934-8af9661e-e694-4f88-9853-e18339a107d7.png\" alt=\"img\"></p>\n<p>我的爆红了，说是找不到这个版本的依赖，我就换了一个版本，有一个换了一个版本就行了。</p>\n<p>但这个德鲁伊好顽强，换了好多个版本都不行，我就让朋友给了一份 jar 放进去的，后来我不管他他就好了，很奇怪。😑</p>\n<h2 id=\"2-maven工程细节\"><a class=\"markdownIt-Anchor\" href=\"#2-maven工程细节\">#</a> 2-Maven 工程细节</h2>\n<ol>\n<li><strong>Maven 中的 DependencyManagement 和 Dependencies：</strong></li>\n</ol>\n<p>Maven 使用 dependencyManagement 元素来提供了一种管理依赖版本号的方式。</p>\n<p>通常会在一个组织或者项目的最顶层的 <code>父POM</code>  中看到 dependencyManagement 元素。</p>\n<p>这样不用在多个子项目里面声明多次一个版本号，想统一升级的话就可以直接在父 pom 那修改就行了。</p>\n<p><strong>(子项目指定版本就用自己的，不指定就往上找)</strong></p>\n<p>Maven 会沿着父子层次向上走，直到找到一个拥有 dependencyManagement 元素的项目，然后它就会使用这个 dependencyManagement 元素中指定的版本号。</p>\n<p>像下面这样：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651830751710-a3e5ca0a-1ce8-49bf-a596-6cad4fe2936e.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li><strong>maven 中跳过单元测试</strong></li>\n</ol>\n<p>点这个小闪电就可以啦</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651830861157-533dbab3-6eee-4367-b44d-bb72abeafb19.png\" alt=\"img\"></p>\n<h2 id=\"3-子项目-rest微服务工程搭建\"><a class=\"markdownIt-Anchor\" href=\"#3-子项目-rest微服务工程搭建\">#</a> 3 - 子项目 Rest 微服务工程搭建</h2>\n<p>创建 module 五步：</p>\n<ol>\n<li><strong>建 module</strong></li>\n<li><strong>改 pom</strong></li>\n<li><strong>写 yml</strong></li>\n<li><strong>主启动</strong></li>\n<li><strong>业务类</strong>（这里是我们一般平时干的活了，当然包括数据库、dao 层、server 层、controller 层等啦～～）</li>\n</ol>\n<p>每一次都这么干就行了</p>\n<h3 id=\"1-创建-cloud-provider-payment8001-微服务提供者module模块\"><a class=\"markdownIt-Anchor\" href=\"#1-创建-cloud-provider-payment8001-微服务提供者module模块\">#</a> 1. 创建 cloud-provider-payment8001 微服务提供者 Module 模块</h3>\n<p>这个模块实现支付</p>\n<p><strong>第一步：建 module</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651831699278-3c0d11ec-72a8-438e-9cac-92083b2e54ed.png\" alt=\"img\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651831816043-004605bf-f915-4d59-9278-c2c334d5f8dc.png\" alt=\"img\"></p>\n<p><strong>第二步：改 pom</strong></p>\n<p>先看看父 pom 有什么改变</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651843470984-d87ef766-2c0f-4aa7-9072-f49a9658915b.png\" alt=\"img\"></p>\n<p>改 pom，添加子项目所需的依赖</p>\n<p>spring boot、mybatis、druid、jdbc、mysql、devtools、lombok…</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-actuator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis.spring.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.18<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 子工程写了版本号，就使用子工程的版本号，如果没写版本，找父工程中规定的版本号 --></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">&lt;!--mysql-connector-java--></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">&lt;!--jdbc--></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 热部署 --></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-devtools<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>第三步：写 yml</strong></p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#微服务建议一定要写服务端口号和微服务名称</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">#端口号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8001</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">#微服务名称</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>payment<span class=\"token punctuation\">-</span>service</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">#数据库配置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">#mysql5.x 的没有 cj</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">#记得先创建数据库</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/cloud2020<span class=\"token punctuation\">?</span>useUnicode=true<span class=\"token important\">&amp;characterEncoding=utf-8&amp;useSSL=false</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#mybatis 配置</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token key atrule\">mybatis</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token key atrule\">mapper-locations</span><span class=\"token punctuation\">:</span> classpath<span class=\"token punctuation\">:</span>mapper/<span class=\"token important\">*.xml</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token key atrule\">type-aliases-package</span><span class=\"token punctuation\">:</span> com.dabing.springcloud.entities  <span class=\"token comment\">#所有 Entity 别名类所在包</span></pre></td></tr></table></figure><p><strong>第四步：主启动类</strong></p>\n<p>在 java 文件夹下创建类：com.dabing.springcloud.PaymentMain8001</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PaymentMain8001</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PaymentMain8001</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>第五步：业务类</strong></p>\n<ol>\n<li><strong>数据库</strong></li>\n</ol>\n<p><strong>idea 上连接一下 mysql</strong></p>\n<p>输入账户密码，如 账号 root 密码 123456</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651845310071-65038235-0e1e-4374-a339-cec61ff59af3.png\" alt=\"img\"></p>\n<p><strong>建表：</strong></p>\n<p>连上之后右键</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651845857843-cdae7948-cd2f-4c92-a784-04edccf6ffa3.png\" alt=\"img\"></p>\n<p>在 console 窗口写 sql 语句</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">database</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> cloud2020 <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> cloud2020<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">use</span> cloud2020<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> payment<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>payment<span class=\"token punctuation\">`</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">BIGINT</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'订单号'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>serial<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'订单流水'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">INNODB</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> payment<span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>serial<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"652916232232\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>全部选中执行，即可</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651846485148-619348f7-15bd-432d-a22d-d917fbdf44a7.png\" alt=\"img\"></p>\n<p>呐，执行之后就有数据啦～～</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651846508672-28c143ca-c444-445f-8c28-4cca7f849f83.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li><strong>entities 实体类</strong></li>\n</ol>\n<p>第一个表的实体类 Payment</p>\n<p>第二个需要有返回的统一的类 CommonResult（json 封装体，传给前端的）<br>\n在 springcloud 包下新建实体类 entities.Payment 和 CommonResult</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这三个注解是 lombok 的，除了导入依赖，idea 还需要安装插件（具体操作问度娘）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span>   <span class=\"token comment\">//set/get 方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span> <span class=\"token comment\">// 有参构造器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span>  <span class=\"token comment\">// 无参构造器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Payment</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serial<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 返回给前端的通用 json 数据串</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span>   <span class=\"token comment\">//set/get 方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span> <span class=\"token comment\">// 有参构造器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span>  <span class=\"token comment\">// 无参构造器</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 泛型，对应类型的 json 数据</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 自定义两个参数的构造方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 当返回数据错误时，data 可以为空</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CommonResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>dao</strong></li>\n</ol>\n<p>在 springcloud 包下新建 Dao.PaymentDao 接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PaymentDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 增</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Payment</span> payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 查     加上 @Param 注解，mapper 中就可以采用 #&#123;&#125; 的方式把 @Param 注解括号内的参数进行引用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Payment</span> <span class=\"token function\">getPaymentById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 这里用增和查进行演示，有兴趣的可以自己加其他的方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><strong>mapper</strong></li>\n</ol>\n<p>在 resources 目录下新建 mapper 目录，然后新建 PaymentMapper.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span> <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.dabing.springcloud.Dao.PaymentDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>BaseResultMap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.angenin.springcloud.entities.Payment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">jdbcType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>BIGINT<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>serial<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>serial<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">jdbcType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>VARCHAR<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">&lt;!--  增  --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">&lt;!--  Payment 标红了不用管，因为我们已经在 yml 文件中指定了 Payment 的位置了  --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>insert</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>create<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Payment<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">useGeneratedKeys</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">keyProperty</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        insert into payment(serial)values(#&#123;serial&#125;);</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>insert</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">&lt;!--  查  --></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 返回用 resultMap，防止命名不规范 --></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getPaymentById<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Long<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>BaseResultMap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        select * from payment where id=#&#123;id&#125;;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"5\">\n<li><strong>service</strong></li>\n</ol>\n<p>在 springcloud 包下新建 service.PaymentService 接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PaymentService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Payment</span> payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Payment</span> <span class=\"token function\">getPaymentById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 service 包下新建 impl.PaymentServiceIpml 实现类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PaymentServiceIpml</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">PaymentService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span>   <span class=\"token comment\">//@Autowired 也可以</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PaymentDao</span> paymentDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Payment</span> payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> paymentDao<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Payment</span> <span class=\"token function\">getPaymentById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> paymentDao<span class=\"token punctuation\">.</span><span class=\"token function\">getPaymentById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li><strong>controller</strong></li>\n</ol>\n<p>在 springcloud 包下新建 controller.PaymentController</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span>  <span class=\"token comment\">// 日志</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PaymentController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PaymentService</span> paymentService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 前后端分离，所以不能直接返回对象，数据要先经过 CommonResult 封装再返回</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/payment/create\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CommonResult</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Payment</span> payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> paymentService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"******插入的数据为：\"</span> <span class=\"token operator\">+</span> payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"******插入结果：\"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 插入成功</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"插入数据库成功\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">444</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"插入数据库失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/payment/get/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CommonResult</span> <span class=\"token function\">getPaymentById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Payment</span> payment <span class=\"token operator\">=</span> paymentService<span class=\"token punctuation\">.</span><span class=\"token function\">getPaymentById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"******查询结果：\"</span> <span class=\"token operator\">+</span> payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>payment <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 查询成功</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"查询成功\"</span><span class=\"token punctuation\">,</span> payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">444</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"没有对应记录，查询ID：\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li><strong>测试</strong></li>\n</ol>\n<p>启动下主启动类：某问题</p>\n<p>get 请求 <code>http://localhost:8001/payment/get/1</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651849111872-c70cbe54-7a79-4590-a9da-58095e7d452b.png\" alt=\"img\"></p>\n<p>因为浏览器一般不支持直接发送 post 请求，所以，需要使用工具进行测试。(如 jmeter、postman（图形化）、curl（命令）等)</p>\n<p>我这里用的 postman，但我没用过，可以参考这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzYxODQzODc0L2FydGljbGUvZGV0YWlscy8xMjMzMjQ3Mjc=\">https://blog.csdn.net/m0_61843874/article/details/123324727</span></p>\n<p>测试 GET 请求： <code>http://localhost:8001/payment/get/1</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651849806117-92412fd8-2481-4745-ac30-5239e581af78.png\" alt=\"img\"></p>\n<p>测试 POST 请求： <code>localhost:8001/payment/create</code></p>\n<p>步骤：<br>\n1、选择请求的方式<br>\n 2、填写请求的 URL 地址<br>\n 3、选择 Body 面板并勾选数据格式<br>\n 4、填写要发送到服务器的数据<br>\n 5、点击 Send 按钮发起 POST 请求<br>\n 6、查看服务器响应的结果</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651850208898-85ea9506-29bf-48c5-b532-74e8e89d9737.png\" alt=\"img\"></p>\n<h3 id=\"2-热部署devtools\"><a class=\"markdownIt-Anchor\" href=\"#2-热部署devtools\">#</a> 2. 热部署 Devtools</h3>\n<p>使用热部署让我们每次改动代码的时候不用重启项目。方便调试</p>\n<p>但是这个就在开发阶段用就好了。</p>\n<ol>\n<li>Adding devtools to your project</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-devtools<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>Adding plugin to your pom.xml</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fileName</span><span class=\"token punctuation\">></span></span>你自己的工程名字<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fileName</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fork</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>fork</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>addResources</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>addResources</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>Enabling automatic build</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651914399375-4dc10021-eb1a-44e0-b3f3-a87b2c6bb3bf.png\" alt=\"img\"></p>\n<ol start=\"5\">\n<li>Update the value of</li>\n</ol>\n<p>按 <code>ctrl+shift+Alt+/ </code> 进入  <code>Registry</code> <img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651914853068-ed738339-9926-4cbb-b943-2a607e01c04b.png\" alt=\"img\"></p>\n<p>我这边找不到那个 compiler.automake… 那个，然后好像也可以正常诶。</p>\n<ol start=\"6\">\n<li>重启 idea</li>\n</ol>\n<p>测试一下，在代码里添加字段，不用重启，代码内容生效</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651914817005-795f9cc8-9ed3-4365-8daf-9c1ef1c701b4.png\" alt=\"img\"></p>\n<h3 id=\"3-创建-cloud-consumer-order80-微服务消费者订单module模块\"><a class=\"markdownIt-Anchor\" href=\"#3-创建-cloud-consumer-order80-微服务消费者订单module模块\">#</a> 3. 创建  cloud-consumer-order80  微服务消费者订单 Module 模块</h3>\n<p>跟上边一样的，还是那五步，再来一遍：1. 建 module  2. 改 pom   3. 写 yml   4. 主启动   5. 业务类</p>\n<p>这里要说下为啥使用 80 端口呢？</p>\n<p><strong>80 端口</strong>是为 HTTP（HyperText Transport Protocol) 即超文本传输协议开放的，此为上网冲浪使用次数最多的协议，主要用于 WWW（World Wide Web）即万维网传输信息的协议。</p>\n<p>可以通过 HTTP 地址（即常说的 “网址”）加 **“: 80”<strong> 来访问网站，因为浏览网页服务</strong>默认的端口号 ** 都是 80，因此只需输入网址即可，<strong>不用输入 “: 80” 了</strong>。</p>\n<p><strong>pom.xml(cloud-consumer-order80)</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-actuator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>application.yml</strong></p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr></table></figure><p><strong>主启动类：ConsumerMain80</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerMain80</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerMain80</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>业务类</strong></p>\n<ol>\n<li>entities</li>\n</ol>\n<p>跟前面 8001 一样的实体类，Payment 和 CommonResult 类</p>\n<p>这里直接拷贝过来就好。</p>\n<p>因为都是共同的类，后面工程重构，会把这两个类提取出来，防止代码冗余。</p>\n<ol start=\"2\">\n<li>controller</li>\n</ol>\n<p>因为这个 80 是消费者，直接去调用人家 8001 端口的服务，就不用写自己的 server 层了，直接调用别人即可。</p>\n<p>但是嘞，你去调别人的服务肯定不能直接调呀，得借助点工具，使用 <code>RestTemplate</code> ，这玩意的作用，就是：<strong>简化了发起 HTTP 请求以及处理响应的过程，并且支持 REST</strong></p>\n<p>RestTemplate 的使用可以参考这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTM4MDk3L2FydGljbGUvZGV0YWlscy8xMjM1NjAyMzg=\">https://blog.csdn.net/qq_41538097/article/details/123560238</span></p>\n<p>要使用，得先注入 bean，这里用一个配置类进行注入：</p>\n<p>在 springcloud 包下新建 config.ApplicationContextConfig</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationContextConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 往容器中添加一个 RestTemplate</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//RestTemplate 提供了多种便捷访问远程 http 访问的方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>restTemplate.postForObject (…) 方法里参数出现了的 <code>@Nullable</code>  注解，它的大概作用是<strong>提示给代码编译这里可能会出现空值</strong></p>\n<p>在 springcloud 包下新建 controller.OrderController</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">PAYMENT_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"http://localhost:8001\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 因为浏览器只支持 get 请求，为了方便这里就用 get</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/consumer/payment/create\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CommonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Payment</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Payment</span> payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"********插入的数据：\"</span> <span class=\"token operator\">+</span> payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//postForObject 分别有三个参数：请求地址，请求参数，返回的对象类型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">postForObject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PAYMENT_URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/payment/create\"</span><span class=\"token punctuation\">,</span> payment<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CommonResult</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/consumer/payment/get/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CommonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Payment</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getPayment</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"********查询的id：\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//getForObject 两个参数：请求地址，返回的对象类型</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PAYMENT_URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/payment/get/\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CommonResult</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>测试</strong></p>\n<p>启动 80 和 8001 端口</p>\n<p>测试查询： <code>http://localhost/consumer/payment/get/3</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1652148596024-e32573d7-5043-4565-a8c0-03f48f0fd29e.png\" alt=\"img\"></p>\n<p>测试插入： <code>http://localhost/consumer/payment/create?serial=112233</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1652148838855-83f95a90-a732-4f9a-bddd-ba4f4bb35b13.png\" alt=\"img\"></p>\n<p><strong>Tips - 开启 run DashBoard</strong>💡</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1652266658030-d26c9c23-6ec5-4f7e-b780-1e34e25e0293.png\" alt=\"img\"></p>\n<p>看哈，这里起了两个服务，它就是两个窗口，那很多服务咋办嘞，那岂不是很多窗口，很不方便。</p>\n<p>这里我们可以启动 run DashBoard 工具（如果本身就有，当我没说）我一开始也是没有的。（可以到百度下，很多教程～～）</p>\n<p>我没做什么操作，我就是打开这个 workspace.xml 文件，idea 右下角就自动弹出是否开始巴拉巴拉服务的提示了，点击了是就有了，很神奇。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1652267441110-36317900-85c0-4574-a0f6-63f41fd6cc51.png\" alt=\"img\"></p>\n<p>开启之后长这样：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1652267629793-45e68bf4-6a67-4935-bd09-b928c3202692.png\" alt=\"img\"></p>\n<h3 id=\"4-工程重构\"><a class=\"markdownIt-Anchor\" href=\"#4-工程重构\">#</a> 4. 工程重构</h3>\n<p>因为 80 端口和 8001 端口有公共的部分，Payment 类和返回给前端的 CommonResult 类。</p>\n<p>以后服务多了，每个服务都写一次代码复用性差，所以这里把公共的类提取出来，放在一个新的服务里去，这个公共的服务达成 jar，别的服务引入 jar 包即可使用。</p>\n<ol>\n<li>\n<p><strong>新建新工程</strong> -  cloud-api-commons</p>\n</li>\n<li>\n<p><strong>改 pom.xml</strong>  - 我这里只加了一个 lombok 的依赖，不作展示了</p>\n</li>\n<li>\n<p><strong>把 80 端口的 entities 包下的 Payment 和 CommonResult 类拷贝过来</strong></p>\n</li>\n<li>\n<p><strong>清除 + 打包（clean+install</strong>）---- 右侧的 mvean–找到对应的服务 — 生命周期点开 — 先清除 clean，再 install</p>\n</li>\n</ol>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1652351613896-a48059ad-09bd-4611-b7dd-d9300bbc012c.png\" alt=\"img\"></p>\n<p><strong>这里提一下：💡</strong></p>\n<p>如果在 install 的时候报了类似这样的错误：maven 的 xx 插件：xx 版本，没有注入成功，找不到类异常。。。。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1652351797495-6686f540-1312-44eb-879c-f6af8470741d.png\" alt=\"img\"></p>\n<p>** 解决：** 这类是 maven 插件的版本问题，我这里是全把报错的版本都改成了最新的版本就好了。</p>\n<p>即在 pom.xml 里添加：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 因为我这里三个插件都报错了，这里懒得删了都粘过来 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-resources-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>encoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>encoding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-compiler-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.maven.plugins<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-install-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.5.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol>\n<li><strong>引用包</strong></li>\n</ol>\n<p>在 <code>80</code>  端口和 <code>8001</code>  端口引用这个 <code>cloud-api-commons</code>  这个 jar 包</p>\n<p>先删除 80 端口，8001 端口的公共类，pom.xml 引入 jar 包</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.dabing<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cloud-api-commons<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>测试</strong></li>\n</ol>\n<p>测试查询： <code>http://localhost/consumer/payment/get/1</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1652353834119-6cd3973e-3993-413e-9ed9-a162db5883ee.png\" alt=\"img\"></p>\n<p>测试新增数据： <code>http://localhost/consumer/payment/create?serial=12345678</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1652353903032-85714904-c846-4ab4-97fe-e70c86d50f94.png\" alt=\"img\"></p>\n<h1 id=\"五-eureka服务注册与发现\"><a class=\"markdownIt-Anchor\" href=\"#五-eureka服务注册与发现\">#</a> 五、Eureka 服务注册与发现</h1>\n<h2 id=\"1-eureka基础知识\"><a class=\"markdownIt-Anchor\" href=\"#1-eureka基础知识\">#</a> 1- Eureka 基础知识</h2>\n<p>文字有些多，耐心看！！🐻‍❄️</p>\n<p>** 举个例子：** 就是像你要去培训机构上课，这个培训机构叫做 <code>sgg</code> ，他的地址在 <code>松山湖科技园</code> （我瞎说的），sgg 得先在松山湖科技园的 <code>物业管理处</code> （就相当于 Eureka Server 注册中心）注册登记入驻科技园，管理处登记你 sgg 的信息和入驻地址。</p>\n<p>然后学生要去上课，就去物业管理处去查拿着这个 sgg 的名字去查地址进行教学服务调用。</p>\n<p><strong>什么是服务治理？</strong></p>\n<p>Spring Cloud 封装了 Netflix 公司开发的 Eureka 模块来实现服务治理</p>\n<p>在传统的  <code>rpc 远程调用</code> 框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务与服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p>\n<p><strong>什么是服务注册与发现？</strong></p>\n<p>Eureka 采用了 CS 的设计架构，Eureka Server 作为服务注册功能的服务器，它是 <code>服务注册中心</code> 。而系统中的其他微服务，使用 Eureka 的客户端连接到 Eureka Server 并维持心跳连接。这样系统的维护人员就可以通过 Eureka Server 来监控系统中各个微服务是否正常运行。</p>\n<p>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息比如服务地址通讯地址等以别名方式注册到注册中心上。另一方（消费者服务提供者)，以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地 RPC 调用 RPC 远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系（服务治理概念）。在任何  <code>rpc</code>  远程框架中，都会有一个注册中心（存放服务地址相关信息（接口地址））</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1651635456352-c57c9870-9bed-4bf0-82d1-906f6e216360.png\" alt=\"img\"></p>\n<p><strong>Eureka 两组件？</strong></p>\n<p><strong>Eureka 包含两个组件：Eureka Server 和 Eureka Client</strong></p>\n<p><code>Eureka Server</code> <strong> 提供服务注册服务</strong></p>\n<p>各个微服务节点通过配置启动后，会在 Eureka Server 中进行注册，这样 Eureka Server 中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</p>\n<p><code>Eureka Client</code> <strong> 通过注册中心进行访问</strong></p>\n<p>是一个 Java 客户端，用于简化 Eureka Server 的交互，客户端同时也具备一个内置的、使用轮询 (round-robin) 负载算法的负载均衡器。在应用启动后，将会向 Eureka Server 发送心跳（默认周期为 30 秒）。如果 Eureka Server 在多个心跳周期内没有接收到某个节点的心跳，Eureka Server 将会从服务注册表中把这个服务节点移除（默认 90 秒）</p>\n<h2 id=\"2-单机eureka构建步骤\"><a class=\"markdownIt-Anchor\" href=\"#2-单机eureka构建步骤\">#</a> 2 - 单机 Eureka 构建步骤</h2>\n<h3 id=\"1-eurekaserver端服务注册中心构建-类似物业公司\"><a class=\"markdownIt-Anchor\" href=\"#1-eurekaserver端服务注册中心构建-类似物业公司\">#</a> 1. EurekaServer 端服务注册中心构建   类似物业公司</h3>\n<p>还是新建 moudle 的一般步骤：</p>\n<ol>\n<li><strong>建 module  -</strong> <strong>cloud-eureka-server7001</strong></li>\n<li><strong>改 pom   - 引入 eureka-server 服务端依赖</strong></li>\n<li><strong>写 yml    - 指定端口号、eureka 相关</strong></li>\n<li><strong>主启动类  - @EnableEurekaServer 指明是服务注册中心</strong></li>\n<li><strong>业务类      - 无</strong></li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">&lt;!--springboot--></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-actuator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">&lt;!--Eureka--></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-eureka-server<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7001</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">instance</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> localhost   <span class=\"token comment\">#eureka 服务端的实例名称</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">#表示是否向注册中心注册（自己本身就是注册中心，不是服务，没必要注册，这里 false）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">register-with-eureka</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">#flase 表示自己端就是注册中心，职责是维护服务实例，并不需要去检索服务</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">fetch-registry</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">#设置与 eurekaServer 交互的地址查询服务和注册服务都需要依赖这个地址</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//$<span class=\"token punctuation\">&#123;</span>eureka.instance.hostname<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">:</span>$<span class=\"token punctuation\">&#123;</span>server.port<span class=\"token punctuation\">&#125;</span>/eureka/</pre></td></tr></table></figure><p>注意 yaml 格式， <code>:</code>  后面是有空格的，别粗心大意了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaServer</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EurekaMain7001</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EurekaMain7001</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试： <code>http://localhost:7001/</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1652356725864-e2541b3c-633e-42a7-b8b3-5a5eb75cff9d.png\" alt=\"img\"></p>\n<h3 id=\"2-eurekaclient端cloud-provider-payment8001-类似于教育机构\"><a class=\"markdownIt-Anchor\" href=\"#2-eurekaclient端cloud-provider-payment8001-类似于教育机构\">#</a> 2. EurekaClient 端 cloud-provider-payment8001  类似于教育机构</h3>\n<p>8001 端口的这个支付服务，将注册进 EurekaServer 成为服务提供者 provider, 类似于学校对外提供授课服务</p>\n<h3 id=\"3-eurekaclient端cloud-consumer-order80-类似于学生\"><a class=\"markdownIt-Anchor\" href=\"#3-eurekaclient端cloud-consumer-order80-类似于学生\">#</a> 3. EurekaClient 端 cloud-consumer-order80  类似于学生</h3>\n<p>80 端口的这个消费者，将注册进 EurekaServer 成为服务消费者 consumer, 类似于学校上课消费的各位同学</p>\n<p>如何操作？</p>\n<p><strong>改 pom</strong> - 添加  <code>spring-cloud-starter-netflix-eureka-client</code>  依赖</p>\n<p><strong>改 yml</strong> - 指定 spring 应用名字（即为显示在 eureka 注册中心上的名字），eureka 配置（指定是否注册、注册地址）</p>\n<p><strong>改主启动类</strong> - 添加  <code>@EnableEurekaClient</code>  注解</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-eureka-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>#配置微服务名称</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>spring:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  application:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    name: cloud-consumer-order</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>#eureka配置</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>eureka:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  client:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    register-with-eureka: true  #true 表示自己要注册到服务中心</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    fetch-registry: true        #true 表示自己要去检索下有没有其他的服务可用</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    service-url:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      defaultZone: http://localhost:7001/eureka/</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>@EnableEurekaClient</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>@SpringBootApplication</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>public class ConsumerMain80 &#123;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    public static void main(String[] args) &#123;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        SpringApplication.run(ConsumerMain80.class);</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>** 测试：** 刷新下刚刚那个 eureka 注册中心</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1652403129396-4a87519d-5b49-4d3b-8465-5379d1413d9f.png\" alt=\"img\"></p>\n<h2 id=\"3-集群eureka构建步骤\"><a class=\"markdownIt-Anchor\" href=\"#3-集群eureka构建步骤\">#</a> 3 - 集群 Eureka 构建步骤</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654068766302-234eccf1-9a23-4018-87ef-cfb67ceb5fc6.png\" alt=\"img\"></p>\n<p>** 解决方法：** 搭建 Eureka 注册中心集群，实现负载均衡 + 故障容错</p>\n<h3 id=\"1-再构建两个注册中心\"><a class=\"markdownIt-Anchor\" href=\"#1-再构建两个注册中心\">#</a> 1. 再构建两个注册中心</h3>\n<p>仿照 cloud-eureka-server7001 创建一个 cloud-eureka-server7002</p>\n<p>一样的步骤：建 module、写 pom、改 yml、主启动类、业务类</p>\n<p>之后要修改主机的 hosts 文件，在 <code>C:\\Windows\\System32\\drivers\\etc</code>  路径下</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654070787462-2a65ad8e-d50d-4dad-a928-33304c7e6f07.png\" alt=\"img\"></p>\n<p>在最后一行加上这三行。</p>\n<p>修改这三个注册中心的 yml 文件:</p>\n<p><strong>cloud-eureka-server7001 的 yml 文件：</strong></p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7001</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">instance</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> eureka7001.com  <span class=\"token comment\">#eureka 服务端的实例名称</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">register-with-eureka</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">fetch-registry</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">#      单机</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">#      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\">#集群版  相互注册，相互守望</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//eureka7002.com<span class=\"token punctuation\">:</span>7002/eureka/<span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">:</span>//eureka7003.com<span class=\"token punctuation\">:</span>7003/eureka/</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#    defaultZone 是固定写法，如果想自定义，需要按以下写法才行：</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#    region: eureka-server</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#    availability-zones:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#      eureka-server: server1,server2</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#    service-url:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#      server1: http://eureka7002.com:7002/eureka/</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">#      server2: http://eureka7003.com:7003/eureka/</span></pre></td></tr></table></figure><p><strong>cloud-eureka-server7002 的 yml 文件：</strong></p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7002</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>eureka<span class=\"token punctuation\">-</span>server2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">instance</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> eureka7002.com  <span class=\"token comment\">#eureka 服务端的实例名称</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">register-with-eureka</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">fetch-registry</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">#集群版  相互注册，相互守望</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//eureka7001.com<span class=\"token punctuation\">:</span>7001/eureka/<span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">:</span>//eureka7003.com<span class=\"token punctuation\">:</span>7003/eureka/ <span class=\"token comment\">#相互注册，相互守望</span></pre></td></tr></table></figure><p><strong>cloud-eureka-server7003 的 yml 文件：</strong></p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7003</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>eureka<span class=\"token punctuation\">-</span>server3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">instance</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> eureka7003.com  <span class=\"token comment\">#eureka 服务端的实例名称</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">register-with-eureka</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">fetch-registry</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">#集群版  相互注册，相互守望</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//eureka7001.com<span class=\"token punctuation\">:</span>7001/eureka/<span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">:</span>//eureka7002.com<span class=\"token punctuation\">:</span>7002/eureka/ <span class=\"token comment\">#相互注册，相互守望</span></pre></td></tr></table></figure><p>启动这三个注册中心 looklook。。。。分别长这样：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654074142796-40490d82-f0d5-4f30-b0a2-cf2075811239.png\" alt=\"img\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654074193327-c84713ba-9ede-4e09-b487-8dbc8368e81d.png\" alt=\"img\"><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654074230702-b54827af-6c08-485c-bfd1-d813b9011418.png\" alt=\"img\"></p>\n<h3 id=\"2-将服务发布到集群配置\"><a class=\"markdownIt-Anchor\" href=\"#2-将服务发布到集群配置\">#</a> 2. 将服务发布到集群配置</h3>\n<p>EurekaClient 端 cloud-provider-payment8001  类似于教育机构</p>\n<p>EurekaClient 端 cloud-consumer-order80  类似于学生</p>\n<p>原本这两个服务是注册到单机 7001 注册中心的，现在要注册到三个注册中心去。</p>\n<p>他们的配置文件中的 defaultZone 改为：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//eureka7001.com<span class=\"token punctuation\">:</span>7001/eureka<span class=\"token punctuation\">,</span>http<span class=\"token punctuation\">:</span>//eureka7002.com<span class=\"token punctuation\">:</span>7002/eureka<span class=\"token punctuation\">,</span>http<span class=\"token punctuation\">:</span>//eureka7003.com<span class=\"token punctuation\">:</span>7003/eureka</pre></td></tr></table></figure><p>启动 5 个项目进行测试：（先要启动 EurekaServer 集群，再启动服务提供者 provider,8001，最后启动消费者，80）</p>\n<p>集群后台截图：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654075323510-98f36b32-a1ca-4b21-b1ff-962d7f1bd0da.png\" alt=\"img\"></p>\n<p>访问下消费者 80 端口的是否正常使用 8001 的功能：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9jb25zdW1lci9wYXltZW50L2dldC8x\">http://localhost/consumer/payment/get/1</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654075602931-445cc8ac-e0e1-4be6-88af-549616c16ac8.png\" alt=\"img\"></p>\n<h3 id=\"3-构建支付服务提供者集群环境\"><a class=\"markdownIt-Anchor\" href=\"#3-构建支付服务提供者集群环境\">#</a> 3. 构建支付服务提供者集群环境</h3>\n<p>提供的服务也要集群，按照 8001 新建 8002 。（除了要 yml 文件中需要改端口号和主配置类，其他直接复制 8001 的，yml 文件中的应用名不需要改，因为 8001 和 8002 对外暴露的服务名是一样的，所以应用名需要一致）</p>\n<p>80 是调用方，不需要集群。</p>\n<p>80 去调用支付服务的时候，有 8001 和 8002，而注册中心提供的是一样的服务名，那怎么知道到底调用的是哪个服务呢？如下：</p>\n<p><strong>在微服务提供方</strong>，在其 controller 层打印对应的端口号：</p>\n<p>@Value (&quot;${server.port}&quot;) 用这个注解就可以读取到配置文件里的端口号</p>\n<p>8001 和 8002 的 controller 文件改成下面这样，打印出对应的端口号。没有全部复制，别盲目复制粘贴</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;server.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/payment/get/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">CommonResult</span> <span class=\"token function\">getPaymentById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Payment</span> payment <span class=\"token operator\">=</span> paymentService<span class=\"token punctuation\">.</span><span class=\"token function\">getPaymentById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"******查询结果：\"</span> <span class=\"token operator\">+</span> payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>payment <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 查询成功</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"查询成功,serverPort:\"</span><span class=\"token operator\">+</span>serverPort<span class=\"token punctuation\">,</span> payment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">444</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"没有对应记录，查询ID：\"</span><span class=\"token operator\">+</span> id <span class=\"token operator\">+</span><span class=\"token string\">\"  serverPort:\"</span><span class=\"token operator\">+</span>serverPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>对于 80 调用方，做两件事：</strong></p>\n<ol>\n<li>之前的 80 调用方已经写死了服务端口名是 8001，那 8002 就没有用了，所以这里要把 controller 层的 url 改成服务名：public static final String <em>PAYMENT_URL</em> = “<span class=\"exturl\" data-url=\"aHR0cDovL0NMT1VELVBBWU1FTlQtU0VSVklDRQ==\">http://CLOUD-PAYMENT-SERVICE</span>”;</li>\n<li>在 restTempate 的配置类里加上 @LoadBalanced 注解赋予 RestTemplate 负载均衡的能力</li>\n</ol>\n<p>默认的是<strong>轮询的负载均衡机制</strong></p>\n<p>具体代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//public final static String PAYMENT_URL=\"http://localhost:8001\";</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">PAYMENT_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"http://CLOUD-PAYMENT-SERVICE\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 下面的代码跟原来一样。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationContextConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 往容器中添加一个 RestTemplate</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//RestTemplate 提供了多种便捷访问远程 http 访问的方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@LoadBalanced</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>测试：</strong></p>\n<p>先要启动 EurekaServer，集群注册中心，再要启动服务提供者 provider,8001/8002 服务，最后启动 80 调用方。</p>\n<p>测试查询： <code>http://localhost/consumer/payment/get/3</code></p>\n<p>刷新会发现两个端口的服务轮流提供服务。8001/8002 端口交替出现</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654080307890-747ffefb-153e-404a-8122-6afcf638e5f3.png\" alt=\"img\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654080357026-a3f5b621-b332-413c-bf08-b2c90e3b9073.png\" alt=\"img\"></p>\n<p>注册中心集群后台：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654081122296-9589282e-5279-464e-a773-e623b1a1b162.png\" alt=\"img\"></p>\n<p>Ribbon 和 Eureka 整合后 Consumer 可以直接调用服务而不用再关心地址和端口号，且该服务还有负载功能了.</p>\n<p>看依赖包可以看到 Eureka 包下有集成 Ribbon 的包。</p>\n<p>对于 Ribbon 的文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xYmQ2NmRiNWRjNDY=\">https://www.jianshu.com/p/1bd66db5dc46</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654081871122-67fecbac-ea87-427f-8b04-936458c511f2.png\" alt=\"img\"></p>\n<p>[</p>\n<p>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xYmQ2NmRiNWRjNDY=\">https://www.jianshu.com/p/1bd66db5dc46</span>)</p>\n<h2 id=\"4-actuator微服务信息完善\"><a class=\"markdownIt-Anchor\" href=\"#4-actuator微服务信息完善\">#</a> 4-actuator 微服务信息完善</h2>\n<h3 id=\"1-主机名称服务名称修改\"><a class=\"markdownIt-Anchor\" href=\"#1-主机名称服务名称修改\">#</a> 1. 主机名称：服务名称修改</h3>\n<p>** 问题提出 ：** 如图，服务的 ip 也给显示出来了。希望改成只含服务名。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654152801338-ca4d184b-671f-41fd-9b99-88409e930493.png\" alt=\"img\"></p>\n<p><strong>修改方式：</strong></p>\n<p>在 8001 服务的 yml 文件添加上，在 eureka 的配置上添加，不知道对齐谁可以往下滑滑，下面有完整的 eureka 的配置。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#eureka 配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">instance</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">instance-id</span><span class=\"token punctuation\">:</span> payment8001</pre></td></tr></table></figure><p><strong>效果：</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654153168273-d05ad8fb-edea-4a4a-8417-5019953e19d8.png\" alt=\"img\"></p>\n<h3 id=\"2-访问信息有ip信息提示\"><a class=\"markdownIt-Anchor\" href=\"#2-访问信息有ip信息提示\">#</a> 2. 访问信息有 IP 信息提示</h3>\n<p><strong>问题提出：</strong></p>\n<p>修改成上面那个样子之后，那又看不到 IP 的提示了。</p>\n<p><strong>修改方式：</strong></p>\n<p>在 8001 服务的 yml 文件添加上</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">prefer-ip-address</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>  <span class=\"token comment\"># 访问路径可以显示 IP 地址</span></pre></td></tr></table></figure><p>现在 yml 的 eureka 配置的变成这样了：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#eureka 配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">register-with-eureka</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>  <span class=\"token comment\">#true 表示自己要注册到服务中心</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">fetch-registry</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>        <span class=\"token comment\">#true 表示自己要去检索下有没有其他的服务可用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">#defaultZone: http://localhost:7001/eureka/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//eureka7001.com<span class=\"token punctuation\">:</span>7001/eureka<span class=\"token punctuation\">,</span>http<span class=\"token punctuation\">:</span>//eureka7002.com<span class=\"token punctuation\">:</span>7002/eureka<span class=\"token punctuation\">,</span>http<span class=\"token punctuation\">:</span>//eureka7003.com<span class=\"token punctuation\">:</span>7003/eureka</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">instance</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">instance-id</span><span class=\"token punctuation\">:</span> payment8001</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">prefer-ip-address</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>  <span class=\"token comment\"># 访问路径可以显示 IP 地址</span></pre></td></tr></table></figure><p>** 效果：** 可以显示 ip</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654153501391-5d6084f7-7981-4e11-8882-3d123f0efa18.png\" alt=\"img\"></p>\n<h2 id=\"5-服务发现discovery\"><a class=\"markdownIt-Anchor\" href=\"#5-服务发现discovery\">#</a> 5- 服务发现 Discovery</h2>\n<p>对于注册 eureka 里面的微服务，可以通过服务发现来获得该服务的信息</p>\n<p>通过服务发现 Discovery 可以获取服务的一些信息，如 ip，端口号，主机，地址等。</p>\n<p>对服务发现的一些文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzOTM3NjUzMzQyMjE2\">https://juejin.cn/post/6844903937653342216</span></p>\n<blockquote>\n<p>正常情况下当我们要访问服务时需要知道服务实例地址和端口，如果服务实例地址和端口都是固定的我们可以直接将其配置在文件中使用，但大多数线上生产环境尤其容器部署情况下服务实例地址都是动态分配的，只有当服务实例实际部署之后才能获得地址，服务调用者根本无法提取获取服务实例地址和端口，只能在运行时通过服务发现组件解析服务名来获取服务实例地址和端口。</p>\n</blockquote>\n<p><strong>方法实现：</strong></p>\n<ol>\n<li>在 8001 主启动类添加注解：@EnableDiscoveryClient</li>\n<li>在 8001 控制层装配 bean 并使用。在 8001 的 PaymentController 类添加：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 服务发现</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* 获取服务信息</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">DiscoveryClient</span> discoveryClient<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//springframework 的 DiscoveryClient（不要导错包了）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/payment/discovery\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">discovery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 获取服务列表的信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> services <span class=\"token operator\">=</span> discoveryClient<span class=\"token punctuation\">.</span><span class=\"token function\">getServices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> element <span class=\"token operator\">:</span> services<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*******element：\"</span> <span class=\"token operator\">+</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 获取 CLOUD-PAYMENT-SERVICE 服务的所有具体实例</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ServiceInstance</span><span class=\"token punctuation\">></span></span> instances <span class=\"token operator\">=</span> discoveryClient<span class=\"token punctuation\">.</span><span class=\"token function\">getInstances</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CLOUD-PAYMENT-SERVICE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServiceInstance</span> instance <span class=\"token operator\">:</span> instances<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//getServiceId 服务器 id getHost 主机名称 getPort 端口号  getUri 地址</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">getServiceId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">getHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> instance<span class=\"token punctuation\">.</span><span class=\"token function\">getUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>discoveryClient<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>效果：</strong></p>\n<p>获取了注册中心上的已有服务（有两个服务 cloud-consumer-order、cloud-payment-service），</p>\n<p>也可以通过服务名或者对应的服务实例，如 CLOUD-PAYMENT-SERVICE 获取了 8001 和 8002 两个服务实例。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654155703823-15d05a25-2c41-4c8a-b47b-6f32d9db802e.png\" alt=\"img\"></p>\n<h2 id=\"6-eureka自我保护\"><a class=\"markdownIt-Anchor\" href=\"#6-eureka自我保护\">#</a> 6-eureka 自我保护</h2>\n<h3 id=\"1-概述\"><a class=\"markdownIt-Anchor\" href=\"#1-概述\">#</a> 1. 概述</h3>\n<p>关于的文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2NDQwODAzL2FydGljbGUvZGV0YWlscy84MzAyODMzNSM=\">Eureka 的自我保护机制</span></p>\n<p><strong>属于 CAP 里面的 AP 分支</strong></p>\n<p><strong>故障现象：</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654156293994-8cade08e-6536-49fe-801a-d24b1704683d.png\" alt=\"img\"></p>\n<p><strong>为什么会产生 Eureka 自我保护机制？</strong></p>\n<p>为了<strong>防止误杀</strong>可以正常运行的 EurekaClient ，在与 EurekaServer 网络不通情况下，EurekaServer 不会立刻 将 EurekaClient 服务剔除</p>\n<p><strong>什么是自我保护模式？</strong></p>\n<p>默认情况下，如果 EurekaServer 在一定时间内没有接收到某个微服务实例的心跳，EurekaServer 将会注销该实例（<strong>默认 90 秒</strong>）。但是当网络分区故障发生（延时、卡顿、拥挤）时，微服务与 EurekaServer 之间无法正常通信，以上行为可能变得非常危险了一因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka 通过 “自我保护模式” 来解决这个问题一一当 EurekaServer 节点<strong>在短时间内丢失过多客户端</strong>时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654157291859-7334a3c3-8156-49ca-a741-622c3ae8ae5f.png\" alt=\"img\"></p>\n<p>它的设计哲学就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。一句话讲解：<strong>好死不如赖活着</strong></p>\n<p>综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留) 也不盲目注销任何健康的微服务。使用自我保护模式，可以让 Eurekā集群更加的健壮、稳定。</p>\n<h3 id=\"2-怎么禁止自我保护\"><a class=\"markdownIt-Anchor\" href=\"#2-怎么禁止自我保护\">#</a> 2. 怎么禁止自我保护？</h3>\n<ol>\n<li>** 注册中心 7001  ：** 关闭自我保护机制（默认是开启的）</li>\n</ol>\n<p>修改 yml 文件：逐出 - 间隔 - 计时器 - 毫秒</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#  client</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">#  server 与 client 对齐</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">#关闭自我保护，默认为 true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">enable-self-preservation</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">#心跳的间隔时间，单位毫秒</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">eviction-interval-timer-in-ms</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2000</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>生产者客户端 8001 ：</strong></li>\n</ol>\n<p>修改发送心跳包时间间隔（默认 30 秒）、修改心跳等待时间，超时剔除（默认 90 秒）</p>\n<p>修改 yml 文件：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#instance: 的下一级</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">#Eureka 客户端向服务端发送心跳的时间间隔，单位秒（默认 30 秒）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">lease-renewal-interval-in-seconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">#Eureka 服务端在收到最后一次心跳后等待的时间上限，单位秒（默认 90 秒），超时剔除服务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">lease-expiration-duration-in-seconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>测试</strong></li>\n</ol>\n<p>关闭 8001，稍后 7001 注册中心会把 8001 服务剔除掉。</p>\n<p>显示自我保护机制已经关闭。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654159013128-9afaf0a2-8fc7-455c-adfb-91400c5e503a.png\" alt=\"img\"></p>\n<h1 id=\"六-zookeeper服务注册与发现\"><a class=\"markdownIt-Anchor\" href=\"#六-zookeeper服务注册与发现\">#</a> 六、Zookeeper 服务注册与发现</h1>\n<p>Eureka 已经停止更新了，后面就出现了 Zookeeper 进行替代。</p>\n<h2 id=\"1-注册中心zookeeper\"><a class=\"markdownIt-Anchor\" href=\"#1-注册中心zookeeper\">#</a> 1 - 注册中心 Zookeeper</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1654749742233-b5d73faf-1107-4479-a04c-0e2b3b0409e2.png\" alt=\"img\"></p>\n<h3 id=\"1-安装zookeeper-linux\"><a class=\"markdownIt-Anchor\" href=\"#1-安装zookeeper-linux\">#</a> 1. 安装 Zookeeper-Linux</h3>\n<p>下载路径：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kbGNkbi5hcGFjaGUub3JnL3pvb2tlZXBlci8=\">https://dlcdn.apache.org/zookeeper/</span></p>\n<p>安装虚拟机 + Linux 系统</p>\n<p>安装教程参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2EyMzIxMTIzL2FydGljbGUvZGV0YWlscy8xMjM1NTQzOTk=\">虚拟机 linux 安装 zookeeper</span></p>\n<p>但是为了方便这里使用 docker 容器：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTAzMjYxL2FydGljbGUvZGV0YWlscy8xMDU4NzAyNjg=\">一款必须掌握的虚拟容器技术：Docker</span></p>\n<p>这里就跟着这个教程一步步来就行了，</p>\n<p>查看版本号： <code>docker version</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659423142446-e2639e38-6418-4f23-ab11-a35c7c04b2da.png\" alt=\"img\"></p>\n<p>这下有 docker 容器了。但是有个问题是说连接失败。</p>\n<p><strong>问题：</strong></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659424198602-194def03-d345-472e-9d12-15a9eb916aaf.png\" alt=\"img\"></p>\n<p>** 参考链接：**<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xOTEyNTA2\">https://cloud.tencent.com/developer/article/1912506</span></p>\n<p>** 解决：** 就跟着参考连接来就解决了，用 <code>systemctl start docker</code>  和 <code>docker run hello-world</code>  测试一下。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659424659602-a94515ee-21fe-4246-a264-43a93e174a66.png\" alt=\"img\"></p>\n<p>接下来就一步步来：</p>\n<p>1. 关闭 linux 防火墙</p>\n<p>2. 在 docker 下载一个 zookeeper</p>\n<p>关闭 Linux 服务器防火墙后启动 Zookeeper 服务器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl stop firewalld</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl status firewalld</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1656344360935-45e36d1b-070d-4a04-9ba8-b5d7fe17df2d.png\" alt=\"img\"></p>\n<p>2. 使用 docker 启动 Zookeeper：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 启动 docker</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl start <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#拉取 Zookeeper 镜像</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> pull zookeeper</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#启动 Zookeeper</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> zk01 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">2181</span>:2181 <span class=\"token parameter variable\">--restart</span> always <span class=\"token parameter variable\">-d</span> zookeeper</pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1656344478701-5fd9bd55-e32b-4412-9993-53615d1869b8.png\" alt=\"img\"></p>\n<p>报错了，因为我第一次没成功，过了好久才又重新练习的，报的错是数容器名称冲突：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659425074100-41a5dc47-6c9d-43df-bc15-8de41fde15d2.png\" alt=\"img\"></p>\n<p>这里我没管了，就直接吧 zk01 改成了 zk02 了，也可以参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcnlhbnpoZW5nL3AvMTQwNTI1ODkuaHRtbA==\">docker 容器名称冲突问题解决</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659425190147-3a9dc171-9ad0-4036-95cc-3fd92c0dcfe6.png\" alt=\"img\"></p>\n<p><strong>服务节点是临时节点还是持久节点？</strong></p>\n<p>zookeeper 也是有心跳机制，在一定时间能如果一直没心跳返回，Zookeeper 就会把服务节点剔除掉。所以在 Zookeeper 上的服务节点是临时节点</p>\n<h2 id=\"2-服务提供者\"><a class=\"markdownIt-Anchor\" href=\"#2-服务提供者\">#</a> 2 - 服务提供者</h2>\n<p>应该是数据连接问题，我下面没有成功，下面的笔记是复制参考的文章的。</p>\n<blockquote>\n<ol>\n<li>建 module  - cloud-provider-payment8004</li>\n<li>改 pom   -  spring-cloud-starter-zookeeper-discovery</li>\n<li>写 yml</li>\n<li>主启动</li>\n<li>业务类</li>\n</ol>\n</blockquote>\n<ol>\n<li>\n<p>新建工程 cloud-provider-payment8004</p>\n</li>\n<li>\n<p>pom</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 因为接下来不会用到数据库，所以不导入数据库相关的依赖（防止没配置而报错）--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">&lt;!-- 替换掉 eureka 依赖，其他直接复制 8001--></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">&lt;!--SpringBoot 整合 Zookeeper 客户端 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-zookeeper-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">&lt;!--        &lt;exclusions>--></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 先排除自带的 zookeeper3.5.3--></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">&lt;!--            &lt;exclusion>--></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">&lt;!--                &lt;groupId>org.apache.zookeeper&lt;/groupId>--></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">&lt;!--                &lt;artifactId>zookeeper&lt;/artifactId>--></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">&lt;!--            &lt;/exclusion>--></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">&lt;!--        &lt;/exclusions>--></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 添加 zookeeper3.4.9 版本（引入对应版本的依赖）--></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">&lt;!--        &lt;dependency>--></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">&lt;!--            &lt;groupId>org.apache.zookeeper&lt;/groupId>--></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">&lt;!--            &lt;artifactId>zookeeper&lt;/artifactId>--></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">&lt;!--            &lt;version>3.4.9&lt;/version>--></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">&lt;!--        &lt;/dependency>--></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>yml</li>\n</ol>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#端口号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8004</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">#服务别名 —— 注册到 zookeeper 注册中心的名称</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>provider<span class=\"token punctuation\">-</span>payment</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">zookeeper</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">connect-string</span><span class=\"token punctuation\">:</span> 192.168.174.130<span class=\"token punctuation\">:</span><span class=\"token number\">2181</span> <span class=\"token comment\">#linux 的 ip 加暴露的端口号</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>主启动类</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span>\t<span class=\"token comment\">// 该注解用于向使用 consul 或者 Zookeeper 作为注册中心时注册服务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PaymentMain8004</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PaymentMain8004</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>controller- 新建 controller.PaymentController</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PaymentController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;server.port&#125;\"</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">// 获取端口号</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/payment/zk\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">paymentzk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"springcloud with zookeeper：\"</span> <span class=\"token operator\">+</span> serverPort <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>Zookeeper 容器</li>\n</ol>\n<p>默认已经帮我们启动了服务端和客户端，如果想进去容器的话，使用下面的命令。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#查看正在运行的容器（查看 Zookeeper 容器的 id）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#进入 zookeeper 容器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> 容器ID /bin/bash</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#退出容器（或者按快捷键 ctrl+P+Q 退出）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#启动容器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">docker</span> start 容器ID</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#关闭容器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">docker</span> stop 容器ID</pre></td></tr></table></figure><p>启动 8004 项目，浏览器输入 http://localhost:8004/payment/zk</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659428419465-5edb00e1-612b-4bd4-90f5-c1263b6eab56.png\" alt=\"img\"></p>\n<p>进入 Zookeeper 容器（成功注册进注册中心）</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDQwNTA3L2FydGljbGUvZGV0YWlscy8xMTI4NTI5Njg=\">docker 安装 zookeeper 容器进入容器命令查看节点</span></p>\n<p>用以下几个命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#查看正在运行的容器（查看 Zookeeper 容器的 id）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-a</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#进入 zookeeper 容器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> 容器ID /bin/bash</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">ls</span> /     <span class=\"token comment\"># 查看 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">cd</span> bin/  <span class=\"token comment\"># 进入容器 bin 文件夹</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>zkcli.sh <span class=\"token comment\"># 运行 zkcli.sh</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">ls</span> /</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">ls</span> /services  <span class=\"token comment\"># 查看 zookeeper 已注册服务</span></pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659432647285-6f509f69-41f7-46dd-9d4f-9386b6bddef7.png\" alt=\"img\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659433075109-6c092cec-5c07-4a1f-bde0-81e4308cfb8c.png\" alt=\"img\"></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29sLmx1L2pzb24v\">https://tool.lu/json/</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659433147442-27e2d7d9-ce7c-4a45-87b8-54f3bb40e4ad.png\" alt=\"img\"></p>\n<h2 id=\"3-服务消费者\"><a class=\"markdownIt-Anchor\" href=\"#3-服务消费者\">#</a> 3 - 服务消费者</h2>\n<blockquote>\n<ol>\n<li>建 module  - cloud-consumerzk-order80</li>\n<li>改 pom   -  同 8004</li>\n<li>写 yml   - 同 8004 ，但改端口号和服务名</li>\n<li>主启动     - 同 8004</li>\n<li>业务类</li>\n</ol>\n</blockquote>\n<ol>\n<li>\n<p>新建消费者模块 cloud-consumerzk-order80。</p>\n<p>pom 和 yml 直接复制 8004。（yml 中端口号改为 80，应用名改为 cloud-consumerzk-order，其他都相同）</p>\n</li>\n<li>\n<p>主启动类。（与 8004 相同）</p>\n</li>\n<li>\n<p>在 springcloud 包下新建 config.ApplicationContextConfig</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationContextConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@LoadBalanced</span>   <span class=\"token comment\">// 负载均衡</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>新建 controller.OrderZKController</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderZKController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INVOKE_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"http://cloud-provider-payment\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/consumer/payment/zk\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">paymentInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INVOKE_URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/payment/zk\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动项目</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659434415576-75c7db17-7afd-48b4-a1ce-a61a3962a1f7.png\" alt=\"img\"></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9jb25zdW1lci9wYXltZW50L3pr\">http://localhost/consumer/payment/zk</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659434350566-5fd0df86-2eac-46dc-959a-82d48a29ea7e.png\" alt=\"img\"></p>\n<h1 id=\"七-consul服务注册与发现\"><a class=\"markdownIt-Anchor\" href=\"#七-consul服务注册与发现\">#</a> 七、Consul 服务注册与发现</h1>\n<p>Consul 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY29uc3VsLmlvLw==\">https://www.consul.io/</span></p>\n<p>Consul 中文文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3ByaW5nY2xvdWQuY2Mvc3ByaW5nLWNsb3VkLWNvbnN1bC5odG1s\">https://www.springcloud.cc/spring-cloud-consul.html</span></p>\n<h2 id=\"1-简介\"><a class=\"markdownIt-Anchor\" href=\"#1-简介\">#</a> 1 - 简介</h2>\n<h3 id=\"1-是什么\"><a class=\"markdownIt-Anchor\" href=\"#1-是什么\">#</a> 1. 是什么？</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659491795131-65df8b5d-e0aa-47d9-be19-6c4638644f2c.png\" alt=\"img\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659491905526-1660c473-64e2-480c-ba6e-bdbfe7abf0af.png\" alt=\"img\"></p>\n<p>Consul 是一种服务网格解决方案，提供具有服务发现，配置和分段功能的全功能控制平面。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建完整的服务网格。Consul 需要一个数据平面，并支持代理和本机集成模型。Consul 附带了一个简单的内置代理，因此一切都可以直接使用，还支持 Envoy 等第三方代理集成。</p>\n<h3 id=\"2-能干嘛\"><a class=\"markdownIt-Anchor\" href=\"#2-能干嘛\">#</a> 2. 能干嘛？</h3>\n<p>** 服务发现：** 提供 HTTP/DNS 两种发现方式。</p>\n<p>Consul 的客户端可以注册服务，例如 api 或 mysql，其他客户端可以使用 Consul 来发现给定服务的提供者。使用 DNS 或 HTTP，应用程序可以轻松找到它们依赖的服务。</p>\n<p>** 健康检测：** 支持多种方式，HTTP、TCP、Docker、shell 脚本定制化。</p>\n<p>领事客户端可以提供任意数量的运行状况检查，这些检查可以与给定服务（“Web 服务器是否返回 200 OK”）或本地节点（“内存利用率低于 90％”）相关。操作员可以使用此信息来监视群集的运行状况，服务发现组件可以使用此信息将流量从不正常的主机发送出去。</p>\n<p>**KV 存储：**Key、Value 的存储方式</p>\n<p>应用程序可以将 Consul 的分层键 / 值存储用于多种目的，包括动态配置，功能标记，协调，领导者选举等。简单的 HTTP API 使其易于使用。</p>\n<p><strong>安全的服务通信</strong>：领事可以为服务生成并分发 TLS 证书，以建立相互 TLS 连接。 意图 可用于定义允许哪些服务进行通信。可以使用可以实时更改的意图轻松管理服务分段，而不必使用复杂的网络拓扑和静态防火墙规则。</p>\n<p>** 多数据中心：**Consul 支持多数据中心</p>\n<p>Consul 开箱即用地支持多个数据中心。这意味着 Consul 的用户不必担心会构建其他抽象层以扩展到多个区域。</p>\n<p>Consul 旨在对 DevOps 社区和应用程序开发人员友好，使其非常适合现代，灵活的基础架构。</p>\n<h3 id=\"3-哪下载\"><a class=\"markdownIt-Anchor\" href=\"#3-哪下载\">#</a> 3. 哪下载？</h3>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY29uc3VsLmlvL2Rvd25sb2Fkcy5odG1s\">https://www.consul.io/downloads.html</span></p>\n<h3 id=\"4-怎么玩\"><a class=\"markdownIt-Anchor\" href=\"#4-怎么玩\">#</a> 4. 怎么玩？</h3>\n<p>Consul 中文文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3ByaW5nY2xvdWQuY2Mvc3ByaW5nLWNsb3VkLWNvbnN1bC5odG1s\">https://www.springcloud.cc/spring-cloud-consul.html</span></p>\n<p><strong>在 docker 上安装启动 consul</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 启动 docker</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl start <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#拉取 consul 镜像</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> pull consul</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#启动 consul</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span>  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8500</span>:8500/tcp <span class=\"token parameter variable\">--name</span> myConsul  consul agent <span class=\"token parameter variable\">-server</span> <span class=\"token parameter variable\">-ui</span> -bootstrap-expect<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token parameter variable\">-client</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0</pre></td></tr></table></figure><p>然后在浏览器输入 http://192.168.174.130:8500（linux 的 IP 地址加上冒号 8500）</p>\n<p>如果是本机的话，就用 http://localhost:8500</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659577765836-f5cd687d-6c1b-4f82-99f7-bf2a5aefd9eb.png\" alt=\"img\"></p>\n<h2 id=\"2-服务提供者-2\"><a class=\"markdownIt-Anchor\" href=\"#2-服务提供者-2\">#</a> 2 - 服务提供者</h2>\n<blockquote>\n<ol>\n<li>建 module  - cloud-provider-consul-payment8006</li>\n<li>改 pom   -  spring-cloud-starter-consul-discovery</li>\n<li>写 yml</li>\n<li>主启动</li>\n<li>业务类</li>\n</ol>\n</blockquote>\n<ol>\n<li>\n<p>新建服务提供者 cloud-provider-consul-payment8006。</p>\n</li>\n<li>\n<p>pom 复制 8004。（用下面的依赖替换 Zookeeper 的依赖）</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--SpringCloud consul-server--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-consul-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>yml</li>\n</ol>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8006</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> consul<span class=\"token punctuation\">-</span>payment<span class=\"token punctuation\">-</span>provider</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">consul</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.174.130 <span class=\"token comment\">#用 linux 的 ip 地址（consul 在本机就填 localhost）</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8500</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token key atrule\">service-name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>spring.application.name<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token key atrule\">heartbeat</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>\n<p>主启动类（与 8004 相同）</p>\n</li>\n<li>\n<p>controller</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PaymentController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;server.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/payment/consul\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">paymentConsul</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"springcloud with consul：\"</span><span class=\"token operator\">+</span>serverPort<span class=\"token operator\">+</span><span class=\"token string\">\"\\t\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"随机数：\"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>启动项目</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDA2L3BheW1lbnQvY29uc3Vs\">http://localhost:8006/payment/consul</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659579791146-1305a00f-c1e3-4418-8bf9-0969ee2a382f.png\" alt=\"img\"></p>\n<p>但是 Consul 的服务有红色❌</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659579900957-5c6f6538-0b5a-4df5-838f-79063ebcde17.png\" alt=\"img\"></p>\n<p><strong>解决：</strong></p>\n<p>参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDAyMTI3MC9hcnRpY2xlL2RldGFpbHMvMTA3Njk0MDIy\">https://blog.csdn.net/weixin_44021270/article/details/107694022</span></p>\n<p>已经在上边的 application.yml 添上了</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659580067479-920fa148-775e-4f3f-8de4-4b02e4c51630.png\" alt=\"img\"></p>\n<h2 id=\"3-服务消费者-2\"><a class=\"markdownIt-Anchor\" href=\"#3-服务消费者-2\">#</a> 3 - 服务消费者</h2>\n<blockquote>\n<ol>\n<li>建 module  - cloud-consumer-consul-order80</li>\n<li>改 pom   -  spring-cloud-starter-consul-discovery</li>\n<li>写 yml</li>\n<li>主启动</li>\n<li>业务类</li>\n</ol>\n</blockquote>\n<ol>\n<li>\n<p>新建模块 cloud-consumer-consul-order80</p>\n</li>\n<li>\n<p>pom（与 8006 相同）</p>\n</li>\n<li>\n<p>yml（端口号为 80，应用名为 consul-consumer-order，其他和 8006 相同）</p>\n</li>\n<li>\n<p>主启动类（与 8006 相同）</p>\n</li>\n<li>\n<p>config（和 zk 的消费者相同）</p>\n</li>\n<li>\n<p>controller.OrderConsulController</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderConsulController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">INVOKE_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"http://consul-provider-payment\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/consumer/payment/consul\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">paymentInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INVOKE_URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/payment/consul\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>启动项目</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9jb25zdW1lci9wYXltZW50L2NvbnN1bA==\">http://localhost/consumer/payment/consul</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659582196614-42cd3965-3056-4338-b291-50d2bd05cdde.png\" alt=\"img\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659582182604-576388fd-62ef-447e-b884-865dc5245180.png\" alt=\"img\"></p>\n<h2 id=\"4-eureka-zk-consul三者的异同点\"><a class=\"markdownIt-Anchor\" href=\"#4-eureka-zk-consul三者的异同点\">#</a> 4 - Eureka、ZK、Consul 三者的异同点</h2>\n<p>相关文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTA5NTM1L2FydGljbGUvZGV0YWlscy8xMTM3MjkwNjU=\">Eureka、ZK、Consul 三者的异同点</span></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659582570296-32398eb6-d5a9-4839-8bc9-2ce149993cb2.png\" alt=\"img\"></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CAP：（只能二选一）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>C：一致性</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>A：可用性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>P：分区容错性（微服务架构必须保证有P）</pre></td></tr></table></figure><p><strong>三者之间的比较：</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>组件名</strong></th>\n<th><strong>语言</strong></th>\n<th><strong>CAP</strong></th>\n<th><strong>服务健康检查</strong></th>\n<th><strong>服务健康检查对外暴露接口</strong></th>\n<th><strong>SpringCloud 集成</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Eureka</td>\n<td>Java</td>\n<td>AP</td>\n<td>可配支持</td>\n<td>HTTP</td>\n<td>已集成</td>\n</tr>\n<tr>\n<td>Consul</td>\n<td>Go</td>\n<td>CP</td>\n<td>支持</td>\n<td>HTTP/DNS</td>\n<td>已集成</td>\n</tr>\n<tr>\n<td>Zookeeper</td>\n<td>Java</td>\n<td>CP</td>\n<td>支持</td>\n<td>客户端</td>\n<td>已集成</td>\n</tr>\n</tbody>\n</table>\n<p><strong>经典案例：</strong></p>\n<pre><code>AP(Eureka)\n</code></pre>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659582965024-d056152e-68e9-4016-92c7-c526e8a3258c.png\" alt=\"img\"></p>\n<pre><code>CP(Zookeeper/Consul)\n</code></pre>\n<p>当网络分区出现后，为了保证一致性，就必须拒绝请求，否则无法保证一致性</p>\n<p>结论：违背了可用性 A 的要求，只满足一致性和分区容错，即 CP</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659582934982-5a6b6185-d0f5-4d30-85cf-b6c609b5cbcb.png\" alt=\"img\"></p>\n<h1 id=\"八-ribbon负载均衡调用\"><a class=\"markdownIt-Anchor\" href=\"#八-ribbon负载均衡调用\">#</a> 八、Ribbon 负载均衡调用</h1>\n<p>文档说明：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvcmliYm9uL3dpa2kvR2V0dGluZy1TdGFydGVk\">https://github.com/Netflix/ribbon/wiki/Getting-Started</span></p>\n<p>中文社区：<span class=\"exturl\" data-url=\"aHR0cDovL2RvY3Muc3ByaW5nY2xvdWQuY24vdXNlci1ndWlkZS9yaWJib24v\">http://docs.springcloud.cn/user-guide/ribbon/</span></p>\n<h2 id=\"1-概述-2\"><a class=\"markdownIt-Anchor\" href=\"#1-概述-2\">#</a> 1 - 概述</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659669809896-a01b672d-101e-4ca1-b749-198e50766a85.png\" alt=\"img\"></p>\n<p>Spring Cloud Ribbon 是基于 Netflix Ribbon，实现的一套 <code>客户端负载均衡的工具</code> 。</p>\n<p>简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供<strong>客户端的软件负载均衡算法和服务调用</strong>。</p>\n<p>Ribbon 客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出 Load Balancer (简称 LB) 后面所有的机器，Ribbon 会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用 Ribbon 实现自定义的负载均衡算法。</p>\n<p>前面的 Eureka、Zookeeper、Consul 的也因为集成了 Ribbon 所以也能实现负载均衡。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659668014109-b332b528-2b8a-4ea5-9c42-993bc86902fa.png\" alt=\"img\"></p>\n<p>但是它目前已进入了维护模式：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659668084563-091c7439-defe-4704-bebf-538e82518c2b.png\" alt=\"img\"></p>\n<p>未来替换模式： <code>SpringCloud loadBalancer</code></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659668117100-5c58ac13-fe47-49a6-8824-e52409191767.png\" alt=\"img\"></p>\n<h3 id=\"1-负载均衡lb\"><a class=\"markdownIt-Anchor\" href=\"#1-负载均衡lb\">#</a> 1. 负载均衡（LB）</h3>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659669562616-e63ecfbe-cd81-4e8a-abc9-31c471c83214.png\" alt=\"img\"></p>\n<ol>\n<li><strong>集中式 LB：</strong></li>\n</ol>\n<p>即在服务的消费方和提供方之间使用独立的 LB 设施（可以是硬件，如 F5，也可以是软件，如 nginx), 由该设施负责把访问请求通过某种策略转发至服务的提供方。</p>\n<ol start=\"2\">\n<li><strong>进程内 LB：</strong></li>\n</ol>\n<p>将 LB 逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。</p>\n<p><strong>Ribbon 就属于进程内 LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p>\n<h2 id=\"2-ribbon负载均衡演示\"><a class=\"markdownIt-Anchor\" href=\"#2-ribbon负载均衡演示\">#</a> 2 - Ribbon 负载均衡演示</h2>\n<h3 id=\"1-架构说明\"><a class=\"markdownIt-Anchor\" href=\"#1-架构说明\">#</a> 1. 架构说明</h3>\n<p>** 总结：**Ribbon 其实就是一个软负载均衡的客户端组件，他可以和其他所需请求的客户端结合使用，和 eureka 结合只是其中一个实例</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659670015940-b8bbbb3a-55ab-4ec8-aa89-24b162bb540d.png\" alt=\"img\"></p>\n<p><strong>Ribbon 在工作时分成两步：</strong></p>\n<p>第一步先选择 EurekaServer, 它优先选择在同一个区域内负载较少的 server。</p>\n<p>第二步再根据用户指定的策略，在从 serverl 取到的服务注册列表中选择一个地址。</p>\n<p>其中 Ribbon 提供了多种策略：比如轮询、随机和根据响应时间加权。</p>\n<h3 id=\"2-pom\"><a class=\"markdownIt-Anchor\" href=\"#2-pom\">#</a> 2. POM</h3>\n<p><strong>依赖导入 pom.xml</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--Ribbon 的依赖 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-netflix-ribbon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659680277124-77ca8281-d9fd-4854-9000-87efa67cf343.png\" alt=\"img\"></p>\n<h3 id=\"3-resttemplate\"><a class=\"markdownIt-Anchor\" href=\"#3-resttemplate\">#</a> 3. RestTemplate</h3>\n<p>API 文档说明：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZnJhbWV3b3JrL2RvY3MvNS4yLjIuUkVMRUFTRS9qYXZhZG9jLWFwaS9vcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jbGllbnQvUmVzdFRlbXBsYXRlLmh0bWw=\">https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html</span></p>\n<p>RestTemplate 的使用可以参考这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTM4MDk3L2FydGljbGUvZGV0YWlscy8xMjM1NjAyMzg=\">https://blog.csdn.net/qq_41538097/article/details/123560238</span></p>\n<p>前面的四 - 3.3 有使用过可以回顾一下。在 Bean 注入的配置文件中加入 @LoadBalanced 就能赋予它负载均衡的能力啦～</p>\n<p>getForObject 方法 /getForEntity 方法：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659680495598-3286b907-0a42-4f36-afb3-29ccfa44540e.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1659680511398-9c5d8185-33d3-4433-aa1b-eaa755400b07.png\" alt=\"img\"></p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1659680551876-8d2e4178-3b91-44eb-bdbb-b5b8669957b0.png\" alt=\"img\"></p>\n",
            "tags": [
                "微服务",
                "SpringCloud"
            ]
        },
        {
            "id": "https://blog.dabing.cool/java/git/",
            "url": "https://blog.dabing.cool/java/git/",
            "title": "git",
            "date_published": "2022-04-10T02:00:00.000Z",
            "content_html": "<p>🍈作者：王甜甜（dabing）</p>\n<h1 id=\"怎么将本地项目上传到github上\"><a class=\"markdownIt-Anchor\" href=\"#怎么将本地项目上传到github上\">#</a> 怎么将本地项目上传到 github 上？</h1>\n<p><strong>一、首先你先有个本地项目</strong></p>\n<p><strong>二、到 GitHub 上注册个账户，下载 git。该做的都做了（不会就百度）</strong></p>\n<p><strong>三、设置 ssh 密钥</strong></p>\n<p><strong>1 - 生成 ssh key</strong></p>\n<p>在电脑开始处找到的 git 文件下的 git Bash</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653320827784-ca8321c0-4ad3-4899-b388-5af3845e941b.png\" alt=\"img\"></p>\n<p>切换到～/.ssh 目录下，查看有没有密钥的文件。就是这几个文件，或者在电脑文件里找也行</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653321716749-a9efeef6-08a1-419c-aca8-1f0455b46021.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653321844403-ea98dbe3-f84d-4706-88cf-e29ab554341f.png\" alt=\"img\"></p>\n<p>如果没有就生成密钥，具体命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> ~/.ssh  <span class=\"token comment\"># 切换到～/.ssh 目录下</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~/.ssh</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ <span class=\"token function\">ls</span>\t <span class=\"token comment\"># 列出该目录的文件，看看有没有 ssh 的 key 文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>known_hosts</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~/.ssh</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>$ ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"2261617090@qq.com\"</span>   <span class=\"token comment\"># 如果没有用这个命令生成，下面是打印信息不用管</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Generating public/private rsa key pair.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Enter <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token function\">which</span> to save the key <span class=\"token punctuation\">(</span>/c/Users/22616/.ssh/id_rsa<span class=\"token punctuation\">)</span>: <span class=\"token comment\">#这里让你确认密钥的生成位置，回车即可</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Enter passphrase <span class=\"token punctuation\">(</span>empty <span class=\"token keyword\">for</span> no passphrase<span class=\"token punctuation\">)</span>: <span class=\"token comment\"># 这里让你输入密码，我这里不填密码，不用密码太麻烦，回车即可</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Enter same passphrase again: <span class=\"token comment\"># 回车即可</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Your identification has been saved <span class=\"token keyword\">in</span> /c/Users/22616/.ssh/id_rsa</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Your public key has been saved <span class=\"token keyword\">in</span> /c/Users/22616/.ssh/id_rsa.pub</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>The key fingerprint is:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>SHA256:QZhUaReYx2/x1Bu14GwFOB9HaTKlAJ56sLydHJhKqfE <span class=\"token number\">2261617090</span>@qq.com</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>The key's randomart image is:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>+---<span class=\"token punctuation\">[</span>RSA <span class=\"token number\">3072</span><span class=\"token punctuation\">]</span>----+</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">|</span>     <span class=\"token punctuation\">..</span>+o*oo.o<span class=\"token operator\">+=</span>+<span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">|</span>      o.* <span class=\"token operator\">=</span>o<span class=\"token operator\">=</span><span class=\"token operator\">+=</span><span class=\"token operator\">=</span>o<span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">|</span>       o.<span class=\"token operator\">=</span> .oO*.o<span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">|</span>      o *.  +<span class=\"token punctuation\">..</span>. <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token builtin class-name\">.</span> o *So <span class=\"token builtin class-name\">.</span>     <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">|</span>    <span class=\"token operator\">=</span> <span class=\"token builtin class-name\">.</span> <span class=\"token operator\">=</span> o      <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token builtin class-name\">.</span> E <span class=\"token builtin class-name\">.</span> +       <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">|</span>                 <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">|</span>                 <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>+----<span class=\"token punctuation\">[</span>SHA256<span class=\"token punctuation\">]</span>-----+</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> ~/.ssh   <span class=\"token comment\"># 再切换过来看看</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~/.ssh</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>$ <span class=\"token function\">ls</span>\t<span class=\"token comment\"># 这下有了</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>id_rsa  id_rsa.pub  known_hosts  known_hosts.old</pre></td></tr></table></figure><p>这下已经生成密钥了，在 <code>C:\\Users\\22616\\.ssh</code>  路径下：打开 <code>id_rsa.pub</code>  这个是公钥，复制内容。</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653354976106-387e0032-f1ab-4083-8256-9cabb1f2f7b9.png\" alt=\"img\"></p>\n<p><strong>2 - 在 github 上设置 ssh key</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653322307223-9bdbca7a-6f5d-4f0d-896b-f6da2d35d9bf.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653322465457-a5d22820-a5a0-40e6-b18f-a582673b6675.png\" alt=\"img\"></p>\n<p>ok~~</p>\n<p><strong>四、GitHub 上建个仓库</strong></p>\n<p>new—&gt; 起个名 ----&gt; 创建</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653355092749-ffe2be8e-064c-434a-82e5-7689a5cdae69.png\" alt=\"img\"></p>\n<p>起个名～然后创建就行</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653355179304-fa420499-c23f-4175-b9e8-d8783173d0e1.png\" alt=\"img\"></p>\n<p><strong>五、将本地的项目提交到 GitHub 上</strong></p>\n<p><strong>1- 建立 git 仓库，Git Bash 切换到本地项目的根目录下，或者直接到项目目录里，右键 Git Bash 打开</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653322685848-52768f7f-44ad-4205-a0f8-c82e7f78043c.png\" alt=\"img\"><strong> 执行</strong> <code>git init</code> <strong> 命令，将这个项目变成 git 可以管理的仓库</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> init</pre></td></tr></table></figure><p><strong>2 - 将项目的所有文件添加到仓库，add 不仅可以添加单个文件，也可以跟通配符 ，可以跟目录。一个</strong> <code>.</code> <strong> 表示当前目录下的所有文件都 add</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p><strong>3 - 将 add 的文件 commit 到本地仓库</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"注释信息\"</span></pre></td></tr></table></figure><p><strong>4 - 关联 GitHub 仓库，把你刚刚创建的 GitHub 上的仓库路径复制一下，使用 ssh</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653323144193-1a0ec826-038c-4af1-8aeb-f4aa18d34213.png\" alt=\"img\"></p>\n<p>执行命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@github.com:dabing85/OA---SSM.git</pre></td></tr></table></figure><p><strong>5 - 在上传代码之前，最好先 pull 一下</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> pull origin master</pre></td></tr></table></figure><p><strong>6 - 上传代码到 github 远程仓库上</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master</pre></td></tr></table></figure><p>好了，到这就完成了</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653355902995-b4ba474e-63cc-42e5-8a98-2cc70e8efd01.png\" alt=\"img\"></p>\n<h1 id=\"一个很适合练习git的地方\"><a class=\"markdownIt-Anchor\" href=\"#一个很适合练习git的地方\">#</a> 一个很适合练习 git 的地方</h1>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vc2NoaW5hLmdpdGVlLmlvL2xlYXJuLWdpdC1icmFuY2hpbmcv\">https://oschina.gitee.io/learn-git-branching/</span></p>\n<p>我是从 gitee 底下点的，找 git 的学习资料也可以在 gitee 底下找。</p>\n<p>记一下我做了啥题，做着做着就忘了～～～（分主要、远程两部分）</p>\n<p><strong>一、主要题</strong></p>\n<ol>\n<li><code>git commit</code>   提交代码</li>\n<li><code>git branch newBranch</code>   创建一个名为 newBranch 的新分支</li>\n<li><code>git checkout newBranch</code>  切换到 newBranch 分支</li>\n<li><code>git merge newBranch</code>   将 newBranch 的代码合并到当前分支</li>\n<li>举个例子：将 <code>newBranch</code>  新写的代码提交，然后将它跟主分支 <code>master</code>  合并</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout newBranch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> checkout master</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> commit</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> merge newBranch</pre></td></tr></table></figure><ol>\n<li><code>git rebase master</code>  也是合并分支，但是这个合并分支可以看到提交的记录</li>\n<li>相对引用 <code>^</code>  可以找到它的父节点，即上次提交的记录。</li>\n</ol>\n<p>例如切换到 bugFix 分支的父节点：</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653367143898-9ff5e0db-ddd5-42d3-ae36-56d972a6f5ad.png\" alt=\"img\"></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout bugFix^</pre></td></tr></table></figure><ol>\n<li>相对引用 2 <code>~</code>  也是用来移动的，让 head 指向它的父节点。因为 <code>^</code>  是一次只往回移动一步， <code>~</code> + <code>数字</code> 可以移动多步，使用命令 <code>git checkout head~4</code></li>\n</ol>\n<p>head 本来是指向 c4 节点的，往以前提交的记录移动 4 个位置，到 c0</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653367488026-5a693369-0ab2-4fc1-bc8e-e4b05e186c89.png\" alt=\"img\"></p>\n<ol>\n<li>使用 <code>~</code>  配合 <code>-f</code>  可以强制修改分支的位置</li>\n</ol>\n<p>例如 <code>git branch -f master head~3</code>  这个命令的意思是将 master 分支的指向强制移动到 head 节点的第 3 级父级节点处。</p>\n<p>原本 master 分支是跟 bugFix 分支一样指向 c4 的，执行命令后，将 master 分支强制移动到了 c1 的提交记录位置去了。</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653368510537-fcd56a3a-8c96-4fa5-87be-08c128d913db.png\" alt=\"img\"></p>\n<p>二、远程题（实线是本地仓库，虚线是远程仓库）</p>\n<ol>\n<li><code>git clone</code>   -  在本地创建一个远程仓库的拷贝（比如从 <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20=\">github.com</span>）</li>\n<li><code>/</code> - 这是远程分支的命令规则，即远程仓库名 / 分支名，   如一般会取名为： <code>origin/master</code></li>\n<li><code>git fetch</code> - 从远程获取数据，并且本地的远程分支也会更新到最新的位置。</li>\n</ol>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653626701083-63d353e0-2ff0-4d8f-b96f-f1dc838c85b4.png\" alt=\"img\"></p>\n<p>git fetch 完成了两件事：</p>\n<ul>\n<li>从远程仓库下载本地</li>\n<li>更新远程分支（o/master）</li>\n</ul>\n<p><code>git fetch</code>  通常通过互联网（使用  <code>http:// </code> 或  <code>git:// </code> 协议) 与远程仓库通信</p>\n<p>注意 git fetch 只是把远程仓库的数据 <code>下载</code> 下来而已，并没有更新本地仓库的内容</p>\n<ol>\n<li><code>git pull</code> - 相当于 git fetch 和 git merge  o/master 两步操作，即先抓取更新，再合并到本地分支。</li>\n<li><code>git push</code> - 正好跟 pull 是相反的，将你的变更上传到指定的远程仓库，并在远程仓库上合并你的新提交记录。一旦 git push 成功，你的小伙伴就能在远程仓库下载你的分享成果了。</li>\n</ol>\n<p>如果你的 git push 没有带任何参数，那么它会是上传到你配置里默认的仓库里去，在 push.default 中有配置。但是我在我的项目里咋没找到这个配置</p>\n<ol>\n<li>对于有偏差的提交历史，咋办？就是在你 push 之前，你的同事已经在远程仓库上有提交了，如果他修改的 api 你使用到了，那就会发生冲突，你直接 push 是会失败的。</li>\n</ol>\n<p>这时，你需要先把远程仓库的数据更新到本地，再把你的本地提交 push 到远程仓库，你的修改就是基于新的远程分支的。具体操作：先 git pull ；再 git push</p>\n<p>也可以用 rebase 的方式合并，即先 git pull --rebase；再 git push</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653629059279-6dce82f7-1d33-4951-ae5d-219db6132668.png\" alt=\"img\"></p>\n<ol>\n<li>待做题 。。。。。。</li>\n</ol>\n<h1 id=\"在idea中使用git\"><a class=\"markdownIt-Anchor\" href=\"#在idea中使用git\">#</a> 在 idea 中使用 git？</h1>\n<h2 id=\"1-将你的项目初始化成一个git项目\"><a class=\"markdownIt-Anchor\" href=\"#1-将你的项目初始化成一个git项目\">#</a> 1 - 将你的项目初始化成一个 git 项目：</h2>\n<p>配置 Git  : VCS----&gt;Enable Version ----&gt; 选择 Git</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653663946711-f1ed609e-920a-42ad-acf1-b0a9bf76e857.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653664001651-e0c039b8-bed1-41e4-9a00-2a2dffcf0060.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653664096827-8c7f9bdf-1eee-496c-8280-b2849bf9e770.png\" alt=\"img\"></p>\n<p>看控制台的命令， <code>git init</code> , 这个操作会在本地创建一个本地仓库。</p>\n<h2 id=\"2-文件颜色说明\"><a class=\"markdownIt-Anchor\" href=\"#2-文件颜色说明\">#</a> 2- 文件颜色说明：</h2>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653664194120-0b8015de-feaa-406c-a09e-91e81c0cf95c.png\" alt=\"img\"><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653666563905-5cbad4f7-b538-4a20-9483-eee8c85b5a8b.png\" alt=\"img\"></p>\n<p><code>红色</code> 证明这个文件只是在<strong>工作区</strong>，git 是不管理红色文件的， <code>add</code>  之后变成 <code>绿色</code> 表示添加到了<strong>暂存区</strong>，再 <code>commit</code>  之后会变成普通的 <code>黑色</code> 保存到<strong>本地仓库</strong>，再 <code>push</code>  之后，会把本地仓库的文件上传到<strong>远程仓库</strong>并合并。而当你对文件进行过修改后，文件颜色会变成 <code>蓝色</code></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653664544471-10cdb690-687f-46f8-898f-f33d7fea64c8.png\" alt=\"img\"></p>\n<ul>\n<li>Workspace：工作区 (当前用户操作修改的区域)</li>\n<li>Index / Stage：暂存区 (add 后的区域)</li>\n<li>Repository：仓库区或本地仓库 (commit 后的区域)</li>\n<li>Remote：远程仓库 (push 后的区域)</li>\n</ul>\n<p>写多了，回来～～～</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653665079816-05a82e00-9349-46a0-ae6d-cc42c7e5de92.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653665404091-711c9498-e9f2-465d-9a29-36ec10b4892f.png\" alt=\"img\"></p>\n<p>可以再这看看人家 git 命令怎么用的</p>\n<h2 id=\"3-将文件commit-提交到本地仓库\"><a class=\"markdownIt-Anchor\" href=\"#3-将文件commit-提交到本地仓库\">#</a> 3 - 将文件 commit 提交到本地仓库:</h2>\n<p>sorry，我这里图标错啦，✔那个是 commit，↗是 push</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653665755831-df58f364-de57-4ab2-a222-0de9f68760c9.png\" alt=\"img\"></p>\n<h2 id=\"4-将本地仓库的文件-push-上传到远程分支上\"><a class=\"markdownIt-Anchor\" href=\"#4-将本地仓库的文件-push-上传到远程分支上\">#</a> 4 - 将本地仓库的文件 push 上传到远程分支上</h2>\n<p>要上传到远程上，你首先得先关联你的远程 git。比如 gitee。</p>\n<p><strong>在远程仓库上创建一个新项目</strong></p>\n<p><strong>将本地项目关联到远程仓库</strong></p>\n<p>我在 gitee 上创建，先设置 ssh 公钥，上次已经说过怎么生产公钥，怎么设置了</p>\n<p><strong>4.1 设置 ssh 公钥</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653667689764-a3570d4f-4ef2-4a30-8a10-a14dd2bd8840.png\" alt=\"img\"></p>\n<p><strong>4.2 创建仓库，并复制仓库 ssh 地址</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653668188943-de8e5820-74da-4d83-91d8-9b0009ac7812.png\" alt=\"img\"></p>\n<p><strong>4.3 在 idea 上执行下列命令，gitee 上也有教的</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@gitee.com:hedabing/wiki.git  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># origin 是远程仓库的名字，这样就不用每次都写很长的地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin <span class=\"token string\">\"master\"</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653669018375-61cb5792-27fe-483d-9484-ce03c2e2f254.png\" alt=\"img\"></p>\n<p>就 OK 了。</p>\n<p>下次再有新代码，就一样，用 idea 自带的图标，✔commit，↗push 即可。</p>\n<h2 id=\"4-分支说明\"><a class=\"markdownIt-Anchor\" href=\"#4-分支说明\">#</a> 4 - 分支说明</h2>\n<p>另外，一般工作中不会直接把你写的代码合并到 master 远程主分支上的，</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653787669095-ec8ec08f-06e5-46ef-bbfa-4ccd847c2711.png\" alt=\"img\"></p>\n<p>右下角这个树杈，就是指明了你 push 之后会把你的代码上传合并到哪个分支去，也就是 Local Branch 本地分支：hub/master 这里 hub 是远程仓库名字，master 是远程仓库的远程分支。</p>\n<p>在工作中呢，需要创建属于你自己的分支，你再本地环境下写好代码之后，push 到你自己的分支下。最后要做合并到 master 主分支下的请求才可以.</p>\n<p>例如下面是我的分支，我再这上面上传代码，并不会把代码直接上传到 master 主分支上。</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653788262004-8506ecdd-4db4-48ed-884c-fb52e026d2e0.png\" alt=\"img\"></p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://blog.dabing.cool/java/Java8%E6%96%B0%E7%89%B9%E6%80%A7/",
            "url": "https://blog.dabing.cool/java/Java8%E6%96%B0%E7%89%B9%E6%80%A7/",
            "title": "Java8新特性",
            "date_published": "2022-04-10T02:00:00.000Z",
            "content_html": "<p>作者：王甜甜（dabing）</p>\n<p>视频：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtiNDExVzc1Tg==\"> 宋红康 - 全网最全 Java 零基础入门教程</span></p>\n<h1 id=\"java8-新特性\"><a class=\"markdownIt-Anchor\" href=\"#java8-新特性\">#</a> Java8 新特性</h1>\n<p>简介：</p>\n<ul>\n<li>速度更快</li>\n<li>代码更少（增加了新的语法：Lambda 表达式）</li>\n<li>强大的 Stream API</li>\n<li>便于并行</li>\n<li>最大化减少空指针异常：Optional</li>\n<li>Nashorn 引擎，允许在 JVM 上运行 js 应用</li>\n</ul>\n<h2 id=\"1-lambda表达式\"><a class=\"markdownIt-Anchor\" href=\"#1-lambda表达式\">#</a> 1 - Lambda 表达式</h2>\n<p>Lambda 表达式是一个匿名函数，Java8 允许把函数作为参数传递进方法中。</p>\n<p>一个新的语；法要求。说白了就看到别人的这样用很好，也抄一抄借鉴借鉴</p>\n<p><strong>语法格式</strong>：📒</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>experssion 或</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>statements<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>Lambda 实战：✍</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Lambda 表达式的使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 1. 举例：(o1,o2)-> Integer.compare (o1,o2)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 2. 格式：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *      -> :Lambda 操作符 或 箭头操作符</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *      左边：Lambda 形参列表 （其实就是接口种的抽象方法的形参列表）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *      右边：Lambda 体 （其实就是重写的抽象方法的方法体）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 3.Lambda 表达式的使用  ：分 6 种情况</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *   总结：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *   -> 左边：Lambda 形参列表的参数类型可以省略（类型推断）；如果 Lambda 形参列表只有一个参数，其 () 也可以省略</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *   -> 右边：Lambda 体应该使用一对 &#123;&#125; 包裹；如果 Lambda 体只有一条执行语句（可能时 return 语句），可以省略这一对 &#123;&#125; 和 return 关键字</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * 4.Lambda 表达式的本质：作为函数式接口的实例对象</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">Runnable</span> r2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我爱java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 无参，无返回</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 有参，无返回</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 类型推断，可省略数据类型</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con1<span class=\"token operator\">=</span>s<span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一个参数，省略 ()</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span>com1 <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span>o2<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 多条执行语句，用 &#123;&#125; 包裹</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> com <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一条语句，&#123;&#125; 和 return 均可省略</span></pre></td></tr></table></figure><h2 id=\"2-interface\"><a class=\"markdownIt-Anchor\" href=\"#2-interface\">#</a> 2 - Interface</h2>\n<p>新的 interface 接口方法可以用  <code>default</code>  或   <code>static</code>   修饰，默认是 public abstract 修饰的，抽象方法（顺便提一嘴，变量是默认 public static final 修饰的）。</p>\n<p>被上面的两个修饰符修饰的方法分别是普通方法和静态方法，他们可以拥有<strong>方法体</strong>，实现类不必重写此方法。</p>\n<ol>\n<li><code>default</code>  修饰的方法，是普通实例方法，可以用 this 调用，可以被子类继承、重写。</li>\n<li><code>static</code>  修饰的方法，使用上和一般类静态方法一样。但它不能被子类继承，只能用 Interface 调用</li>\n</ol>\n<p>如果有一个类实现了两个接口，而两个接口有相同的一个方法，则实现类必须重写该方法。不然的话，编译的时候就会报错。</p>\n<p>另外，如果一个接口只有一个抽象方法，那这个接口被叫做<strong>函数式接口</strong>，函数式接口一般可以用<strong> Lambda</strong> 表达式进行书写。✍</p>\n<h2 id=\"3-functional-interface-函数式接口\"><a class=\"markdownIt-Anchor\" href=\"#3-functional-interface-函数式接口\">#</a> 3 - functional interface 函数式接口</h2>\n<p><strong>定义</strong>：也称为 SAM 接口，即 Single Abstract Method interfaces，有且只有一个抽象方法，但可以有多个非抽象方法的接口。</p>\n<p>在 java 8 中专门有一个包放函数式接口 <code>java.util.function</code> ，该包下的所有接口都有    <code>@FunctionalInterface</code>   注解，提供函数式编程。</p>\n<p>在其他包中也有函数式接口，其中一些没有 <code>@FunctionalInterface</code>  注解，但是只要符合函数式接口的定义就是函数式接口，与是否有该注解无关，注解只是在编译时起到强制规范定义的作用。其在 Lambda 表达式中有广泛的应用。</p>\n<h2 id=\"4-方法引用\"><a class=\"markdownIt-Anchor\" href=\"#4-方法引用\">#</a> 4 - 方法引用</h2>\n<p><strong>使用情景</strong>：当要传递给 Lambda 体的操作，已经有实现的方法了，可以使用方法引用！</p>\n<p>方法应用可以看作是 Lambda 表达式深层次的表达，换句话说，方法引用就是 Lambda 表达式，也就是函数式接口的一个 <code>实例</code> 。通过方法的名字来指向一个方法，可以认为是 Lambda 表达式的一个语法糖。</p>\n<p><strong>要求</strong>：实现接口的抽象方法的 <code>参数列表</code> 和 <code>返回值类型</code> ，必须与方法引用的方法的参数列表和返回值类型保持一致！（针对情况 1 和情况 2）</p>\n<p><strong>格式</strong>：使用操作符 <code>::</code>  将类（或对象）与方法名分割开来。</p>\n<p><strong>如下三种主要使用情况：</strong></p>\n<p>1. 对象：：实例方法名</p>\n<p>2. 类：：静态方法名</p>\n<p>3. 类：：实例方法名</p>\n<p>如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> comparator2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">compare</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Comparator 的 int compare (Integer o1,Integer o2)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//Integer 的 int compare (Integer o1,Integer o2)</span></pre></td></tr></table></figure><p>代码说明：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 情况一：对象：：实例方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Consumer 中的 void accept (T t);</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//PrintStream 中的 void println (T t)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 原 Lambda 写法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con1<span class=\"token operator\">=</span>str<span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 用方法引用 对象：：实例方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">PrintStream</span> ps<span class=\"token operator\">=</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> con2<span class=\"token operator\">=</span>ps<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 情况二：类：：静态方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 原 Lambda 写法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> comparator1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 用方法引用 类：：静态方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> comparator2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">compare</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 传统写法</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> func1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span> aDouble<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>aDouble<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//Lambda 原写法</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> func2<span class=\"token operator\">=</span>d<span class=\"token operator\">-></span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 方法引用写法</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> func3<span class=\"token operator\">=</span><span class=\"token class-name\">Math</span><span class=\"token operator\">::</span><span class=\"token function\">round</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 情况二：类：：实例方法</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//Comparator 中的 int compare (T t1,T t2);</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//String 中的 int t1.compareTo (t2)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 原 Lambda 写法</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> com1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> o1<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 用方法引用 类：：实例方法</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> com2 <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"5-构造器引用\"><a class=\"markdownIt-Anchor\" href=\"#5-构造器引用\">#</a> 5 - 构造器引用</h2>\n<p>和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。</p>\n<p>抽象方法的返回值里类型即为构造器所属的类的类型</p>\n<p>代码说明：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造器引用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 传统写法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> fun1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> integer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 原 Lambda 写法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> fun2<span class=\"token operator\">=</span>i<span class=\"token operator\">-></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 用方法引用 类：：实例方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> fun3<span class=\"token operator\">=</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"6-stream\"><a class=\"markdownIt-Anchor\" href=\"#6-stream\">#</a> 6 - Stream</h2>\n<p>java 新增了 <code>java.util.stream</code>  包，它和之前的流大同小异。之前接触最多的是资源流，比如 <code>java.io.FileInputStream</code> ，通过流把文件从一个地方输入到另一个地方，它只是内容搬运工，对文件内容不做任何<em> CRUD</em>。</p>\n<p><code>Stream</code>  依然不存储数据，不同的是它可以检索 (Retrieve) 和逻辑处理 <code>集合</code> 数据、包括筛选、排序、统计、计数等。可以想象成是 Sql 语句。</p>\n<p>它的源数据可以是 <code>Collection</code> 、 <code>Array</code>  等。由于它的方法参数都是函数式接口类型，所以一般和 Lambda 配合使用</p>\n<p><strong>为什么要使用 Stream API？</strong></p>\n<p>实际开发中，项目中多数数据源都来自于 mysql、oracle 等，但现在数据源可以更多了，有 mongDB、redis 等，而这些 NoSql 的数据就需要 Java 层面去处理。这是就使用到了我们的 Stream 在 Java 层进行数据的处理。</p>\n<p>Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。</p>\n<p><strong>“集合讲的是数据，Stream 讲的是计算”</strong></p>\n<p><strong>注意：</strong></p>\n<p>1.Stream 自己不会存储元素</p>\n<p>2.Stream 不会改变源对象，相反，他们会返回一个持有结果的新的 Stream</p>\n<p>3.Stream 操作时延迟执行的，这意味着他们会等到需要结果的时候才执行</p>\n<p>体系图：</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/1650248693626-3fc79cda-6ee6-4f9d-b827-cd8391562194.png\" alt=\"img\"></p>\n<h3 id=\"流类型\"><a class=\"markdownIt-Anchor\" href=\"#流类型\">#</a> 流类型</h3>\n<p>1.stream 串行流</p>\n<p>2.parallelStream 并行流，可多线程执行</p>\n<p><strong>Stream 的操作三个步骤：</strong></p>\n<p><strong>1. 创建 Stream</strong></p>\n<p>一个数据源（如：集合、数组），获取一个流</p>\n<p><strong>2. 中间操作</strong></p>\n<p>一个中间操作，对数据源的数据进行处理</p>\n<p><strong>3. 终止操作（终端操作</strong></p>\n<p>一旦执行终止操作， <code>就执行中间操作</code>  (延迟执行)，并产生结果。之后，不会再被使用。</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221020234129381.png\" alt=\"image-20221020234129381\"></p>\n<h3 id=\"步骤一-创建stream\"><a class=\"markdownIt-Anchor\" href=\"#步骤一-创建stream\">#</a> 步骤一  创建 Stream</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 Stream 方式一：通过集合</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//default Stream&lt;E> stream (): 返回一个顺序流</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//default Stream&lt;E> parallelStream (): 返回一个并行流</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> userStream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">parallelStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 创建 Stream 方式二：通过数组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 调用 Arrays 类的 static&lt;T> Stream&lt;T> stream (T [] array): 返回一个流</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">IntStream</span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 创建 Stream 方式三：通过 Stream 的 of ()</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 方式四：创建无限流，了解即可</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 迭代</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">//public static&lt;T> Stream&lt;T> iterate(final T seed,final UnaryOperator&lt;T>f)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 遍历前 10 个偶数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>t <span class=\"token operator\">-></span>t<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 生成</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">//public static&lt;T> Stream&lt;T> generate(Supplier&lt;T> s)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token operator\">::</span><span class=\"token function\">random</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"步骤二-中间操作\"><a class=\"markdownIt-Anchor\" href=\"#步骤二-中间操作\">#</a> 步骤二 中间操作</h3>\n<p>筛选与切片、映射、排序</p>\n<ol>\n<li><strong>中间操作：筛选与切片</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>filter(Predicate p)</strong></td>\n<td>用于通过设置的条件过滤出元素</td>\n</tr>\n<tr>\n<td><strong>distinct()</strong></td>\n<td>筛选，通过流所生成元系的 hashCode () 和 equals () 去除重复元素</td>\n</tr>\n<tr>\n<td><strong>limit(long maxSize)</strong></td>\n<td>截断流，使其元素不超过给定的数量</td>\n</tr>\n<tr>\n<td><strong>skip(long n)</strong></td>\n<td>跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回空流</td>\n</tr>\n</tbody>\n</table>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span>list <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span>ist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp1oyee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"马化騰\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">,</span><span class=\"token number\">6000.38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1002</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"马云\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">9876.12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1003</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"刘强东\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">33</span><span class=\"token punctuation\">,</span><span class=\"token number\">388.82</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1004</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"雷军\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">7657.37</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1005</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李彦宏\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">5555.32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1006</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"比尔盖茨\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span><span class=\"token number\">956.43</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1007</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"任正非\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">4333.32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1008</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"扎克伯格\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">35</span><span class=\"token punctuation\">,</span><span class=\"token number\">2508.32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//1. 筛选与切片</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 创建流</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span>stream <span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//filter--- 过滤数据，中间操作：查询员工表中薪资大于 7000 的员工信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>stream<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getsalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">7000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 循环输出为最终操作</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//limit (n)---- 截断流，使其元素不超过给定的数量</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 这里注意要重新获取一次流，Stream 流只用一次就关闭了</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前 3 条记录    </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//skip (n)---- 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回空流</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从第四条数据开始输出</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//distinct ()--- 筛选，通过流所生成元系的 hashCode () 和 equals () 去除重复元素</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token number\">1</span>ist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1009</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"刘强东\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token number\">1</span>ist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token number\">1009</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"刘强东\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 会去掉重复数据</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>中间操作：映射</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>map(Function f)</strong></td>\n<td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素（以前学函数的时候就先学的映射嘛）</td>\n</tr>\n<tr>\n<td><strong>mapToDouble(ToDoubleFunction f)</strong></td>\n<td>接受一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream</td>\n</tr>\n<tr>\n<td><strong>mapToInt(ToIntFunction f)</strong></td>\n<td>接受一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream</td>\n</tr>\n<tr>\n<td><strong>mapToIong(ToLongFunction f)</strong></td>\n<td>接受一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream</td>\n</tr>\n<tr>\n<td><strong>flatMap(Function f)</strong></td>\n<td>接受一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td>\n</tr>\n</tbody>\n</table>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//2 - 映射</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//map (Function f)—— 接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">-></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 练习 1：获取员工姓名长度大于 3 的员工的姓名。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeData</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> nameStream <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Employee</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    nameStream<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">-></span> name<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 练习 2：使用 map () 中间操作实现 flatMap () 中间操作方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Stream</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> streamStream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StreamAPITest2</span><span class=\"token operator\">::</span><span class=\"token function\">fromStringToStream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    streamStream<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//flatMap (Function f)—— 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> characterStream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StreamAPITest2</span><span class=\"token operator\">::</span><span class=\"token function\">fromStringToStream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    characterStream<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 将字符串中的多个字符构成的集合转换为对应的 Stream 的实例</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span><span class=\"token function\">fromStringToStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Character</span> c <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         str<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//map () 和 flatMap () 方法类似于 List 中的 add () 和 addAll () 方法</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1, 2, 3, 4, [5, 6, 7, 8]]</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    list1<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1, 2, 3, 4, [5, 6, 7, 8], 5, 6, 7, 8]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>中间操作：排序</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>sorted()</strong></td>\n<td>产生一个新流，其中按自然顺序排序</td>\n</tr>\n<tr>\n<td><strong>sorted(Comparator com)</strong></td>\n<td>产生一个新流，其中按比较器顺序排序</td>\n</tr>\n</tbody>\n</table>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//3 - 排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//sorted ()—— 自然排序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 抛异常，原因：Employee 没有实现 Comparable 接口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeData</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//sorted (Comparator com)—— 定制排序</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees1 <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeData</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    employees1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">,</span>e2<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> ageValue <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e2<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ageValue <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> ageValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e2<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"步骤三-终止操作\"><a class=\"markdownIt-Anchor\" href=\"#步骤三-终止操作\">#</a> 步骤三 终止操作</h3>\n<p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如： <code>List</code> 、 <code>Integer</code> ，甚至是 <code>void</code></p>\n<p>流进行了终止操作之后，不能再次使用</p>\n<p>匹配与查找、归约、收集</p>\n<ol>\n<li><strong>终止操作：匹配与查找</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>allMatch(Predicate p)</strong></td>\n<td>检查是否匹配所有元素</td>\n</tr>\n<tr>\n<td><strong>anyMatch(Predicate p)</strong></td>\n<td>检查是否至少匹配一个元素</td>\n</tr>\n<tr>\n<td><strong>noneMatch(Predicate p)</strong></td>\n<td>检查是否没有匹配所有元素</td>\n</tr>\n<tr>\n<td><strong>findFirst()</strong></td>\n<td>返回第一个元素</td>\n</tr>\n<tr>\n<td><strong>findAny()</strong></td>\n<td>返回当前流中的任意元素</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td><strong>方法</strong></td>\n<td><strong>描述</strong></td>\n</tr>\n<tr>\n<td>-----------------------</td>\n<td>------------------------------------------------------------</td>\n</tr>\n<tr>\n<td><strong>count()</strong></td>\n<td>返回流中元素总数</td>\n</tr>\n<tr>\n<td><strong>max(Comparator c)</strong></td>\n<td>返回流中最大值</td>\n</tr>\n<tr>\n<td><strong>min(Comparator c)</strong></td>\n<td>返回流中最小值</td>\n</tr>\n<tr>\n<td><strong>forEach(Consumer c)</strong></td>\n<td>内部迭代（使用 Collection 接口需要用户去做迭代，称为外部迭代。相反，Stream API 使用内部迭代 —— 它帮你把迭代做了)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1 - 匹配与查找</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeData</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//allMatch (Predicate p)—— 检查是否匹配所有元素。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 练习：是否所有的员工的年龄都大于 18</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">boolean</span> allMatch <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">allMatch</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>allMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//anyMatch (Predicate p)—— 检查是否至少匹配一个元素。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 练习：是否存在员工的工资大于 5000</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">boolean</span> anyMatch <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyMatch</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>anyMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//noneMatch (Predicate p)—— 检查是否没有匹配的元素。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 练习：是否存在员工姓 “雷”</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">boolean</span> noneMatch <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">noneMatch</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"雷\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>noneMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//findFirst—— 返回第一个元素</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> first <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//findAny—— 返回当前流中的任意元素</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employee <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">parallelStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeData</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//count—— 返回流中元素的总个数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//max (Comparator c)—— 返回流中最大值</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 练习：返回最高的工资</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> salaryStream <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> maxSalary <span class=\"token operator\">=</span> salaryStream<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token operator\">::</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>maxSalary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">//min (Comparator c)—— 返回流中最小值</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 练习：返回最低工资的员工</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> minSalary <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token operator\">::</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minSalary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">//forEach (Consumer c)—— 内部迭代</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 使用集合的遍历操作</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    employees<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>终止操作：归约</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>reduce(T iden,BinaryOperator b)</strong></td>\n<td>可以将流中元素反复结合起来，得到一个值。返回 T</td>\n</tr>\n<tr>\n<td><strong>reduce(BinaryOperator b)</strong></td>\n<td>可以将流中元素反复结合起来，得到一个值。返回 Optional<T></td>\n</tr>\n</tbody>\n</table>\n<p><code>map</code>  和 <code>reduce</code>  的连接通常称为 <code>map-reduce</code>  模式，因 Google 用它来进行网络搜索而出名</p>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//2 - 归约</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//reduce (T identity, BinaryOperator)—— 可以将流中元素反复结合起来，得到一个值。返回 T</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 练习 1：计算 1-10 的自然数的和</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Integer</span> sum <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//reduce (BinaryOperator) —— 可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 练习 2：计算公司所有员工工资的总和</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeData</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> sumSalary <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sumSalary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>终止操作：收集</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>collect(Collector c)</strong></td>\n<td>将流转换为其他形式。接收一个 Collector 接口的实现，用于给 Stream 中元素做汇总的方法</td>\n</tr>\n</tbody>\n</table>\n<p><code>Collector</code>  接口中方法的实现决定了如何对流执行收集的操作（如收集到  <code>List</code> 、 <code>Set</code> 、 <code>Map</code> ）</p>\n<p><code>Collectors</code>  实用类提供了很多静态方法，可以方便地创建常见收集器实例具体方法与实例如下表：</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221020234242661.png\" alt=\"image-20221020234242661\"></p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221020234301928.png\" alt=\"image-20221020234301928\"></p>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//3 - 收集</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//collect (Collector c)—— 将流转换为其他形式。接收一个 Collector 接口的实现，用于给 Stream 中元素做汇总的方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 练习 1：查找工资大于 6000 的员工，结果返回为一个 List 或 Set</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employees <span class=\"token operator\">=</span> <span class=\"token class-name\">EmployeeData</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEmployees</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employeeList <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">6000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    employeeList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Employee</span><span class=\"token punctuation\">></span></span> employeeSet <span class=\"token operator\">=</span> employees<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getSalary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">6000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    employeeSet<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"常用方法\"><a class=\"markdownIt-Anchor\" href=\"#常用方法\">#</a> 常用方法</h3>\n<p>接下来我们看 <code>java.util.stream.Stream</code>   常用方法 🤌</p>\n<p>上面的例子基本都有展示的啦～～～</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221020233658581.png\" alt=\"image-20221020233658581\"></p>\n<h3 id=\"小结\"><a class=\"markdownIt-Anchor\" href=\"#小结\">#</a> 小结</h3>\n<p>从源码和实例中我们可以总结出一些 stream 的特点</p>\n<ol>\n<li>通过简单的链式编程，使得它可以方便地对遍历处理后的数据进行再处理。</li>\n<li>方法参数都是函数式接口类型</li>\n<li>一个 Stream 只能操作一次，操作完就关闭了，继续使用这个 stream 会报错。</li>\n<li>Stream 不保存数据，不改变数据源</li>\n</ol>\n<h2 id=\"7-optional\"><a class=\"markdownIt-Anchor\" href=\"#7-optional\">#</a> 7 - Optional</h2>\n<p>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGFyZS53ZWl5dW4uY29tL1RodXFFYkQ1\">阿里巴巴开发手册</span>关于 Optional 的介绍中这样写到</p>\n<p>防止 NPE，是程序员的基本修养，注意 NPE 产生的场景：</p>\n<p>1）返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE</p>\n<p>反例：public int f (){return Integer 对象}，如果为 null，自动拆箱会抛 NPE</p>\n<p>2）数据库的查询结果可能为 null</p>\n<p>3）集合里的元素即使 isNotEmpty，取出的数据元素也可能为 null</p>\n<p>4）远程调用返回对象时，一律要求进行空指针判断，防止 NPE</p>\n<p>5）对于 Session 中获取的数据，建议进行 NPE 检查，避免空指针</p>\n<p>6）级联调用 obj.getA ().getB ().getC ()；一连串调用，易产生 NPE</p>\n<p>正例：使用 JDK8 的 Optional 类来防止 NPE 问题</p>\n<p><code>Optional</code>  在包 <code>java.util.Optional</code>  内，就是为防止 NPE 而生，其中可以包含空值或非空值。</p>\n<p>补充一下：</p>\n<p><strong>什么是 NPE？</strong></p>\n<p><code>NPE(java.lang.NullPointerException)</code> : 空指针异常。</p>\n<p><strong>怎么减少 NPE 的发生？</strong></p>\n<p>1. 遵守代码规范</p>\n<p>2. 使用 Optional 类 😃</p>\n<p>3. 空值检测</p>\n<h3 id=\"一个例子\"><a class=\"markdownIt-Anchor\" href=\"#一个例子\">#</a> 一个例子</h3>\n<p>假设有一个 Zoo 类，里面有个属性 Dog，需求要获取 Dog 的 age。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Zoo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">Dog</span> dog<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>传统防止 NPE 的方式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Zoo</span> zoo <span class=\"token operator\">=</span> <span class=\"token function\">getZoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>zoo <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">Dog</span> dog <span class=\"token operator\">=</span> zoo<span class=\"token punctuation\">.</span><span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dog <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> dog<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其实传统方式虽然一层一层的判空，代码多，但是挺直观的。</p>\n<p>Optional  是这样的实现的：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>zoo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>o<span class=\"token punctuation\">.</span><span class=\"token function\">getDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d<span class=\"token punctuation\">.</span><span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>age<span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span>                                                                      </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对应着下面的方法说明很容易看懂的啦～～</span></pre></td></tr></table></figure><h3 id=\"optional类的方法\"><a class=\"markdownIt-Anchor\" href=\"#optional类的方法\">#</a> Optional 类的方法</h3>\n<p>上例的 Optional.ofNullable 只是其中的一种创建 Optional 的方法。</p>\n<p>它的结构图如下：</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221020233544717.png\" alt=\"image-20221020233544717\"></p>\n<ol>\n<li><strong>创建 Optional 类对象</strong></li>\n</ol>\n<p><strong>Optional.of(T t)</strong> : \t创建一个 Optional 实例，t 必须非空；</p>\n<p><strong>Optional.empty() :</strong>    创建一个空的 Optional 实例</p>\n<p><strong>Optional.ofNullable(T t)：</strong>\tt 可以为 null</p>\n<ol start=\"2\">\n<li><strong>判断 Optional 容器是否包含对象</strong></li>\n</ol>\n<p><strong>boolean isPresent()：</strong>  判断是否包含对象</p>\n<p><strong>void ifPresent(Consumer&lt;? super T&gt; consumer)：</strong>  如果有值，就执行 Consumer 接口的实现代码，并且该值会作为参数传给它。</p>\n<ol start=\"3\">\n<li><strong>获取 Optional 容器里装的对象</strong></li>\n</ol>\n<p><strong>T get()</strong>：如果调用对象包含值，返回该值，否则抛异常</p>\n<p><strong>T orElse(T other)</strong>：如果有值则将其返回，否则返回指定的 other 对象</p>\n<p><strong>T orElseGet(Supplier&lt;? extends t&gt; other)</strong>：如果有值则将其返回，否则返回由 Supplier 接口实现提供的对象。</p>\n<p><strong>T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</strong>：如果有值则将其返回，否则抛出由 Supplier 接口实现提供的异常。</p>\n<ol start=\"4\">\n<li><strong>搭配使用</strong></li>\n</ol>\n<p><strong>of()</strong> 和 <strong>get()</strong> 方法搭配使用，明确对象非空</p>\n<p><strong>ofNullable()</strong> 和 <strong>orElse()</strong> 搭配使用，不确定对象非空</p>\n<h3 id=\"代码示例\"><a class=\"markdownIt-Anchor\" href=\"#代码示例\">#</a> 代码示例：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OptionalTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//empty (): 创建的 Optional 对象内部的 value = null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> op1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>op1<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//Optional 封装的数据是否包含数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 如果 Optional 封装的数据 value 为空，则 get () 报错。否则，value 不为空时，返回 value.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//        str = null;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//of (T t): 封装数据 t 生成 Optional 对象。要求 t 非空，否则报错。</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> op1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//get () 通常与 of () 方法搭配使用。用于获取内部的封装的数据 value</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> op1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span><span class=\"token string\">\"Beijing\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        str <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">//ofNullable (T t) ：封装数据 t 赋给 Optional 内部的 value。不要求 t 非空</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> op1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>op1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">//orElse (T t1): 如果 Optional 内部的 value 非空，则返回此 value 值。如果</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">//value 为空，则返回 t1.</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> op1<span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shanghai\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用  <code>Optional</code>  类避免产生空指针异常</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GirlBoyOptionalTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 使用原始方法进行非空检验</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getGrilName1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boy</span> boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>boy <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">Girl</span> girl <span class=\"token operator\">=</span> boy<span class=\"token punctuation\">.</span><span class=\"token function\">getGirl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>girl <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">return</span> girl<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 使用 Optional 类的 getGirlName () 进行非空检验</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getGirlName2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boy</span> boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boy</span><span class=\"token punctuation\">></span></span> boyOptional <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 此时的 boy1 一定非空，boy 为空是返回 “迪丽热巴”</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Boy</span> boy1 <span class=\"token operator\">=</span> boyOptional<span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Boy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Girl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"迪丽热巴\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Girl</span> girl <span class=\"token operator\">=</span> boy1<span class=\"token punctuation\">.</span><span class=\"token function\">getGirl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//girl1 一定非空，girl 为空时返回 “古力娜扎”</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Girl</span><span class=\"token punctuation\">></span></span> girlOptional <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>girl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Girl</span> girl1 <span class=\"token operator\">=</span> girlOptional<span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Girl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古力娜扎\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> girl1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 测试手动写的控制检测</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Boy</span> boy <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getGrilName1</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        boy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getGrilName1</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        boy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Girl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"杨幂\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getGrilName1</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 测试用 Optional 类写的控制检测</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">Boy</span> boy <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getGirlName2</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        boy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getGirlName2</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        boy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Girl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"杨幂\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getGirlName2</span><span class=\"token punctuation\">(</span>boy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"8-date-time-api\"><a class=\"markdownIt-Anchor\" href=\"#8-date-time-api\">#</a> 8 - Date-Time API</h2>\n<p>Java8 在 <code>java.time</code>  包下包含一个全新的日期和时间 API，这是对   <code>java.util.Date</code>  的强有力补充，解决了 Date 类的大部分痛点：</p>\n<p>1. 非线程安全</p>\n<p>2. 时区处理麻烦</p>\n<p>3. 各种格式化、时间计算繁琐</p>\n<p>4. 设计有缺陷，Date 类同时包括日期和时间；还有一个 java.sql.Date，容易混淆</p>\n<p>Clock、ZoneId、LocalTime、LocalDate、</p>\n<p><code>java.time</code>  常用的类：而在旧版本中是 <code>java.util.Date</code>  既包含日期又包含时间</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ocalDateTime<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token comment\">// 日期 + 时间 format: yyyy-MM-ddTHH:mm:ss.SSS</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token comment\">// 日期 format: yyyy-MM-dd</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token comment\">// 时间 format: HH:mm:ss</span></pre></td></tr></table></figure><h3 id=\"localtime本地时间\"><a class=\"markdownIt-Anchor\" href=\"#localtime本地时间\">#</a> LocalTime (本地时间)</h3>\n<p>LocalTime 定义了一个没有时区信息的时间，例如 晚上 10 点或者 17:30:15</p>\n<p><strong>结构图</strong>：</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221020233419554.png\" alt=\"image-20221020233419554\"></p>\n<h3 id=\"localdate本地日期\"><a class=\"markdownIt-Anchor\" href=\"#localdate本地日期\">#</a> LocalDate (本地日期)</h3>\n<p>LocalDate 表示了一个确切的日期，比如 2022-04-18。该对象值是不可变的，用起来和 LocalTime 基本一致。</p>\n<p><strong>结构图</strong>：没有显示继承依赖等信息</p>\n<p><img data-src=\"https://image.dabing.cool/image/image-20221020233438253.png\" alt=\"image-20221020233438253\"></p>\n<p><strong>例子展示</strong>：如何给 Date 对象加减天 / 月 / 年。另外注意这些对象是不可变得，操作返回的总是给一个新实例。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDate</span> today<span class=\"token operator\">=</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取现在的日期</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"今天的日期：\"</span><span class=\"token operator\">+</span>today<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2022-04-18</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">LocalDate</span> tomorrow <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ChronoUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DAYS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 明天的日期</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"明天的日期：\"</span><span class=\"token operator\">+</span>tomorrow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2022-04-19</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">LocalDate</span> yersterday1 <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">minusDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">LocalDate</span> yersterday2 <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">ChronoUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DAYS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"昨天的日期1：\"</span><span class=\"token operator\">+</span>yersterday1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"昨天的日期2：\"</span><span class=\"token operator\">+</span>yersterday2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 有很多种实现方式</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">LocalDate</span> oneDay <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Month</span><span class=\"token punctuation\">.</span><span class=\"token constant\">JANUARY</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2022-01-01</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">DayOfWeek</span> dayOfWeek<span class=\"token operator\">=</span>oneDay<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfWeek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取那天是周几，有很多方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2022-01-01是周几：\"</span><span class=\"token operator\">+</span>dayOfWeek<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"localdatetime本地日期时间\"><a class=\"markdownIt-Anchor\" href=\"#localdatetime本地日期时间\">#</a> LocalDateTime (本地日期时间)</h3>\n<p>LocalDateTime 同时表示了时间和日期，相当于前两节内容合并到一个对象上了。LocalDateTime 和 LocalTime 还有 LocalDate 一样，都是不可变的。LocalDateTime 提供了一些能访问具体字段的方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> sylvester <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2014</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Month</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DECEMBER</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">59</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">DayOfWeek</span> dayOfWeek1 <span class=\"token operator\">=</span> sylvester<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfWeek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dayOfWeek1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// WEDNESDAY</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Month</span> month <span class=\"token operator\">=</span> sylvester<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>month<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// DECEMBER</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">long</span> minuteOfDay <span class=\"token operator\">=</span> sylvester<span class=\"token punctuation\">.</span><span class=\"token function\">getLong</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChronoField</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTE_OF_DAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>minuteOfDay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 1439  59h*60+59=1439min</span></pre></td></tr></table></figure><h3 id=\"格式化\"><a class=\"markdownIt-Anchor\" href=\"#格式化\">#</a> 格式化</h3>\n<p>格式化 LocalDateTime 和格式化时间和日期一样的，除了使用预定义好的格式外，我们也可以自己定义格式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">DateTimeFormatter</span> formatter <span class=\"token operator\">=</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MM dd, yyyy - HH:mm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> parsed <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"09 03, 2014 - 07:13\"</span><span class=\"token punctuation\">,</span> formatter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> string <span class=\"token operator\">=</span> formatter<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 09 03, 2014 - 07:13</span></pre></td></tr></table></figure><h3 id=\"解析字符串\"><a class=\"markdownIt-Anchor\" href=\"#解析字符串\">#</a> 解析字符串</h3>\n<p>1. 字符串 —&gt; 时间日期  parse</p>\n<p>2. 时间日期 —&gt; 字符串  format</p>\n<p>如果是默认格式，不需要用到 <code>DateTimeFormatter</code>  直接 parse 即可，</p>\n<p>非默认格式，使用 <code>DateTimeFormatter</code>  解析字符串：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str1<span class=\"token operator\">=</span><span class=\"token string\">\"2022==04==18 01时06分09秒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">DateTimeFormatter</span> formatter1<span class=\"token operator\">=</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy==MM==dd HH时mm分ss秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> dateTime1 <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> formatter1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dateTime1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出  2022-04-18T01:06:09</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"2014$$$四月$$$13 20小时\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">DateTimeFormatter</span> fomatter2 <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyy$$$MMM$$$dd HH小时\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这里还不太明白</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> dt2 <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span> fomatter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dt2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 2014-04-13T20:00</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 默认的格式解析不用 famtter，直接 parse 即可</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-26\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-26T12:12:22\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12:12:22\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "Java新特性"
            ]
        },
        {
            "id": "https://blog.dabing.cool/java/JVM-%E5%88%9D%E7%BA%A7/",
            "url": "https://blog.dabing.cool/java/JVM-%E5%88%9D%E7%BA%A7/",
            "title": "JVM-初级",
            "date_published": "2022-01-01T02:00:00.000Z",
            "content_html": "<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llcmVueXVhbl9wa3UvYXJ0aWNsZS9kZXRhaWxzLzEwMzMyMDc1Nw==\">https://blog.csdn.net/yerenyuan_pku/article/details/103320757</span></p>\n<blockquote>\n<p>一些常见面试题（全是理论）</p>\n</blockquote>\n<ul>\n<li><strong>谈谈你对 JVM 的理解？Java8 虚拟机和之前的变化</strong></li>\n</ul>\n<p>​</p>\n<ul>\n<li><strong>什么是 OOM，什么是栈溢出 StackOverflowError？怎么分析？</strong></li>\n</ul>\n<p>​\t\tOOM，全称是 Out Of Memory，内存用完了。（JVM 没有足够的内存来为对象分配空间并且垃圾\t\t回收器也没有空间可以回收了，就会抛出这个 error）</p>\n<p>​\t\t <code>原因</code> ：1）分配的少了（启动时 VM 参数可以指定虚拟机本身可使用的内存大小）</p>\n<p>​\t\t\t\t  2）应用用的太多了（会造成内存泄露和内存溢出）</p>\n<p>​\t\t最常见的 OOM <code>情况</code> ：</p>\n<p>​\t\t\t\t1）堆内存溢出</p>\n<p>​\t\t\t\t2）方法区溢出</p>\n<p>​\t\t\t\t3）StackOverflowError 栈溢出</p>\n<p>​\t\t <code>分析</code>  —heapdump</p>\n<p>​\t\t\t\tdump 堆的内存镜像，可以采用两种方式：</p>\n<p>​\t\t\t\t\t1. 设置 JVM 参数   HeapDumpOnOutOfMemoryError</p>\n<p>​\t\t\t\t\t2. 使用 JDK 自带的 jamp 命令   &quot;jmap -dump:format=b,file=heap.bin <pid>&quot;  其中 pid 可\t\t\t\t\t以通过 jps 获取。</p>\n<p>​\t\t\t   dump 堆的内存镜像，使用工具分析：mat、jhat</p>\n<p>​\t\t详细解释：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vVGhpbmtWZW51cy9wLzY4MDU0OTUuaHRtbA==\">https://www.cnblogs.com/ThinkVenus/p/6805495.html</span></p>\n<ul>\n<li><strong>JVM 的常用调优参数有哪些？</strong></li>\n<li><strong>内存快照如何抓取，怎么分析 Dump 文件？</strong></li>\n<li><strong>谈谈 JVM 中类加载器你的认识？</strong></li>\n</ul>\n<blockquote>\n<p>一些概念理解</p>\n</blockquote>\n<h2 id=\"1jvm的位置\"><a class=\"markdownIt-Anchor\" href=\"#1jvm的位置\">#</a> 1.JVM 的位置</h2>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220412105259491.png\" alt=\"image-20220412105259491\"></p>\n<h2 id=\"2jvm的体系结构\"><a class=\"markdownIt-Anchor\" href=\"#2jvm的体系结构\">#</a> 2.JVM 的体系结构</h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191130085643146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<h2 id=\"3类加载器\"><a class=\"markdownIt-Anchor\" href=\"#3类加载器\">#</a> 3. 类加载器</h2>\n<p>作用：加载 class 文件，</p>\n<p>类是模板，对象是具体的</p>\n<p>具体对象放在堆里，对象引用放在栈里，存在的是对象的地址</p>\n<p>getClass()</p>\n<p>getClassLoader()</p>\n<p>1. 类加载器收到类加载器的请求</p>\n<p>2. 将这个请求向上委托给父类加载器去完成，一直向上委托，直到启动类加载器</p>\n<p>3. 启动加载器检查是否能够加载当前类，能加载就结束，使用当前的加载器，否则，抛出异常，通知子加载器加载</p>\n<p>4. 重复步骤 3</p>\n<p>Class Not Found~</p>\n<p>null:Java 调用不到，</p>\n<p>Java：c+±- 去掉的繁琐部分，如指针、内存管理</p>\n<p>类装载器（ClassLoader）负责加载 class 文件，class 文件在文件开头有特定的文件标示，ClassLoader 只负责 class 文件的加载，至于它是否可以运行，则由 Execution Engine 决定。</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220412105420360.png\" alt=\"image-20220412105420360\"></p>\n<p>jvm 虚拟机自带的类加载器有四种：</p>\n<p>1. 启动类加载器（Bootstrap）：c++ 编写</p>\n<p>2. 扩展类加载器（Extension）：Java 编写</p>\n<p>3. 应用程序类加载器（AppClassLoader）：或者叫系统类加载器，用于加载当前应用 classpath 下的所有类</p>\n<p>4. 用户自定义加载类：Java.lang.ClassLoader 的子类，用户可以定制类的加载方式</p>\n<p>双亲委派，向上委托 4321</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191130095429988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<h2 id=\"4双亲委派机制\"><a class=\"markdownIt-Anchor\" href=\"#4双亲委派机制\">#</a> 4. 双亲委派机制</h2>\n<p>类加载的时候的一个安全机制，为了保证安全</p>\n<p>app（当前应用程序）-&gt;exc (扩展)-&gt;boot</p>\n<p>如上图所示，自顶向下加载，保证代码安全，防止恶意代码对源代码的修改。</p>\n<h2 id=\"5沙箱安全机制\"><a class=\"markdownIt-Anchor\" href=\"#5沙箱安全机制\">#</a> 5. 沙箱安全机制</h2>\n<p>详细说明参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTXlTdHJpbmdJc05vdE51bGwvcC84MjY4MzUxLmh0bWw=\">https://www.cnblogs.com/MyStringIsNotNull/p/8268351.html</span></p>\n<p>就是说你写了一个 Java 程序，默认情况你是可以任务访问这台机器的任何资源的。但是你把程序部署到正式的服务器上的时候，要保证你的程序不会对这个服务器有伤害，访问一些不该访问的资源。</p>\n<p>消除安全隐患，有两种办法：</p>\n<p>1. 让你的程序在一个限定权限的账号下运行</p>\n<p>2. 利用 Java 的 <code>沙箱机制</code> 来限定程序不为非作歹。</p>\n<p>沙箱（sandbox）是一个限制程序运行的环境。沙箱机制就是将 Java 代码限定在虚拟机特性的运行范围，并且严格限制代码对本地系统资源访问，通过这样的措施来保证对代码的有效隔离。</p>\n<p>组成沙箱的基本 <code>组件</code> ：字节码校验器、类装载器、存取控制器、安全管理器、安全软件包</p>\n<p>沙箱包含的 <code>要素</code> ：权限、代码源、保护域、策略文件、密钥库</p>\n<h2 id=\"6native\"><a class=\"markdownIt-Anchor\" href=\"#6native\">#</a> 6.Native</h2>\n<p>加个 native 关键字，说明 Java 的作用范围达不到了，会去调用底层 C 语言的库</p>\n<p>会进入本地方法栈，调用本地方法接口，即 JNI</p>\n<p>JNI 的作用：扩展 Java 的使用，融合不同的编程语言为 Java 使用！最初：C、C++</p>\n<p>Java 诞生的时候：C、C<ins> 横行，想要立足，必须要调用 C、c</ins></p>\n<p>在 Execution 执行的时候，加载本地方法库</p>\n<p>它再内存区域中专门开辟了一块标记区域，Native Method Stack <code>本地方法栈</code> ，限定只标记了 <code>native</code>  的方法才能塞进去。塞进去的方法但凡想要被执行，只能求助于操作系统，然后调用 <code>本地方法接口</code> （操作系统的），调用本地方法接口时还需要 <code>本地方法库</code> （类似于 jar 包，即 dll 动态连接库）的支持，最后，本地方法想要运行，还得把这个方法先做一个 <code>入栈</code> 的操作。</p>\n<p>目前这个方法使用的越来越少了，除非是跟硬件相关的应用，比如通过 Java 程序驱动打印机或者 Java 系统管理生产设备，在企业级应用中少见。因为现在的异构领域间的通信很发达，比如可以 Socket 通信，也可以使用 WebService 等。</p>\n<h2 id=\"7pc寄存器\"><a class=\"markdownIt-Anchor\" href=\"#7pc寄存器\">#</a> 7.PC 寄存器</h2>\n<p>每个线程都有一个程序计数器，线程私有，它是一个指针，指向方法区中的方法字节码（用来存储指向下一条指令的地址，即即将要执行的指令）由执行引擎读取下一条指令。</p>\n<p>pc 寄存器（程序计数器）不是用来做存储的，是用来做计算的。</p>\n<h2 id=\"8方法区\"><a class=\"markdownIt-Anchor\" href=\"#8方法区\">#</a> 8. 方法区</h2>\n<p>方法区是被所有线程 <code>共享</code> 的，所有字段和方法字节码，以及一些特殊方法如构造函数、接口代码等也在此定义。简单说，所有<strong>定义的方法</strong>的信息都保存在该区域，此区属于共享区间。<br>\n类加载器把.class 文件读到内存里面变成 Class（元数据模板）之后，变成的 Class（元数据模板）就存放在方法区里面，相应地，所有的 Class（元数据模板）包含的信息都会放进去，包含的信息如下图所示。</p>\n<p><strong>静态变量、常量、类信息（构造函数、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，与方法区无关。</strong></p>\n<p>static、final、Class 模板、常量池</p>\n<h2 id=\"9栈\"><a class=\"markdownIt-Anchor\" href=\"#9栈\">#</a> 9. 栈</h2>\n<p>一种数据结构，先进后出、后进先出</p>\n<p>程序 = 数据结构 + 算法：持续学习</p>\n<p><strong>码农 = 框架 + 业务逻辑</strong>：吃饭</p>\n<p>为什么 main 方法先执行，最后结束？</p>\n<p>就是使用了栈</p>\n<p>栈内存，<strong>主管程序的运行</strong>，生命周期和线程同步</p>\n<p>线程结束，栈内存也就释放了，对于栈来说，不存在垃圾回收问题</p>\n<p>一旦线程结束，栈就 over 了</p>\n<p>其中，8 种基本类型的变量 + 对象的引用变量 + 实例方法都是在函数的栈内存中分配的。</p>\n<p>栈运行原理：栈中的数据都是以栈帧（Stack Frame）的格式存在，栈帧是一个<strong>内存块</strong>，是一个<strong>数据集</strong>，也是一个有关方法和运行期的数据集。当一个方法被调用时会产生一个栈帧。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191130120854385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>更加详细的栈内的内存结构如下：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191130135946805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>反正就是说，每执行一个方法都会产生一个栈帧，保存到栈的顶部，顶部栈就是当前的方法，该方法执行完毕后会自动将此栈帧出栈，这个栈帧被弹出栈的时候就证明这个方法执行完毕了。</p>\n<p>栈满了：StackOverError</p>\n<h2 id=\"10三种jvm\"><a class=\"markdownIt-Anchor\" href=\"#10三种jvm\">#</a> 10. 三种 JVM</h2>\n<ul>\n<li>\n<p>Sun 公司 HotSpot   命令行可以查</p>\n<p>C:\\Users\\Lenovo&gt;<strong>java -version</strong><br>\njava version “1.8.0_202”<br>\nJava™ SE Runtime Environment (build 1.8.0_202-b08)<br>\nJava HotSpot™ 64-Bit Server VM (build 25.202-b08, mixed mode)</p>\n</li>\n<li>\n<p>BEA 公司 JRockit  最快，适合财务那些业务，很少用</p>\n</li>\n<li>\n<p>IBM 平台   j9 VM</p>\n</li>\n</ul>\n<h2 id=\"11堆\"><a class=\"markdownIt-Anchor\" href=\"#11堆\">#</a> 11. 堆</h2>\n<p>heap，一个 jvm 只有一个堆内存，堆内存的大小是可以调节的</p>\n<p>类加载器读取了类文件后，一般会把什么东西放在堆中？类，方法，常变量～，保存我们所有引用类型的真实对象</p>\n<p>堆内存还要细分为三个区：</p>\n<ul>\n<li>\n<p>新生区（伊甸园、幸存区（过度到养老区））</p>\n</li>\n<li>\n<p>养老区：一般不会被干掉</p>\n</li>\n<li>\n<p>永久区</p>\n<p>1.8 之后永久区用元空间代替了</p>\n</li>\n</ul>\n<p>GC 垃圾回收，主要是在伊甸园区和养老区</p>\n<p>假设内存满，OOM，堆内存不够  OutOfMemoryError</p>\n<h2 id=\"12新生区-老年区\"><a class=\"markdownIt-Anchor\" href=\"#12新生区-老年区\">#</a> 12. 新生区、老年区</h2>\n<ul>\n<li>\n<p>新生区：</p>\n<p>类诞生和成长，甚至死亡的地方</p>\n<p>伊甸园区：所有的对象都是在伊甸园区 new 出来</p>\n<p>幸存区（0、1）：</p>\n</li>\n</ul>\n<p>真相：经过研究，99% 的对象都是临时对象！</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191130155437604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>这个图一目了然</p>\n<h2 id=\"13永久区\"><a class=\"markdownIt-Anchor\" href=\"#13永久区\">#</a> 13. 永久区</h2>\n<p>这个区域常驻内存的，用来存放 JDK 自身携带的 class 对象。Interface 元数据，存储的是 Java 运行时的一些环境或类信息，这个区域不存在垃圾回收，关闭虚拟就会释放这个区域的内存</p>\n<p>jdk1.6 之前：永久代，常量池是在方法区</p>\n<p>jdk1.7：永久代，但是慢慢退化了，去永久化，常量池在堆中</p>\n<p>jdk1.8：无永久代，常量池在元空间</p>\n<p>方法区在元空间里，即堆里，也叫非堆（方法区相当于一个接口，而元空间时它的一个实现）</p>\n<p>方法区里有一个小空间是常量池</p>\n<p><img data-src=\"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4496/image-20220412105527906.png\" alt=\"image-20220412105527906\"></p>\n<p>方法区的实现：永久区、元空间</p>\n<p><img data-src=\"https://pic4.zhimg.com/v2-44c0f4dd02b0bbdd1b5524671e419e2f_r.jpg\" alt=\"preview\"></p>\n<h2 id=\"14堆内存调优\"><a class=\"markdownIt-Anchor\" href=\"#14堆内存调优\">#</a> 14 堆内存调优</h2>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llcmVueXVhbl9wa3UvYXJ0aWNsZS9kZXRhaWxzLzEwMzMyNzQ2Mz9zcG09MTAwMS4yMDE0LjMwMDEuNTUwMg==\">https://blog.csdn.net/yerenyuan_pku/article/details/103327463?spm=1001.2014.3001.5502</span></p>\n<p>Java8 堆内存的分布情况：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204102404945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>要多堆内存进行调优，必然要接触到以下三个参数：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204102413924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>使用：在调节 VM 参数的窗口设置：-Xms1024m -Xmx1024m -XX:+PrintGCDetails</p>\n<p>在控制台打印相关信息</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204102500573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204102507962.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>​\t所以这里设置的内存大小只包括新生区和养老区的总和大小，即调整的是物理上的堆内存大小。</p>\n<blockquote>\n<p>当出现 OOM 内存不足的时候如果查看信息和分析信息呢？</p>\n</blockquote>\n<p>前面面试题第二题其实也说过了，下面放一些示例的图片：</p>\n<p>设置把堆内存镜像 dump 出：使用 JVM 参数</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204133820938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>使用 mat 工具分析 dump 文件：（是 eclipse 的工具，可以在上面安装即可）</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204133900746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>上面生成的 dump 文件是默认存储在工程的根目录下，用 - <code>XX:HeapDumpPath=目录</code> 这个参数可以修改 dump 文件的位置</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204135217905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>这样就可以在 D 盘看到这个 dump 文件了</p>\n<p>如果使用的不用 eclipse 工具，也可以使用 jdk 自带的 <code>jvisualvm.exe</code>  工具来解析 dump 文件，在安装路径的 bin 目录下，直接双击这个程序，打开对应的 dump 文件就可以了。</p>\n<h2 id=\"15gc-常用方法\"><a class=\"markdownIt-Anchor\" href=\"#15gc-常用方法\">#</a> 15.GC  常用方法</h2>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llcmVueXVhbl9wa3UvYXJ0aWNsZS9kZXRhaWxzLzEwMzM4NzMxMj9zcG09MTAwMS4yMDE0LjMwMDEuNTUwMg==\">https://blog.csdn.net/yerenyuan_pku/article/details/103387312?spm=1001.2014.3001.5502</span></p>\n<ul>\n<li>\n<p>什么是 GC？就是分代收集算法。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204151857145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n</li>\n<li>\n<p>GC 的作用域？</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204151912657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>GC 按照回收的区域分为普通 GC 也叫 <code>轻量级GC</code>  (Minor GC)，一种是全局 GC 也叫 <code>重量级GC</code> (Major GC or Full GC)</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204161125942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n</li>\n<li>\n<p>GC 的四大算法</p>\n<p><code>引用计数法：</code> 在程序 new 一个对象出来的时候，我们给他一个计数器，有人引用这个对象的时候，这个计数器就自增 1，引用取消的时候减 1，当计数器为 0 的时候就 JVM 就可以把他回收掉了。</p>\n<p>已经淘汰了！</p>\n</li>\n</ul>\n<p>​\t\t <code>复制算法</code> （Copying）: 更详细的讲解可以看链接啦。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204172041291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>​\t\t\t就是说 new 对象放在伊甸园区，</p>\n<p>​\t\t\t然后再第一次进行垃圾回收的时候勒，就将存活下来的对象 copy 到幸存 0 区，</p>\n<p>​\t\t\t然后第二次将存活的对象（包括伊甸园和幸存 0 区）copy 到幸存 1 区，清空幸存 0 区了；</p>\n<p>​\t\t\t然后继续第三次的时候将伊甸园和 1 区的对象 copy 到 0 区，这样反复。</p>\n<p>​\t\t\t到 15 次（默认，可以通过  <code>-XX:MaxTenuringThreshold</code>  设置）还活下来的话就复制到老年区</p>\n<p>​\t\t <code>标记清除算法</code> 在内存用满的时候，GC 线程触发把程序暂停，然后堆内存遍历两次，第一次<strong>标记</strong>\t\t被引用的对象，要存活下来，第二次<strong>清除</strong>没被标记的对象。</p>\n<p>​\t\t但是这时候内存的碎片的。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204185818964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>​\t\t <code>标记压缩算法</code> 老年代一般是由标记清除或者是标记清除与标记整理的混合实现。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204185833455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>​\t <code>\t标记清除压缩算法</code> 就是上面两种算法的结合，先用多次的标记清除，然后这时候内存空间已经千疮百孔了，到处都是内存碎片，然后这时候统一用一次标记压缩就好了。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204185839681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<ul>\n<li>三种算法总结：</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204200152400.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191204200203963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9saWF5dW4uYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>基于上面的考虑，老年代一般是由标记清除或者是标记清除与标记压缩的混合实现。以 HotSpot 中的 CMS 回收器为例（只限于 Java8），CMS 是基于 Mark-Sweep 实现的，对于对象的回收效率很高，而对于碎片问题，CMS 采用基于 Mark-Compact 算法的 Serial Old 回收器做为补偿措施：当内存回收不佳（碎片导致的 Concurrent Mode Failure 时），将采用 Serial Old 执行 Full GC 以达到对老年代内存的整理。</p>\n<h2 id=\"16jmm\"><a class=\"markdownIt-Anchor\" href=\"#16jmm\">#</a> 16.JMM</h2>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNTgzOTMxMzk=\">https://zhuanlan.zhihu.com/p/258393139</span></p>\n<p>温馨提醒一下，这里有些人会把 Java 内存模型误解为 Java 内存结构，然后答到堆，栈，GC 垃圾回收，最后和面试官想问的问题相差甚远。<strong>实际上一般问到 Java 内存模型都是想问多线程，Java 并发相关的问题</strong>。</p>\n<p>如果面试的话，重点是 Java 内存模型 (JMM) 的 <code>工作方式</code> ， <code>三大特征</code> ，还有 <code>volatile</code>  关键字。为什么喜欢问 volatile 关键字呢，因为 volatile 关键字可以扯出很多东西，比如可见性，有序性，还有内存屏障等等。</p>\n<p>全称 Java Memory Model，JMM，Java 内存模型，它不仅仅是 JVM 内存分区。</p>\n<p>那这个 JMM 到底是什么东东啊？</p>\n<p>用来干嘛的？</p>\n<p>因为硬件生产商和操作系统的不同，内存的访问就有一定的差异，为了避免相同的代码在不同的系统下运行出现各种问题，Java 内存模型（JMM）就屏蔽掉各种硬件和操作系统的内存访问差异，实现让 Java 在不同的平台下都有相同的并发效果。</p>\n<p><code>工作方式</code> ：</p>\n<p>Java 内存模型规定<strong>所有的变量都存储在主内存</strong>中，包括实例变量，静态变量，但是不包括局部变量和方法参数。每个线程都有自己的工作内存，<strong>线程的工作内存保存了该线程用到的变量和主内存的副本拷贝，线程对变量的操作都在工作内存中进行</strong>。<strong>线程不能直接读写主内存中的变量</strong>。</p>\n<p>不同的线程之间也无法访问对方工作内存中的变量。线程之间变量值的传递均需要通过主内存来完成。</p>\n<p>每个线程的工作内存都是独立的，线程操作数据只能在工作内存中进行，然后刷回到主存。这是 Java 内存模型定义的线程基本工作方式。</p>\n<p><img data-src=\"https://pic3.zhimg.com/v2-f36f366c07a6188ea3fdefc794ba021a_r.jpg\" alt=\"preview\"></p>\n<p><code>三个特征</code> ：原子性、可见性、有序性</p>\n<p>​\t原子性（synchronized）</p>\n<p>​\t可见性（volatile、synchronized、final）</p>\n<p>​\t有序性（volatile、synchronized）</p>\n<p><code>八大内存交互操作</code> ：</p>\n<p><img data-src=\"https://pic4.zhimg.com/v2-42d8f894f17ccf13252d8d8d6285f86b_r.jpg\" alt=\"preview\"></p>\n<p><code>volatile</code> :</p>\n<p>​\t1. 保证线程间变量的可见性</p>\n<p>​\t2. 禁止 CPU 进行指令重排序</p>\n<h2 id=\"17总结\"><a class=\"markdownIt-Anchor\" href=\"#17总结\">#</a> 17 总结</h2>\n<p>1. 百度</p>\n<p>2. 思维导图</p>\n<p>单点登录 | SSO</p>\n",
            "tags": [
                "JVM"
            ]
        }
    ]
}