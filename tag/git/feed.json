{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"git\" tag",
    "description": "欢迎来到大冰的笔记空间~这里主要会记录编程学习笔记🌸",
    "home_page_url": "https://blog.dabing.cool",
    "items": [
        {
            "id": "https://blog.dabing.cool/java/git/",
            "url": "https://blog.dabing.cool/java/git/",
            "title": "git",
            "date_published": "2022-04-10T02:00:00.000Z",
            "content_html": "<p>🍈作者：王甜甜（dabing）</p>\n<h1 id=\"怎么将本地项目上传到github上\"><a class=\"markdownIt-Anchor\" href=\"#怎么将本地项目上传到github上\">#</a> 怎么将本地项目上传到 github 上？</h1>\n<p><strong>一、首先你先有个本地项目</strong></p>\n<p><strong>二、到 GitHub 上注册个账户，下载 git。该做的都做了（不会就百度）</strong></p>\n<p><strong>三、设置 ssh 密钥</strong></p>\n<p><strong>1 - 生成 ssh key</strong></p>\n<p>在电脑开始处找到的 git 文件下的 git Bash</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653320827784-ca8321c0-4ad3-4899-b388-5af3845e941b.png\" alt=\"img\"></p>\n<p>切换到～/.ssh 目录下，查看有没有密钥的文件。就是这几个文件，或者在电脑文件里找也行</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653321716749-a9efeef6-08a1-419c-aca8-1f0455b46021.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653321844403-ea98dbe3-f84d-4706-88cf-e29ab554341f.png\" alt=\"img\"></p>\n<p>如果没有就生成密钥，具体命令如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> ~/.ssh  <span class=\"token comment\"># 切换到～/.ssh 目录下</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~/.ssh</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ <span class=\"token function\">ls</span>\t <span class=\"token comment\"># 列出该目录的文件，看看有没有 ssh 的 key 文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>known_hosts</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~/.ssh</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>$ ssh-keygen <span class=\"token parameter variable\">-t</span> rsa <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"2261617090@qq.com\"</span>   <span class=\"token comment\"># 如果没有用这个命令生成，下面是打印信息不用管</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Generating public/private rsa key pair.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Enter <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token function\">which</span> to save the key <span class=\"token punctuation\">(</span>/c/Users/22616/.ssh/id_rsa<span class=\"token punctuation\">)</span>: <span class=\"token comment\">#这里让你确认密钥的生成位置，回车即可</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Enter passphrase <span class=\"token punctuation\">(</span>empty <span class=\"token keyword\">for</span> no passphrase<span class=\"token punctuation\">)</span>: <span class=\"token comment\"># 这里让你输入密码，我这里不填密码，不用密码太麻烦，回车即可</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Enter same passphrase again: <span class=\"token comment\"># 回车即可</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Your identification has been saved <span class=\"token keyword\">in</span> /c/Users/22616/.ssh/id_rsa</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Your public key has been saved <span class=\"token keyword\">in</span> /c/Users/22616/.ssh/id_rsa.pub</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>The key fingerprint is:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>SHA256:QZhUaReYx2/x1Bu14GwFOB9HaTKlAJ56sLydHJhKqfE <span class=\"token number\">2261617090</span>@qq.com</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>The key's randomart image is:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>+---<span class=\"token punctuation\">[</span>RSA <span class=\"token number\">3072</span><span class=\"token punctuation\">]</span>----+</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">|</span>     <span class=\"token punctuation\">..</span>+o*oo.o<span class=\"token operator\">+=</span>+<span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">|</span>      o.* <span class=\"token operator\">=</span>o<span class=\"token operator\">=</span><span class=\"token operator\">+=</span><span class=\"token operator\">=</span>o<span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">|</span>       o.<span class=\"token operator\">=</span> .oO*.o<span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">|</span>      o *.  +<span class=\"token punctuation\">..</span>. <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token builtin class-name\">.</span> o *So <span class=\"token builtin class-name\">.</span>     <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">|</span>    <span class=\"token operator\">=</span> <span class=\"token builtin class-name\">.</span> <span class=\"token operator\">=</span> o      <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token builtin class-name\">.</span> E <span class=\"token builtin class-name\">.</span> +       <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">|</span>                 <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">|</span>                 <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>+----<span class=\"token punctuation\">[</span>SHA256<span class=\"token punctuation\">]</span>-----+</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> ~/.ssh   <span class=\"token comment\"># 再切换过来看看</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token number\">22616</span>@hexb MINGW64 ~/.ssh</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>$ <span class=\"token function\">ls</span>\t<span class=\"token comment\"># 这下有了</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>id_rsa  id_rsa.pub  known_hosts  known_hosts.old</pre></td></tr></table></figure><p>这下已经生成密钥了，在 <code>C:\\Users\\22616\\.ssh</code>  路径下：打开 <code>id_rsa.pub</code>  这个是公钥，复制内容。</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653354976106-387e0032-f1ab-4083-8256-9cabb1f2f7b9.png\" alt=\"img\"></p>\n<p><strong>2 - 在 github 上设置 ssh key</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653322307223-9bdbca7a-6f5d-4f0d-896b-f6da2d35d9bf.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653322465457-a5d22820-a5a0-40e6-b18f-a582673b6675.png\" alt=\"img\"></p>\n<p>ok~~</p>\n<p><strong>四、GitHub 上建个仓库</strong></p>\n<p>new—&gt; 起个名 ----&gt; 创建</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653355092749-ffe2be8e-064c-434a-82e5-7689a5cdae69.png\" alt=\"img\"></p>\n<p>起个名～然后创建就行</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653355179304-fa420499-c23f-4175-b9e8-d8783173d0e1.png\" alt=\"img\"></p>\n<p><strong>五、将本地的项目提交到 GitHub 上</strong></p>\n<p><strong>1- 建立 git 仓库，Git Bash 切换到本地项目的根目录下，或者直接到项目目录里，右键 Git Bash 打开</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653322685848-52768f7f-44ad-4205-a0f8-c82e7f78043c.png\" alt=\"img\"><strong> 执行</strong> <code>git init</code> <strong> 命令，将这个项目变成 git 可以管理的仓库</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> init</pre></td></tr></table></figure><p><strong>2 - 将项目的所有文件添加到仓库，add 不仅可以添加单个文件，也可以跟通配符 ，可以跟目录。一个</strong> <code>.</code> <strong> 表示当前目录下的所有文件都 add</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p><strong>3 - 将 add 的文件 commit 到本地仓库</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"注释信息\"</span></pre></td></tr></table></figure><p><strong>4 - 关联 GitHub 仓库，把你刚刚创建的 GitHub 上的仓库路径复制一下，使用 ssh</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653323144193-1a0ec826-038c-4af1-8aeb-f4aa18d34213.png\" alt=\"img\"></p>\n<p>执行命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@github.com:dabing85/OA---SSM.git</pre></td></tr></table></figure><p><strong>5 - 在上传代码之前，最好先 pull 一下</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> pull origin master</pre></td></tr></table></figure><p><strong>6 - 上传代码到 github 远程仓库上</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master</pre></td></tr></table></figure><p>好了，到这就完成了</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653355902995-b4ba474e-63cc-42e5-8a98-2cc70e8efd01.png\" alt=\"img\"></p>\n<h1 id=\"一个很适合练习git的地方\"><a class=\"markdownIt-Anchor\" href=\"#一个很适合练习git的地方\">#</a> 一个很适合练习 git 的地方</h1>\n<p>网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vc2NoaW5hLmdpdGVlLmlvL2xlYXJuLWdpdC1icmFuY2hpbmcv\">https://oschina.gitee.io/learn-git-branching/</span></p>\n<p>我是从 gitee 底下点的，找 git 的学习资料也可以在 gitee 底下找。</p>\n<p>记一下我做了啥题，做着做着就忘了～～～（分主要、远程两部分）</p>\n<p><strong>一、主要题</strong></p>\n<ol>\n<li><code>git commit</code>   提交代码</li>\n<li><code>git branch newBranch</code>   创建一个名为 newBranch 的新分支</li>\n<li><code>git checkout newBranch</code>  切换到 newBranch 分支</li>\n<li><code>git merge newBranch</code>   将 newBranch 的代码合并到当前分支</li>\n<li>举个例子：将 <code>newBranch</code>  新写的代码提交，然后将它跟主分支 <code>master</code>  合并</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout newBranch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> checkout master</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> commit</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> merge newBranch</pre></td></tr></table></figure><ol>\n<li><code>git rebase master</code>  也是合并分支，但是这个合并分支可以看到提交的记录</li>\n<li>相对引用 <code>^</code>  可以找到它的父节点，即上次提交的记录。</li>\n</ol>\n<p>例如切换到 bugFix 分支的父节点：</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653367143898-9ff5e0db-ddd5-42d3-ae36-56d972a6f5ad.png\" alt=\"img\"></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> checkout bugFix^</pre></td></tr></table></figure><ol>\n<li>相对引用 2 <code>~</code>  也是用来移动的，让 head 指向它的父节点。因为 <code>^</code>  是一次只往回移动一步， <code>~</code> + <code>数字</code> 可以移动多步，使用命令 <code>git checkout head~4</code></li>\n</ol>\n<p>head 本来是指向 c4 节点的，往以前提交的记录移动 4 个位置，到 c0</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653367488026-5a693369-0ab2-4fc1-bc8e-e4b05e186c89.png\" alt=\"img\"></p>\n<ol>\n<li>使用 <code>~</code>  配合 <code>-f</code>  可以强制修改分支的位置</li>\n</ol>\n<p>例如 <code>git branch -f master head~3</code>  这个命令的意思是将 master 分支的指向强制移动到 head 节点的第 3 级父级节点处。</p>\n<p>原本 master 分支是跟 bugFix 分支一样指向 c4 的，执行命令后，将 master 分支强制移动到了 c1 的提交记录位置去了。</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653368510537-fcd56a3a-8c96-4fa5-87be-08c128d913db.png\" alt=\"img\"></p>\n<p>二、远程题（实线是本地仓库，虚线是远程仓库）</p>\n<ol>\n<li><code>git clone</code>   -  在本地创建一个远程仓库的拷贝（比如从 <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20=\">github.com</span>）</li>\n<li><code>/</code> - 这是远程分支的命令规则，即远程仓库名 / 分支名，   如一般会取名为： <code>origin/master</code></li>\n<li><code>git fetch</code> - 从远程获取数据，并且本地的远程分支也会更新到最新的位置。</li>\n</ol>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653626701083-63d353e0-2ff0-4d8f-b96f-f1dc838c85b4.png\" alt=\"img\"></p>\n<p>git fetch 完成了两件事：</p>\n<ul>\n<li>从远程仓库下载本地</li>\n<li>更新远程分支（o/master）</li>\n</ul>\n<p><code>git fetch</code>  通常通过互联网（使用  <code>http:// </code> 或  <code>git:// </code> 协议) 与远程仓库通信</p>\n<p>注意 git fetch 只是把远程仓库的数据 <code>下载</code> 下来而已，并没有更新本地仓库的内容</p>\n<ol>\n<li><code>git pull</code> - 相当于 git fetch 和 git merge  o/master 两步操作，即先抓取更新，再合并到本地分支。</li>\n<li><code>git push</code> - 正好跟 pull 是相反的，将你的变更上传到指定的远程仓库，并在远程仓库上合并你的新提交记录。一旦 git push 成功，你的小伙伴就能在远程仓库下载你的分享成果了。</li>\n</ol>\n<p>如果你的 git push 没有带任何参数，那么它会是上传到你配置里默认的仓库里去，在 push.default 中有配置。但是我在我的项目里咋没找到这个配置</p>\n<ol>\n<li>对于有偏差的提交历史，咋办？就是在你 push 之前，你的同事已经在远程仓库上有提交了，如果他修改的 api 你使用到了，那就会发生冲突，你直接 push 是会失败的。</li>\n</ol>\n<p>这时，你需要先把远程仓库的数据更新到本地，再把你的本地提交 push 到远程仓库，你的修改就是基于新的远程分支的。具体操作：先 git pull ；再 git push</p>\n<p>也可以用 rebase 的方式合并，即先 git pull --rebase；再 git push</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653629059279-6dce82f7-1d33-4951-ae5d-219db6132668.png\" alt=\"img\"></p>\n<ol>\n<li>待做题 。。。。。。</li>\n</ol>\n<h1 id=\"在idea中使用git\"><a class=\"markdownIt-Anchor\" href=\"#在idea中使用git\">#</a> 在 idea 中使用 git？</h1>\n<h2 id=\"1-将你的项目初始化成一个git项目\"><a class=\"markdownIt-Anchor\" href=\"#1-将你的项目初始化成一个git项目\">#</a> 1 - 将你的项目初始化成一个 git 项目：</h2>\n<p>配置 Git  : VCS----&gt;Enable Version ----&gt; 选择 Git</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653663946711-f1ed609e-920a-42ad-acf1-b0a9bf76e857.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653664001651-e0c039b8-bed1-41e4-9a00-2a2dffcf0060.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653664096827-8c7f9bdf-1eee-496c-8280-b2849bf9e770.png\" alt=\"img\"></p>\n<p>看控制台的命令， <code>git init</code> , 这个操作会在本地创建一个本地仓库。</p>\n<h2 id=\"2-文件颜色说明\"><a class=\"markdownIt-Anchor\" href=\"#2-文件颜色说明\">#</a> 2- 文件颜色说明：</h2>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653664194120-0b8015de-feaa-406c-a09e-91e81c0cf95c.png\" alt=\"img\"><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653666563905-5cbad4f7-b538-4a20-9483-eee8c85b5a8b.png\" alt=\"img\"></p>\n<p><code>红色</code> 证明这个文件只是在<strong>工作区</strong>，git 是不管理红色文件的， <code>add</code>  之后变成 <code>绿色</code> 表示添加到了<strong>暂存区</strong>，再 <code>commit</code>  之后会变成普通的 <code>黑色</code> 保存到<strong>本地仓库</strong>，再 <code>push</code>  之后，会把本地仓库的文件上传到<strong>远程仓库</strong>并合并。而当你对文件进行过修改后，文件颜色会变成 <code>蓝色</code></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653664544471-10cdb690-687f-46f8-898f-f33d7fea64c8.png\" alt=\"img\"></p>\n<ul>\n<li>Workspace：工作区 (当前用户操作修改的区域)</li>\n<li>Index / Stage：暂存区 (add 后的区域)</li>\n<li>Repository：仓库区或本地仓库 (commit 后的区域)</li>\n<li>Remote：远程仓库 (push 后的区域)</li>\n</ul>\n<p>写多了，回来～～～</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653665079816-05a82e00-9349-46a0-ae6d-cc42c7e5de92.png\" alt=\"img\"></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653665404091-711c9498-e9f2-465d-9a29-36ec10b4892f.png\" alt=\"img\"></p>\n<p>可以再这看看人家 git 命令怎么用的</p>\n<h2 id=\"3-将文件commit-提交到本地仓库\"><a class=\"markdownIt-Anchor\" href=\"#3-将文件commit-提交到本地仓库\">#</a> 3 - 将文件 commit 提交到本地仓库:</h2>\n<p>sorry，我这里图标错啦，✔那个是 commit，↗是 push</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653665755831-df58f364-de57-4ab2-a222-0de9f68760c9.png\" alt=\"img\"></p>\n<h2 id=\"4-将本地仓库的文件-push-上传到远程分支上\"><a class=\"markdownIt-Anchor\" href=\"#4-将本地仓库的文件-push-上传到远程分支上\">#</a> 4 - 将本地仓库的文件 push 上传到远程分支上</h2>\n<p>要上传到远程上，你首先得先关联你的远程 git。比如 gitee。</p>\n<p><strong>在远程仓库上创建一个新项目</strong></p>\n<p><strong>将本地项目关联到远程仓库</strong></p>\n<p>我在 gitee 上创建，先设置 ssh 公钥，上次已经说过怎么生产公钥，怎么设置了</p>\n<p><strong>4.1 设置 ssh 公钥</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653667689764-a3570d4f-4ef2-4a30-8a10-a14dd2bd8840.png\" alt=\"img\"></p>\n<p><strong>4.2 创建仓库，并复制仓库 ssh 地址</strong></p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653668188943-de8e5820-74da-4d83-91d8-9b0009ac7812.png\" alt=\"img\"></p>\n<p><strong>4.3 在 idea 上执行下列命令，gitee 上也有教的</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@gitee.com:hedabing/wiki.git  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># origin 是远程仓库的名字，这样就不用每次都写很长的地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin <span class=\"token string\">\"master\"</span></pre></td></tr></table></figure><p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653669018375-61cb5792-27fe-483d-9484-ce03c2e2f254.png\" alt=\"img\"></p>\n<p>就 OK 了。</p>\n<p>下次再有新代码，就一样，用 idea 自带的图标，✔commit，↗push 即可。</p>\n<h2 id=\"4-分支说明\"><a class=\"markdownIt-Anchor\" href=\"#4-分支说明\">#</a> 4 - 分支说明</h2>\n<p>另外，一般工作中不会直接把你写的代码合并到 master 远程主分支上的，</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653787669095-ec8ec08f-06e5-46ef-bbfa-4ccd847c2711.png\" alt=\"img\"></p>\n<p>右下角这个树杈，就是指明了你 push 之后会把你的代码上传合并到哪个分支去，也就是 Local Branch 本地分支：hub/master 这里 hub 是远程仓库名字，master 是远程仓库的远程分支。</p>\n<p>在工作中呢，需要创建属于你自己的分支，你再本地环境下写好代码之后，push 到你自己的分支下。最后要做合并到 master 主分支下的请求才可以.</p>\n<p>例如下面是我的分支，我再这上面上传代码，并不会把代码直接上传到 master 主分支上。</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2022/png/27101822/1653788262004-8506ecdd-4db4-48ed-884c-fb52e026d2e0.png\" alt=\"img\"></p>\n",
            "tags": [
                "git"
            ]
        }
    ]
}